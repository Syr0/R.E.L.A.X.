/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => RelaxPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  regexPairs: [],
  regexGroups: [
    {
      isActive: true,
      groupName: "Default RegEx",
      regexes: [
        {
          "isActive": true,
          "key": "eMail",
          "regex": "([A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,})"
        },
        {
          "isActive": true,
          "key": "Domains",
          "regex": "\\b([a-zA-Z0-9\\-\\.]+\\.(?:com|org|net|mil|edu|COM|ORG|NET|MIL|EDU))"
        },
        {
          "isActive": true,
          "key": "IPv4",
          "regex": "\\b((?:(?:(?!1?2?7\\.0\\.0\\.1)(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)))\\b"
        },
        {
          "isActive": true,
          "key": "GUID",
          "regex": "([A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12})"
        },
        {
          "isActive": true,
          "key": "SHA256",
          "regex": "\\b([a-fA-F0-9]{64})\\b"
        },
        {
          "isActive": true,
          "key": "JARM",
          "regex": "\\b([a-fA-F0-9]{62})\\b"
        },
        {
          "isActive": true,
          "key": "SHA1",
          "regex": "\\b([a-fA-F0-9]{40})\\b"
        },
        {
          "isActive": true,
          "key": "MD5",
          "regex": "\\b([a-fA-F0-9]{32})\\b"
        },
        {
          "isActive": true,
          "key": "Bitcoin",
          "regex": "\\b([13]{1}[a-km-zA-HJ-NP-Z1-9]{26,33}|bc1[a-z0-9]{39,59})\\b"
        },
        {
          "isActive": true,
          "key": "Date",
          "regex": "((?:0[1-9]|[12][0-9]|3[01])[\\\\\\/\\.-](?:0[1-9]|1[012])[\\\\\\/\\.-](?:19|20|)\\d\\d)"
        },
        {
          "isActive": true,
          "key": "Windows Usernames",
          "regex": "\\\\Users\\\\+(?!(?:Public|Administrator)\\\\)([^\\\\]+)\\\\"
        },
        {
          "isActive": true,
          "key": "Markdown \xB4",
          "regex": "(?:[\xB4](((?:(?!<br>|\\r|\\n)[^\xB4 ]){4,30}))[\xB4])"
        },
        {
          "isActive": true,
          "key": "Markdown '",
          "regex": "(?:['](((?:(?!<br>|\\r|\\n)[^' ]){4,30}))['])"
        },
        {
          "isActive": true,
          "key": "CVEs",
          "regex": "(CVE-(1999|2\\d{3})-(?!0{4})(0\\d{2}[0-9]|[1-9]\\d{3,}))"
        },
        {
          "isActive": true,
          "key": "MAC Address",
          "regex": "([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})"
        },
        {
          "isActive": true,
          "key": "Tor Onion Address",
          "regex": "\\b((?:https?:\\/\\/)?(?:www)?(\\S*?\\.onion)\\b)"
        },
        {
          "isActive": true,
          "key": "IPv6 Address",
          "regex": "((?:[0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,7}:|(?:[0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,5}(?::[0-9a-fA-F]{1,4}){1,2}|(?:[0-9a-fA-F]{1,4}:){1,4}(?::[0-9a-fA-F]{1,4}){1,3}|(?:[0-9a-fA-F]{1,4}:){1,3}(?::[0-9a-fA-F]{1,4}){1,4}|(?:[0-9a-fA-F]{1,4}:){1,2}(?::[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:(?:(?::[0-9a-fA-F]{1,4}){1,6})|:(?:(?::[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(?::[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(?:ffff(?::0{1,4}){0,1}:){0,1}(?:(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(?:[0-9a-fA-F]{1,4}:){1,4}:(?:(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9]))"
        },
        {
          "isActive": true,
          "key": "SSDeep",
          "regex": '(\\d+:[a-z+/A-Z0-9]+:[a-z+/A-Z0-9]+,\\"[^\\"]+\\")'
        },
        {
          "isActive": true,
          "key": "VT subitter",
          "regex": "([0-9a-f]{8} - (?:api|web))"
        },
        {
          "isActive": true,
          "key": "MAC Adresses",
          "regex": "((?:[0-9A-Fa-f]{2}[:-]){5}(?:[0-9A-Fa-f]{2}))"
        },
        {
          "isActive": true,
          "key": "Passport",
          "regex": "([A-PR-WY][1-9]\\d\\s?\\d{4}[1-9])"
        },
        {
          "isActive": true,
          "key": "Markdown \u2018",
          "regex": "(?:[\u2018](((?:(?!<br>|\\r|\\n)[^\u2018 ]){4,30}))[\u2018])"
        },
        {
          "isActive": true,
          "key": "Markdown \u2019",
          "regex": "(?:[\u2019](((?:(?!<br>|\\r|\\n)[^\u2019 ]){4,30}))[\u2019])"
        },
        {
          "isActive": true,
          "key": 'Markdown "',
          "regex": '(?:["\u201E\u2033\u201D](((?:(?!<br>|\\r|\\n)[^"\u2033\u201D ]){4,30}))["\u2033\u201D])'
        },
        {
          "isActive": true,
          "key": "Markdown _",
          "regex": "(?:[_](((?:(?!<br>|\\r|\\n)[^_ ]){4,30}))[_])"
        },
        {
          "isActive": true,
          "key": "Markdown \u2018\u2019",
          "regex": "(?:[\u2018](((?:(?!<br>|\\r|\\n)[^\u2019 ]){4,30}))[\u2019])"
        },
        {
          "isActive": true,
          "key": "Signal Frequencies",
          "regex": "(\\b[0-9]{1,4}(?:\\.\\d{1,4})?\\s?(Hz|kHz|MHz|GHz)\\b)"
        },
        {
          "isActive": true,
          "key": "BibTeX Entries",
          "regex": "@(article|book|inbook|conference|inproceedings){([^}]+)}"
        },
        {
          "isActive": true,
          "key": "GPS Coordinates",
          "regex": "\\b[+-]?[0-9]{1,2}\\.[0-9]+,\\s*[+-]?[0-9]{1,3}\\.[0-9]+\\b"
        },
        {
          "isActive": true,
          "key": "ISBN Numbers",
          "regex": "\\bISBN\\s?(?:-?13|-10)?:?\\s?[0-9-]{10,17}\\b"
        },
        {
          "isActive": true,
          "key": "Camera Settings",
          "regex": "\\bISO\\s?[0-9]+|f/[0-9.]+|1/[0-9]+\\s?sec\\b"
        },
        {
          "isActive": true,
          "key": "Historical Dates",
          "regex": "\\b(?:[0-9]{1,4} (AD|BC)|[0-9]{1,4}th century)\\b"
        },
        {
          "isActive": true,
          "key": "Processor Specs",
          "regex": "\\bIntel Core i[3579]-[0-9]{4}[HQGU]K?|AMD Ryzen [3579] [0-9]{4}X?\\b"
        },
        {
          "isActive": false,
          "key": "Base64 Strings",
          "regex": "([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?"
        },
        {
          "isActive": false,
          "key": "Script Language File",
          "regex": "([\\w]+\\.(?:py|js|java|cs|cpp|rb|go|php))[\\b]"
        },
        {
          "isActive": false,
          "key": "Chord Progressions",
          "regex": "\\b((?:C|Dm|Em|F|G|Am|Bdim)(?:\\s->\\s(?:C|Dm|Em|F|G|Am|Bdim))*)\\b"
        },
        {
          "isActive": false,
          "key": "Hex Colors",
          "regex": "#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})"
        },
        {
          "isActive": false,
          "key": "Chemical Elements",
          "regex": "\\b(?:H|He|Li|Be|B|C|N|O|F|Ne|Na|Mg|Al|Si|P|S|Cl|Ar|K|Ca)\\b"
        },
        {
          "isActive": false,
          "key": "Hashtags",
          "regex": "#[A-Za-z0-9_]+"
        },
        {
          "isActive": false,
          "key": "Academic Citations",
          "regex": "\\b\\([A-Za-z]+,\\s[0-9]{4}\\)\\b"
        },
        {
          "isActive": false,
          "key": "Temperature Readings",
          "regex": "\\b-?[0-9]+\\s?(\xB0C|\xB0F|K)\\b"
        }
      ]
    }
  ],
  ignoreLinks: true,
  ignoreCodeBlocks: true,
  defangURLs: true,
  ignoreURLs: false,
  blacklist: [
    "github.com",
    "127.0.0.1",
    "microsoft.com",
    "www.youtube.com",
    "youtube.com",
    "www.microsoft.com",
    "www.github.com",
    "medium.com",
    "www.medium.com",
    "white",
    "windows",
    "kaspersky.com",
    "gmail.com",
    "domain.com",
    "www.fireeye.com",
    "researchcenter.paloaltonetworks.com",
    "www.symantec.com",
    "www.virustotal.com",
    "www.trendmicro.com",
    "virustotal.com",
    "www.Sophos.com",
    "www.mcafee.com",
    "\\Users\\User\\",
    "twitter.com",
    "nytimes.com",
    "_\u041D\u0415\u041C\u0415\u0426\u041A\u0418\u0415_",
    "ced4dc5401f9db497009e3babee91d0b1f51ffe516c1ce4d594442e5a23cc9bf",
    "www.FireEye.com",
    "fireeye.com",
    "info@fireeye.com",
    "bjgwql.com",
    "alumni.ecnu.edu",
    "down.51cto.com",
    "www.djbh.net",
    "402885cb35d11a540135d168e41e000c",
    "rjzyjsxy.zzia.edu",
    "801f81cf-8f30-4aa4-8428-7f9d4e778e76",
    "www.yingjiesheng.com",
    "www.recordedfuture.com",
    "zhidao.baidu.com",
    "mandiant.com",
    "info@mandiant.com",
    "126.com",
    "163.com",
    "hotmail.com",
    "qq.com",
    "sohu.com",
    "yahoo.com",
    "www.mandiant.com",
    "FireEye.com",
    "secureworks.com",
    "blog.trendmicro.com",
    "trendmicro.com",
    "www.slideshare.net",
    "www.pwc.com",
    "securelist.com",
    "www.eset.com",
    "asert.arbornetworks.com",
    "unit42.paloaltonetworks.com",
    "sert.arbornetworks.com",
    "log.apnic.net",
    "www.netscout.com",
    "research.nccgroup.com",
    "intelligence@kaspersky.com",
    "update.iaacstudio.com",
    "bleepingcomputer.com",
    "campuscodi@xmpp.is",
    "::",
    "_LOCAL_",
    "_CURRENT_",
    "intelreports@kaspersky.com",
    "www.welivesecurity.com",
    "attack.mitre.org",
    "www.clearskysec.com",
    "blog.talosintelligence.com",
    "5d631d77401615d53f3ce3dbc2bfee5d934602dc35d488aa7cebf9b3ff1c4816",
    "itsec.eicp.net",
    "pastebin.com",
    "research.checkpoint.com",
    "www.proofpoint.com",
    "en.wikipedia.org",
    "::C",
    "docs.microsoft.com",
    "www.bleepingcomputer.com",
    "_process_",
    "blog.malwarebytes.com",
    "e::",
    "_file_",
    "0.0.0.0",
    "::F",
    "info@clearskysec.com",
    "mp.weixin.qq.com",
    "www.crowdstrike.com",
    "_EXECUTE_",
    "'Public'",
    "ti.qianxin.com",
    "_string_",
    "google.com",
    "_meteor_",
    "_name_",
    "d::",
    "onlinenic-enduser@onlinenic.com",
    "welivesecurity.com",
    "www.google.com",
    "www.cybereason.com",
    "icann.org",
    "_content_",
    "\\Users\\user\\",
    "www.facebook.com",
    '"name"',
    "securityintelligence.com",
    "www.secureworks.com",
    "_data_",
    "news.sophos.com",
    "Microsoft.NET",
    "www.threatgeek.com",
    "www.zdnet.com",
    "raw.githubusercontent.com",
    "www.fidelissecurity.com",
    "ti.360.net",
    "blogs.blackberry.com",
    '"POST"',
    "_FILE_",
    "cdn.discordapp.com",
    "pic.twitter.com",
    "msdn.microsoft.com",
    "::c",
    "krebsonsecurity.com",
    "symantec-enterprise-blogs.security.com",
    "_dropper_",
    "www.reuters.com",
    "BleepingComputer.com",
    "soft@hotmail.com",
    "ASP.NET",
    "8.8.8.8",
    "_DATA_",
    "www.wired.com",
    "proofpoint.com",
    '"Mandiant"',
    "\\Users\\admin\\",
    "_Trojan_",
    "reeye.com",
    '"value"',
    "thedfirreport.com",
    "threatpost.com",
    `'"{0}"'`,
    "info@lifars.com",
    "LIFARS.com",
    "_from_",
    "au.com",
    "isc.sans.edu",
    "protonmail.com",
    "asec.ahnlab.com",
    "'%WINDIR%\\syswow64\\net.exe'",
    "www.threatconnect.com",
    "www.dropbox.com",
    '"true"',
    "www.nytimes.com",
    "crowdstrike.com",
    "drive.google.com",
    '"white"',
    "172.16.253.130",
    '"WScript.Shell"',
    "www.arbornetworks.com",
    "JinDiQIAO@hotmail.com",
    "docs.google.com",
    "_DOMAIN_",
    "www.virusbulletin.com",
    "_creation/win_",
    "whois.arin.net",
    "_Backdoor_",
    "citizenlab.org",
    "www.fortinet.com",
    "Snort.org",
    "::A",
    "web.archive.org",
    "_sample_",
    "_proc_",
    "_hash_",
    "fortinet.com",
    "www.readability.com",
    "doi.org",
    "192.168.1.1",
    "_decrypt_",
    "blog.yoroi.com",
    '"data"',
    "F-Secure.com",
    '"informational"',
    "5.182.211.5",
    "www.group-ib.com",
    "gcat.google.com",
    "www.linkedin.com",
    "contact@idcprivacy.com",
    "_COMMON_",
    '"type"',
    "_client_",
    '"&bs&"',
    "threatintel@eset.com",
    "blog.netlab.360.com",
    "\\Users\\<user>\\",
    "_part_",
    "pandasecurity.com",
    "technet.microsoft.com",
    "\\Users\\username\\",
    "www.morphisec.com",
    "'\\x00'",
    "avsvmcloud.com",
    "1.0.0.0",
    "_PROCESS_",
    "_ATTRIBUTE_",
    "www.bbc.com",
    "www.volexity.com",
    "::cb",
    "securingtomorrow.mcafee.com",
    "www.w3.org",
    "withheldforprivacy.com",
    "www.ptsecurity.com",
    "_FLAG_",
    "_read_",
    "talosintelligence.com",
    "_write_",
    "\\Users\\<username>\\",
    "_entry_",
    "_value_",
    "192.168.1.8",
    "_TYPE_",
    "_user_",
    "a::",
    "facebook.com",
    '"false"',
    '"cmd.exe"',
    "_config_",
    "1.1.1.1",
    "_init_",
    "_CLASSES_",
    "www.f-secure.com",
    "www.washingtonpost.com",
    "clearskysec.com",
    "info@cyberkov.com",
    "_module_",
    "_object_",
    "zscaler.com",
    "www.apple.com",
    "::E",
    "api.telegram.org",
    '"10135536"',
    "www.cyberkov.com",
    "blogs.microsoft.com",
    "cybersecurity.att.com",
    "www.cisco.com",
    "api.ipify.org",
    "dragos.com",
    "www.freebuf.com",
    "www.kaspersky.com",
    "_server_",
    "blog.group-ib.com",
    "talos-external@cisco.com",
    "_DEVICE_",
    "B5014019",
    "_Hunting_",
    "schemas.microsoft.com",
    "www.intezer.com",
    "objective-see.com",
    '"#00ba66"',
    "1.3.6.1",
    "group-ib.com",
    '"UTF-8"',
    "_Donut_",
    "_QUERY_",
    "example.com",
    "link.linkipv6.com",
    "CyWatch@fbi.gov",
    "www.paloaltonetworks.com",
    "ddns.net",
    "www.amnesty.org",
    "www.darkreading.com",
    "archive.org",
    '"file"',
    "sentinelone.com",
    "_payload_",
    "'value'",
    "ptsecurity.com",
    "_encrypted_",
    "_security_",
    "_with_",
    "\xE6Cheers\xC6",
    '"kernel32.dll"',
    "blog.cyble.com",
    "_Win32_",
    "_type_",
    "symantec.com",
    '"path"',
    '"Port"',
    "_command_",
    "gist.github.com",
    "wikileaks.org",
    "thehackernews.com",
    "_WITH_",
    "www.bitly.com",
    "dawn.pakgov.org",
    "_next_",
    "bitly.com",
    '"UTF-16LE"',
    "contagiodump.blogspot.com",
    "www.exploit-db.com",
    '"config"',
    "ia801503.us.archive.org",
    "intezer.com",
    "cybereason.com",
    "support.microsoft.com",
    "_random_",
    "_block_",
    '"Microsoft"',
    "sites.google.com",
    "_FILES_",
    "_SYSTEM_",
    "_operand_",
    "www.blackhat.com",
    "www.anomali.com",
    '"Scripting.FileSystemObject"',
    "_NOTIFY_",
    '"process"',
    '"Jitter"',
    "blog.avast.com",
    '"server"',
    "45.154.14.235",
    "_Loader_",
    '"event"',
    '"Platinum"',
    '"2016-04-12"',
    "schemas.xmlsoap.org",
    "www.theguardian.com",
    "blog.morphisec.com",
    "tutanota.com",
    "31.13.195.251",
    "_Report_",
    "_line_",
    "_THREAD_",
    "_DIRECTORY_",
    "www.sophos.com",
    "_target_",
    "mail.com",
    "\\Users\\Admin\\",
    "49757cf85657757704656c079785c072bbc233cab942418d99d1f63d43f28359",
    "s.certfa.com",
    "_2-gram_",
    "45.77.60.138",
    '"tok-go"',
    "_sequence_",
    "api.faceit.com",
    "www.securityweek.com",
    "www.sans.org",
    "www.accenture.com",
    "www.icann.org",
    "_Shell_",
    "labs.sentinelone.com",
    "4a74a9fd40b63218f7504f806fce71dffefc1b1d6ca4bbaadd720b6a89d47761",
    '"powershell.exe"',
    "www.secpulse.com",
    "_executable_",
    "WWW.LOGRHYTHM.COM",
    '"ES_EVENT_',
    "cylera.com",
    "cdnlist.net",
    "id-ransomware.blogspot.com",
    '"NCSC"',
    "exploitreversing.com",
    "www.wsj.com",
    "community.riskiq.com",
    "blog.certfa.com",
    "judystevenson.info",
    "boozallen.com",
    '"hidden_cobra"',
    "_header_",
    "_func_",
    "WWW.VIRUSBULLETIN.COM",
    "www.torproject.org",
    '"Start"',
    "_FONT_",
    "SecPulse.COM",
    "tinyurl.com",
    '"password"',
    "apple.com",
    "blogs.technet.com",
    "www.idcprivacy.com",
    "_local_",
    "arstechnica.com",
    "www.bitdefender.com",
    "_public_",
    '"sha1"',
    "_PHONE_",
    "marcoramilli.com",
    "_update_",
    "trustwave.com",
    "i.imgur.com",
    "customerportal.solarwinds.com",
    "www.zscaler.com",
    "_path_",
    "_start_",
    '"time"',
    '"C:\\Windows\\System32\\cmd.exe"',
    '"root"',
    "_host_",
    "\xE6alyac.org",
    "taskmgr.servehttp.com",
    "_stomp_",
    '"Polling"',
    "www.bloomberg.com",
    "www.akamai.com",
    "threatrecon.nshc.net",
    "_service_",
    "msrc.microsoft.com",
    "learn.microsoft.com",
    '"base64"',
    "_REQUEST_",
    "private.directinvesting.com",
    "81180bf9c7b282c6b8411f8f315bc422",
    "\\Users\\USER\\",
    "_HOMEUNIX_",
    "recordedfuture.com",
    "malware-traffic-analysis.net",
    "ip-api.com",
    "_VERSION_",
    "blog.eset.com",
    '"sha256"',
    "_REL32_",
    "www.forbes.com",
    "nakedsecurity.sophos.com",
    "_CREATE_",
    "112.175.92.57",
    '"username"',
    "_libc_",
    "assadcrimes.info",
    "stemtopx.com",
    "intel471.com",
    "vblocalhost.com",
    '"open"',
    "_READ_",
    "service.clickaway.com",
    "www.LIFARS.com",
    "team-cymru.com",
    "_table_",
    "_SECTION_",
    "::Dec",
    '"__main_',
    "_kernel32_",
    "_GLOB_",
    "www.threatexpert.com",
    "media.kasperskycontenthub.com",
    "naver.com",
    "70034b33f59c6698403293cdc28676c7daa8c49031089efa6eefce41e22dccb3",
    "zdnet.com",
    '"Wscript.Shell"',
    "iplogger.org",
    "_stack_",
    "_STATUS_",
    "cderlearn.com",
    "_creation/proc_",
    "'bytes'",
    "threatvector.cylance.com",
    '"port"',
    '"REG_DWORD"',
    "\\Users\\Baldur\\",
    "techcommunity.microsoft.com",
    '"\\x00"',
    "66.42.98.220",
    "www.km153.com",
    "_files_",
    "www.sentinelone.com",
    "ww.recordedfuture.com",
    "_ENTRY_",
    "_call_",
    "_current_",
    "::a",
    "\xE6",
    "_list_",
    "reyweb.com",
    '"center"',
    "_EXTERNAL_",
    "'__main_",
    "_Webshell_",
    "play.google.com",
    "'utf-8'",
    "www.godaddy.com",
    '"submit"',
    '"2018/04/19"',
    "172.16.10.2",
    "info@FireEye.com",
    "_inthe_",
    "threatconnect.com",
    "intrusiontruth.wordpress.com",
    "\\Users\\Username\\",
    "mcafee.com",
    "_main_",
    "E::",
    "de.com",
    "\xE6type\xC6",
    "'false'",
    "_susp_",
    "_START_",
    "_DISK_",
    "_apt38_",
    "_check_",
    "www.mediafire.com",
    "info@circl.lu",
    "\\Users\\jack\\",
    "wordkeyvpload.net",
    "_APT1_",
    "_packet_",
    "_buffer_",
    "_IMAGE_",
    "www.blackberry.com",
    "plus.google.com",
    "_code_",
    '"REG_SZ"',
    "securityscorecard.com",
    '"True"',
    '"start"',
    "_internal_",
    "photobucket.com",
    '"Name"',
    "103.125.190.248",
    "xfish@hotmail.com",
    "192.168.0.1",
    "pwc.blogs.com",
    "labs.bitdefender.com",
    "_HIGHNOON_",
    "_Ransomware_",
    "_INFO_",
    "\xE6path.alyac.org",
    "com.ga",
    '"utf-8"',
    "_cobra_",
    "VB.NET",
    "_frame_",
    "_Generic_",
    "_Dropper_",
    "rdap.arin.net",
    "submit@malware.us-cert.gov",
    "www.csoonline.com",
    "www.amazon.com",
    "181.39.135.126",
    "197.211.212.59",
    "81.94.192.147",
    '"Content-Type"',
    "_method_",
    '"arguments"',
    "redcanary.com",
    "\\Users\\*\\",
    "www.langner.com",
    "_pass_",
    "enripintos123@outlook.es",
    "EFF.ORG",
    "www.securityscorecard.com",
    "info.publicintelligence.net",
    "documents.trendmicro.com",
    '"user"',
    "www.bing.com",
    "\xE6TeamSpy\xC6",
    "gitlab.com",
    '"Type"',
    "_/\\/\\_",
    "9375CFF0413111d3B88A00104B2A6676",
    '"Base"',
    "process.com",
    "185.34.224.121",
    "172.245.6.134",
    "255.255.255.0",
    "_memory_",
    "ddea408e178f0412ae78ff5d5adf2439251f68cad4fd853ee466a3c74649642d",
    "_2020_",
    "_encoded_",
    "otx.alienvault.com",
    "_system_",
    "phdays.com",
    '"DistinguishedName"',
    '"ScopeOfSearch"',
    '"SearchFilter"',
    '"member=*"',
    "www.apache.org",
    "_resolve_",
    "2151c1977b4555a1761c12f151969f8e853e26c396fa1a7b74ccbaf3a48f4525",
    '"client"',
    "_version_",
    '"text"',
    "_OPTION_",
    "report@cisa.gov",
    '"system"',
    '"hostname"',
    "10.0.0.1",
    "Cybersecurity_Requests@nsa.gov",
    "\\Users\\\\%username%\\",
    "topsec2014.com",
    "_section_",
    "greensky27.vicp.net",
    "_stub_",
    "www.carbonblack.com",
    "\\Users\\%username%\\",
    "_time_",
    "GODADDY.COM",
    "www.cyberark.com",
    "sharingmymedia.com",
    "we11point.com",
    "\\Users\\IEUser\\",
    "coldsealus.fatcow.com",
    "www.researchbundle.com",
    "wilcarobbe.com",
    "xml.ssdsandbox.net",
    "_size_",
    "_exploit_",
    "www.ahnlab.com",
    '"White"',
    "_return_",
    '".exe"',
    "www.exatrack.com",
    "_SystemCall_",
    '"hidden"',
    "bitbucket.org",
    "com.net",
    "rozinandrey736@gmail.com",
    "_nagy_",
    "a0e9f5d64349fb13191bc781f81f42e1",
    "0v2x.blogspot.com",
    '"NO_CHANGE"',
    "_Threat_",
    "_access_",
    "_EXPORT_",
    "_proxy_",
    "www.cyberscoop.com",
    "www.yahoo.com",
    "www.namecheap.com",
    "blog.checkpoint.com",
    "_win32_",
    "::f",
    "::e",
    "aol.com",
    "_BOOT_",
    "_ACCESS_",
    "_Fidelis_",
    "_delegate_",
    "_ENGLISH_",
    "wjwj.no-ip.org",
    "tr.com",
    "'udbcgiut.dat'",
    "papagujjiiiiii.blogspot.com",
    "9ke6n.blogspot.com",
    "joexpediagroup.com",
    "_NtElevation_",
    "_last_",
    "www.cve.mitre.org",
    "_CONTROL_",
    "_EXPAND_",
    "www.bankinfosecurity.com",
    "www.contextis.com",
    "WeLiveSecurity.com",
    "blog.reversinglabs.com",
    '"test"',
    "_STACK_",
    "_byte_",
    "blog.fox-it.com",
    "bannetwork.org"
  ]
};
var RelaxSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.isHighlighted = false;
    this.dragElement = null;
    this.currentIndex = null;
    this.newIndex = null;
    this.startY = 0;
    this.startTop = 0;
    this.initialOffsetY = 0;
    this.settingsInitialized = false;
    this.plugin = plugin;
    this.onDragEnd = this.onDragEnd.bind(this);
    this.onDragMove = this.onDragMove.bind(this);
    this.makeDraggable = this.makeDraggable.bind(this);
    this.updateRegexOrderFromDOM = () => {
      const regexGroups = [];
      this.keyValueContainer.querySelectorAll(".regex-group-container").forEach((groupContainer) => {
        const groupNameElement = groupContainer.querySelector(".regex-group-name");
        const activeCheckboxInput = groupContainer.querySelector("input[type='checkbox']");
        const groupName = groupNameElement ? groupNameElement.textContent : "";
        const isActive = activeCheckboxInput ? activeCheckboxInput.checked : false;
        const regexes = Array.from(groupContainer.querySelectorAll(".regex-group-content .flex-row")).map((row) => {
          const keyInput = row.querySelector("input[placeholder='Description-Key']");
          const valueInput = row.querySelector("input[placeholder='Regexp']");
          const regexActiveCheckbox = row.querySelector("input[type='checkbox']");
          return {
            isActive: regexActiveCheckbox ? regexActiveCheckbox.checked : false,
            key: keyInput ? keyInput.value : "",
            regex: valueInput ? valueInput.value : ""
          };
        });
        const isCollapsed = groupContainer.querySelector(".regex-group-content").style.display === "none";
        regexGroups.push({ isActive, groupName, regexes, isCollapsed });
      });
      if (this.plugin && this.plugin.settings) {
        this.plugin.settings.regexGroups = regexGroups;
      } else {
        console.error("Plugin or settings not available");
      }
      const regexPairs = Array.from(this.keyValueContainer.querySelectorAll(".standalone-regex-row")).map((row) => {
        const keyInput = row.querySelector("input[placeholder='Description-Key']");
        const valueInput = row.querySelector("input[placeholder='Regexp']");
        const regexActiveCheckbox = row.querySelector("input[type='checkbox']");
        return {
          isActive: regexActiveCheckbox ? regexActiveCheckbox.checked : false,
          key: keyInput ? keyInput.value : "",
          regex: valueInput ? valueInput.value : ""
        };
      });
      this.plugin.settings.regexPairs = regexPairs;
      this.plugin.saveSettings();
    };
    this.saveChanges = () => {
      this.updateRegexOrderFromDOM();
      this.plugin.saveSettings();
      const closeButton = document.querySelector(".modal-close-button");
      if (closeButton) {
        closeButton.click();
      }
      this.setHighlighted(false);
    };
  }
  makeDraggable(element, dragHandle) {
    if (!dragHandle) {
      console.error("Drag handle not found!", element.innerHTML);
      return;
    }
    dragHandle.addEventListener("mousedown", (e) => {
      e.preventDefault();
      e.stopPropagation();
      this.dragElement = element;
      this.dragElement.classList.add("dragging");
      this.placeholder = document.createElement("div");
      this.placeholder.className = "placeholder";
      this.placeholder.style.position = "relative";
      this.placeholder.style.height = `${element.offsetHeight}px`;
      this.placeholder.style.backgroundColor = "rgba(0, 0, 0, 0.1)";
      element.parentNode.insertBefore(this.placeholder, element);
      this.dragElement.style.visibility = "hidden";
      this.dragElement.style.border = "none";
      const clone = this.dragElement.cloneNode(true);
      clone.style.position = "absolute";
      clone.style.top = "0";
      clone.style.left = "0";
      clone.style.width = "100%";
      clone.style.height = "100%";
      clone.style.visibility = "visible";
      clone.style.pointerEvents = "none";
      clone.style.zIndex = "999";
      this.placeholder.appendChild(clone);
      const frame = document.createElement("div");
      frame.style.position = "absolute";
      frame.style.top = "0";
      frame.style.left = "0";
      frame.style.width = "100%";
      frame.style.height = "100%";
      frame.style.border = "2px dashed var(--interactive-accent)";
      frame.style.boxSizing = "border-box";
      frame.style.zIndex = "1000";
      this.placeholder.appendChild(frame);
      document.addEventListener("mousemove", this.onDragMove);
      document.addEventListener("mouseup", this.onDragEnd);
    });
  }
  findClosestGroupOrStandaloneArea(yPosition) {
    let closest = null;
    let closestDistance = Infinity;
    const allContainers = this.keyValueContainer.querySelectorAll(".regex-group-container, .standalone-regex-row");
    allContainers.forEach((container) => {
      const rect = container.getBoundingClientRect();
      const containerMidpoint = window.scrollY + rect.top + rect.height / 2;
      const distance = Math.abs(yPosition - containerMidpoint);
      if (distance < closestDistance) {
        closest = container;
        closestDistance = distance;
      }
    });
    return closest;
  }
  findSourceGroupIndex(dragElement) {
    const groupContainer = dragElement.closest(".regex-group-container");
    if (!groupContainer)
      return -1;
    const groupName = groupContainer.querySelector(".regex-group-name").textContent.trim();
    return this.plugin.settings.regexGroups.findIndex((group) => group.groupName === groupName);
  }
  adjustPlaceholderPosition(targetGroup) {
    if (!this.dragElement || !this.placeholder)
      return;
    if (targetGroup.classList.contains("regex-group-container") || targetGroup.classList.contains("standalone-regex-row")) {
      const parent = targetGroup.parentNode;
      if (parent && parent === this.placeholder.parentNode) {
        parent.insertBefore(this.placeholder, targetGroup);
      }
    }
  }
  onDragMove(e) {
    if (!this.dragElement)
      return;
    const parent = this.dragElement.parentElement;
    const scrollTop = parent.scrollTop;
    const mouseY = e.clientY + scrollTop;
    let closest = null;
    let closestDistance = Infinity;
    [...parent.children].forEach((child) => {
      if (child !== this.dragElement && child !== this.placeholder) {
        const rect = child.getBoundingClientRect();
        const childMidpoint = rect.top + scrollTop + rect.height / 2;
        const distance = Math.abs(mouseY - childMidpoint);
        if (distance < closestDistance) {
          closest = child;
          closestDistance = distance;
        }
      }
    });
    if (this.placeholder) {
      const clone = this.placeholder.querySelector(".clone-class");
      if (clone) {
        clone.style.transform = `translateY(${e.clientY - this.startY}px)`;
      }
    }
    if (closest) {
      const rect = closest.getBoundingClientRect();
      const childMidpoint = rect.top + scrollTop + rect.height / 2;
      if (mouseY < childMidpoint) {
        parent.insertBefore(this.placeholder, closest);
      } else {
        parent.insertBefore(this.placeholder, closest.nextSibling);
      }
    }
    let targetGroup = this.findClosestGroupOrStandaloneArea(e.clientY);
    if (targetGroup) {
      if (targetGroup.classList.contains("regex-group-container")) {
        if (targetGroup) {
          this.adjustPlaceholderPosition(targetGroup);
        }
      }
    }
  }
  findRegexIndexInGroup(dragElement, sourceGroupIndex) {
    const group = this.plugin.settings.regexGroups[sourceGroupIndex];
    const regexKey = dragElement.querySelector("input[placeholder='Description-Key']").value;
    return group.regexes.findIndex((regex) => regex.key === regexKey);
  }
  onDragEnd() {
    if (!this.dragElement || !this.placeholder)
      return;
    this.placeholder.parentNode.insertBefore(this.dragElement, this.placeholder);
    this.dragElement.style.visibility = "visible";
    this.placeholder.remove();
    this.dragElement.classList.remove("dragging");
    this.dragElement = null;
    this.placeholder = null;
    this.updateRegexOrderFromDOM();
    this.plugin.saveSettings();
  }
  findGroupIndex(groupElement) {
    if (!groupElement)
      return -1;
    const groupName = groupElement.querySelector(".regex-group-name").textContent.trim();
    return this.plugin.settings.regexGroups.findIndex((group) => group.groupName === groupName);
  }
  findRegexPairIndex(draggedElement) {
    const key = draggedElement.querySelector("input[placeholder='Description-Key']").value;
    return this.plugin.settings.regexPairs.findIndex((pair) => pair.key === key);
  }
  setHighlighted(highlight) {
    this.isHighlited = highlight;
    if (this.saveButton) {
      this.saveButton.disabled = !highlight;
      if (highlight) {
        this.saveButton.classList.add("is-highlight");
      } else {
        this.saveButton.classList.remove("is-highlight");
      }
    }
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    this.keyValueContainer = containerEl.createEl("div");
    this.keyValueContainer.classList.add("flex-column");
    this.createSettingsUI(containerEl);
    const validateContent = (content) => {
      const regex = /\[\[(.+?)\]\]/g;
      return !regex.test(content);
    };
    const applyValidationStyle = (textarea) => {
      if (validateContent(textarea.value)) {
        textarea.classList.toggle("valid-content", validateContent(textarea.value));
      } else {
        textarea.classList.toggle("invalid-content", !validateContent(textarea.value));
      }
    };
    document.addEventListener("DOMContentLoaded", (event) => {
      const modalButton = document.querySelector("#openModalButton");
      modalButton.addEventListener("click", function() {
        const modal = document.querySelector(".modal");
        const textarea = modal.querySelector("textarea");
        applyValidationStyle(textarea);
        textarea.addEventListener("input", function() {
          applyValidationStyle(textarea);
        });
      });
      let draggedElement = null;
      let placeholder = null;
      const createPlaceholder = () => {
        const div = document.createElement("div");
        div.style.height = "2px";
        div.style.background = "blue";
        div.style.margin = "5px 0";
        return div;
      };
      document.querySelectorAll(".draggable").forEach((elem) => {
        elem.addEventListener("mousedown", function(e) {
          draggedElement = this;
          placeholder = createPlaceholder();
          draggedElement.parentNode.insertBefore(placeholder, draggedElement.nextSibling);
          draggedElement.style.opacity = "0.5";
          e.preventDefault();
        });
        document.addEventListener("mousemove", (e) => {
          if (!draggedElement)
            return;
          const rect = placeholder.getBoundingClientRect();
          const parent = placeholder.parentNode;
          parent.childNodes.forEach((child) => {
            if (child !== draggedElement && child !== placeholder) {
              const childRect = child.getBoundingClientRect();
              if (e.clientY > childRect.top && e.clientY < childRect.bottom) {
                if (e.clientY < (childRect.top + childRect.bottom) / 2) {
                  parent.insertBefore(placeholder, child);
                } else {
                  parent.insertBefore(placeholder, child.nextSibling);
                }
              }
            }
          });
        });
        document.addEventListener("mouseup", () => {
          if (draggedElement) {
            draggedElement.style.opacity = "1";
            placeholder.parentNode.insertBefore(draggedElement, placeholder);
            placeholder.parentNode.removeChild(placeholder);
            draggedElement = null;
            placeholder = null;
          }
        });
      });
    });
    const validateRegexInput = (input) => {
      let errorMsg = "";
      try {
        const reg = new RegExp(input.value);
        const groupCount = (input.value.match(/\((?!\?)/g) || []).length;
        if (groupCount > 1) {
          input.classList.add("invalid-border");
          errorMsg = "More than one group detected.";
        } else {
          input.classList.remove("invalid-border");
        }
      } catch (e) {
        input.classList.add("invalid-border");
        errorMsg = "Invalid regex.";
      }
      const errorElement = input.nextSibling;
      if (errorElement && errorElement.classList.contains("regex-error")) {
        errorElement.textContent = errorMsg;
      } else {
        const span = document.createElement("span");
        span.className = "regex-error";
        span.textContent = errorMsg;
        input.parentNode.insertBefore(span, input.nextSibling);
      }
    };
    const addRegexToGroup = (groupContent, regex) => {
      const row = groupContent.createEl("div", { cls: "flex-row" });
      row.style.display = "flex";
      row.style.alignItems = "center";
      const dragHandle = row.createEl("span", { className: "drag-handle", text: "\u2630" });
      const activeCheckbox = row.createEl("input", { type: "checkbox", className: "active-checkbox" });
      activeCheckbox.checked = regex.isActive;
      const keyInput = row.createEl("input", {
        type: "text",
        className: "key-input-flex",
        value: regex.key,
        placeholder: "Description-Key"
      });
      const valueInput = row.createEl("input", {
        type: "text",
        className: "value-input-flex",
        value: regex.regex,
        placeholder: "Regexp"
      });
      valueInput.style.flexGrow = "1";
      const deleteButton = row.createEl("button", { text: "Delete", className: "delete-button" });
      deleteButton.addEventListener("click", () => {
        row.remove();
        this.updateRegexOrderFromDOM();
        this.plugin.saveSettings();
      });
      if (dragHandle)
        this.makeDraggable(row, dragHandle);
      keyInput.addEventListener("input", () => {
        this.setHighlighted(true);
      });
      valueInput.addEventListener("input", () => {
        validateRegexInput(valueInput);
        this.setHighlighted(true);
      });
    };
    const addGroupUI = (group, index) => {
      const groupContainer = this.keyValueContainer.createEl("div", { cls: "regex-group-container group-container" });
      groupContainer.style.border = group.isActive ? "1px solid var(--interactive-accent)" : "1px solid #ccc";
      groupContainer.style.padding = "10px";
      groupContainer.style.marginBottom = "10px";
      const groupHeader = groupContainer.createEl("div", { cls: "regex-group-header" });
      const groupNameAndControls = groupHeader.createDiv({ cls: "group-name-and-controls" });
      const dragHandle = groupNameAndControls.createEl("span", { className: "drag-handle", text: "\u2630" });
      const collapseIcon = groupNameAndControls.createEl("span", { cls: "collapse-icon" });
      collapseIcon.textContent = group.isCollapsed ? "\u25BA" : "\u25BC";
      const groupActiveCheckbox = groupNameAndControls.createEl("input", { type: "checkbox" });
      groupActiveCheckbox.checked = group.isActive;
      const groupNameEl = groupNameAndControls.createEl("span", { cls: "regex-group-name", text: group.groupName });
      groupNameEl.setAttribute("contenteditable", "true");
      const controlButtons = groupHeader.createDiv({ cls: "control-buttons" });
      const addRegexButton = controlButtons.createEl("button", { text: "Add Regex", className: "add-regex-button" });
      const deleteGroupButton = controlButtons.createEl("button", { text: "Delete Group", className: "delete-group-button" });
      groupActiveCheckbox.addEventListener("change", () => {
        group.isActive = groupActiveCheckbox.checked;
        groupContainer.style.border = group.isActive ? "1px solid var(--interactive-accent)" : "1px solid #ccc";
        this.setHighlighted(true);
      });
      const groupContent = groupContainer.createEl("div", { cls: "regex-group-content" });
      groupContent.style.display = group.isCollapsed ? "none" : "block";
      addRegexButton.addEventListener("click", () => {
        group.regexes = Array.from(groupContainer.querySelectorAll(".regex-group-content .flex-row")).map((row) => {
          const keyInput = row.querySelector("input[placeholder='Description-Key']");
          const valueInput = row.querySelector("input[placeholder='Regexp']");
          const regexActiveCheckbox = row.querySelector("input[type='checkbox']");
          return {
            isActive: regexActiveCheckbox ? regexActiveCheckbox.checked : false,
            key: keyInput ? keyInput.value : "",
            regex: valueInput ? valueInput.value : ""
          };
        });
        group.regexes.unshift({ isActive: true, key: "New Key", regex: "New Regex" });
        this.plugin.settings.regexGroups[index] = group;
        this.plugin.saveSettings();
        this.display();
      });
      deleteGroupButton.addEventListener("click", () => {
        this.plugin.settings.regexGroups.splice(index, 1);
        this.plugin.saveSettings();
        this.display();
      });
      collapseIcon.addEventListener("click", () => {
        group.isCollapsed = !group.isCollapsed;
        groupContent.style.display = group.isCollapsed ? "none" : "block";
        collapseIcon.textContent = group.isCollapsed ? "\u25BA" : "\u25BC";
        this.setHighlighted(true);
      });
      groupNameEl.addEventListener("blur", (event) => {
        const newName = groupNameEl.textContent.trim();
        if (newName.length > 0 && newName !== group.groupName) {
          group.groupName = newName;
          this.updateRegexOrderFromDOM();
          this.plugin.saveSettings();
          new import_obsidian.Notice("Group name updated.");
        } else {
          groupNameEl.textContent = group.groupName;
        }
      });
      if (dragHandle)
        this.makeDraggable(groupContainer, dragHandle);
      group.regexes.forEach((regex) => addRegexToGroup(groupContent, regex));
    };
    const buttonsContainer = containerEl.createDiv();
    buttonsContainer.style.display = "flex";
    buttonsContainer.style.justifyContent = "space-between";
    buttonsContainer.style.marginBottom = "10px";
    const addGroupButton = buttonsContainer.createEl("button", { text: "Add Group" });
    addGroupButton.addEventListener("click", () => {
      const newGroup = {
        isActive: true,
        groupName: "New Group",
        regexes: []
      };
      this.plugin.settings.regexGroups.push(newGroup);
      this.display();
      this.plugin.saveSettings();
    });
    const addRegexPairButton = buttonsContainer.createEl("button", { text: "Add Regexp" });
    addRegexPairButton.addEventListener("click", () => {
      const newPair = { isActive: false, key: "", regex: "" };
      this.addStandaloneRegexUI(newPair);
      this.plugin.settings.regexPairs.push(newPair);
      this.plugin.saveSettings();
    });
    this.plugin.settings.regexGroups.forEach((group, index) => addGroupUI(group, index));
    if (this.plugin.settings.regexPairs && Array.isArray(this.plugin.settings.regexPairs)) {
      this.plugin.settings.regexPairs.forEach((pair) => this.addStandaloneRegexUI(pair));
    }
    this.renderBlacklistUI(containerEl);
  }
  renderBlacklistUI(containerEl) {
    containerEl.createEl("h3", { text: "Blacklist Management" });
    containerEl.createEl("p", { text: "Enter items to blacklist. These items will not be processed." });
    const blacklistContainer = containerEl.createDiv();
    this.plugin.settings.blacklist.forEach((item, index) => {
      const itemDiv = blacklistContainer.createDiv();
      itemDiv.textContent = item;
      const removeButton = itemDiv.createEl("button", { text: "Remove" });
      removeButton.onclick = () => {
        this.plugin.settings.blacklist.splice(index, 1);
        this.plugin.saveSettings().then(() => this.display());
      };
    });
    const addItemInput = containerEl.createEl("input", { type: "text" });
    const addItemButton = containerEl.createEl("button", { text: "Add to Blacklist" });
    addItemButton.onclick = () => {
      if (addItemInput.value && !this.plugin.settings.blacklist.includes(addItemInput.value)) {
        this.plugin.settings.blacklist.push(addItemInput.value);
        addItemInput.value = "";
        this.plugin.saveSettings().then(() => this.display());
      }
    };
  }
  createSettingsUI(containerEl) {
    new import_obsidian.Setting(containerEl).setName("Ignore links").addToggle((toggle) => {
      var _a;
      toggle.setValue((_a = this.plugin.settings.ignoreLinks) != null ? _a : true).onChange(async (value) => {
        this.plugin.settings.ignoreLinks = value;
        await this.plugin.saveSettings();
      }).setTooltip("Do not modify Links, preventing to handle the same data over and over again.");
    });
    new import_obsidian.Setting(containerEl).setName("Ignore URLs").addToggle((toggle) => {
      var _a;
      toggle.setValue((_a = this.plugin.settings.ignoreURLs) != null ? _a : true).onChange(async (value) => {
        this.plugin.settings.ignoreURLs = value;
        await this.plugin.saveSettings();
      }).setTooltip("Do not modify URLs, so they do keep working.");
    });
    new import_obsidian.Setting(containerEl).setName("Defang URLs").addToggle((toggle) => {
      var _a;
      toggle.setValue((_a = this.plugin.settings.defangURLs) != null ? _a : true).onChange(async (value) => {
        this.plugin.settings.defangURLs = value;
        await this.plugin.saveSettings();
      }).setTooltip("Convert https[:]// -> https://");
    });
    new import_obsidian.Setting(containerEl).setName("Ignore code blocks").addToggle((toggle) => {
      var _a;
      toggle.setValue((_a = this.plugin.settings.ignoreCodeBlocks) != null ? _a : false).onChange(async (value) => {
        this.plugin.settings.ignoreCodeBlocks = value;
        await this.plugin.saveSettings();
      }).setTooltip("Ignore content within code blocks when linking regexes.");
    });
    new import_obsidian.Setting(containerEl).setName("Save").addButton((button) => {
      button.setButtonText("Save").onClick(() => {
        this.saveChanges();
      });
      this.saveButton = button.buttonEl;
    });
    new import_obsidian.Setting(containerEl).setName("Reset defaults").addButton((button) => {
      button.setButtonText("Reset").onClick(() => {
        const resetConfirm = confirm("Are you sure you want to reset to default settings?");
        if (resetConfirm) {
          this.resetToDefaults();
          if (this.plugin._settingTabReference) {
            this.plugin._settingTabReference.display();
          }
        }
      });
    });
  }
  resetToDefaults() {
    this.plugin.settings = JSON.parse(JSON.stringify(DEFAULT_SETTINGS));
    this.plugin.saveSettings().then(() => {
      new import_obsidian.Notice("Settings have been reset to defaults.");
      this.display();
    });
  }
  addStandaloneRegexUI(pair) {
    const row = this.keyValueContainer.createEl("div", { cls: "flex-row standalone-regex-row" });
    row.style.display = "flex";
    row.style.alignItems = "center";
    const dragHandle = row.createEl("span", { className: "drag-handle", text: "\u2630" });
    const activeCheckbox = row.createEl("input", { type: "checkbox", className: "active-checkbox" });
    activeCheckbox.checked = pair.isActive;
    const keyInput = row.createEl("input", {
      type: "text",
      className: "key-input-flex",
      value: pair.key,
      placeholder: "Description-Key"
    });
    const valueInput = row.createEl("input", {
      type: "text",
      className: "value-input-flex",
      value: pair.regex,
      placeholder: "Regexp"
    });
    valueInput.style.flexGrow = "1";
    const deleteButton = row.createEl("button", { text: "Delete", className: "delete-button" });
    deleteButton.addEventListener("click", () => {
      row.remove();
      this.updateRegexOrderFromDOM();
      this.plugin.saveSettings();
    });
    const inputsContainer = row.createDiv({ cls: "inputs-container" });
    inputsContainer.append(keyInput, valueInput, deleteButton);
    inputsContainer.style.flexGrow = "1";
    inputsContainer.style.display = "flex";
    inputsContainer.style.justifyContent = "space-between";
    inputsContainer.style.alignItems = "center";
    if (dragHandle)
      this.makeDraggable(row, dragHandle);
  }
};
var RelaxPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this._settingTabReference = new RelaxSettingTab(this.app, this);
    this.addSettingTab(this._settingTabReference);
    this.addCommand({ id: "relax", name: "R.E.L.A.X.", callback: () => this.addBrackets() });
    this.addCommand({
      id: "relax-add-to-blacklist",
      name: "RELAX: Add to blacklist",
      callback: () => this.addToBlacklist()
    });
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        menu.addItem((item) => {
          item.setTitle("R.E.L.A.X.").setIcon("curly-braces").onClick(async () => {
            this.addBrackets();
          });
        });
      })
    );
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor, view) => {
        menu.addItem((item) => {
          item.setTitle("R.E.L.A.X.").setIcon("curly-braces").onClick(async () => {
            this.addBrackets();
          });
        });
      })
    );
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor, view) => {
        menu.addItem((item) => {
          item.setTitle("RELAX: Remove all brackets").setIcon("curly-braces").onClick(async () => {
            this.removeBrackets();
          });
        });
      })
    );
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu, file) => {
        menu.addItem((item) => {
          item.setTitle("RELAX: blacklist selected links").setIcon("curly-braces").onClick(async () => {
            this.addToBlacklist();
          });
        });
      })
    );
    this.registerEvent(this.app.workspace.on("settings:opened", () => {
      if (this._settingTabReference) {
        this._settingTabReference.setHighlighted(false);
      }
    }));
  }
  async resetToDefaults() {
    this.settings = JSON.parse(JSON.stringify(DEFAULT_SETTINGS));
    await this.saveSettings();
    new import_obsidian.Notice("Settings have been reset to defaults.");
  }
  async loadSettings() {
    try {
      const loadedSettings = await this.loadData();
      if (loadedSettings) {
        this.settings = Object.assign({}, DEFAULT_SETTINGS, loadedSettings);
      } else {
        throw new Error("No settings loaded");
      }
    } catch (e) {
      console.error("Error loading settings:", e);
      await this.resetToDefaults();
    }
  }
  onunload() {
  }
  async saveSettings() {
    await this.saveData(this.settings);
    new import_obsidian.Notice("Config saved!");
  }
  removeBracketsInSelection(content) {
    return content.replace(/([^!])\[\[([^\]]+)\]\]/g, "$1$2");
  }
  async addBracketsForFile(noteFilePath = "") {
    await this.processFileContent(noteFilePath, (content) => this.updateSelection(content, this.settings));
  }
  async removeBracketsinFile(noteFilePath = "") {
    await this.processFileContent(noteFilePath, this.removeBracketsInSelection);
  }
  async processFileContent(noteFilePath, contentProcessor, noteFile) {
    if (!noteFile && noteFilePath !== "") {
      noteFile = this.app.vault.getAbstractFileByPath(noteFilePath);
      if (!noteFile) {
        new import_obsidian.Notice(`No file found at the given path: ${noteFilePath}`);
        return;
      }
    } else if (!noteFile) {
      const leaf = this.app.workspace.activeLeaf || this.app.workspace.getLeaf();
      noteFile = leaf.view instanceof import_obsidian.MarkdownView ? leaf.view.file : null;
      if (!noteFile) {
        new import_obsidian.Notice("No file selected. Please select a markdown file from the editor or navigation bar.");
        return;
      }
    }
    if (!(noteFile instanceof import_obsidian.TFile)) {
      new import_obsidian.Notice("Selected item is not a valid text file.");
      return;
    }
    let fileContent = await this.app.vault.read(noteFile);
    const updatedContent = contentProcessor(fileContent);
    await this.app.vault.modify(noteFile, updatedContent);
  }
  renderBlacklistUI(containerEl) {
    const blacklistSection = containerEl.createEl("div");
    blacklistSection.createEl("h3", { text: "Blacklist" });
    const listContainer = blacklistSection.createEl("div");
    this.plugin.settings.blacklist.forEach((item, index) => {
      const itemEl = listContainer.createEl("div");
      itemEl.createEl("span", { text: item });
      const removeButton = itemEl.createEl("button", { text: "Remove" });
      removeButton.onclick = () => {
        this.plugin.settings.blacklist.splice(index, 1);
        this.plugin.saveSettings().then(() => this.display());
      };
    });
    const addItemInput = blacklistSection.createEl("input", { type: "text" });
    const addItemButton = blacklistSection.createEl("button", { text: "Add" });
    addItemButton.onclick = () => {
      if (addItemInput.value) {
        this.plugin.settings.blacklist.push(addItemInput.value);
        this.plugin.saveSettings().then(() => this.display());
      }
    };
  }
  updateSelection(content, settings) {
    const urlRegex = /(https?:\/\/[^\s]+)/g;
    const excludedExtensions = /\.(exe|lnk|xls|md|sh|elf|bin|tmp|doc|odt|docx|pdf|yara|dll|txt)$/;
    const fangMap = {
      "[.]": ".",
      "[:]": ":"
    };
    if (settings.defangURLs) {
      content = content.replace(/\[\.\]|\[\:\]/g, (char) => fangMap[char]);
    }
    let updatedText = "";
    const lines = content.split("\n");
    let inCodeBlock = false;
    function containsValidLink(line, match) {
      const linkRegex = /\[\[.*?\]\]/g;
      let result;
      while ((result = linkRegex.exec(line)) !== null) {
        if (result.index <= line.indexOf(match) && linkRegex.lastIndex >= line.indexOf(match) + match.length) {
          return true;
        }
      }
      return false;
    }
    lines.forEach((line, index) => {
      if (settings.ignoreCodeBlocks && line.trim().startsWith("```")) {
        inCodeBlock = !inCodeBlock;
        updatedText += line + "\n";
        return;
      }
      if (inCodeBlock) {
        updatedText += line + "\n";
        return;
      }
      let modifiedLine = line;
      settings.regexGroups.forEach((group) => {
        if (!group.isActive)
          return;
        group.regexes.forEach(({ isActive, regex }) => {
          if (!isActive)
            return;
          const compiledRegex = new RegExp(regex, "g");
          modifiedLine = modifiedLine.replace(compiledRegex, (match, ...args) => {
            const groups = args.slice(0, -2).filter((g) => g !== void 0);
            const capturedValue = groups[0];
            if (settings.blacklist.includes(match)) {
              return match;
            }
            if (!capturedValue)
              return match;
            if (settings.ignoreLinks && containsValidLink(line, capturedValue)) {
              return match;
            }
            if (settings.ignoreURLs) {
              const urls = Array.from(line.matchAll(urlRegex), (m) => m[0]);
              let ignoreCurrentMatch = false;
              for (const url of urls) {
                if (!excludedExtensions.test(url) && url.includes(capturedValue)) {
                  ignoreCurrentMatch = true;
                  break;
                }
              }
              if (ignoreCurrentMatch) {
                return match;
              }
            }
            const offset = args[args.length - 2];
            const precedingChar = offset > 0 ? line[offset - 1] : null;
            const spaceIfBackslash = precedingChar === "\\" ? " " : "";
            return `${spaceIfBackslash}[[${match}]]`;
          });
        });
      });
      updatedText += modifiedLine + "\n";
    });
    return updatedText.trim();
  }
  async processMarkdownContent(action) {
    const activeLeaf = this.app.workspace.activeLeaf;
    if (!activeLeaf) {
      new import_obsidian.Notice("Please open a markdown file or select a folder");
      return;
    }
    const view = activeLeaf.view;
    if (!view) {
      new import_obsidian.Notice("Unknown item selected. Please select a markdown file or folder");
      return;
    }
    if (view instanceof import_obsidian.MarkdownView) {
      const selection = view.editor.getSelection();
      if (selection && selection.trim().length !== 0) {
        let updatedSelection;
        if (action === "removeBrackets") {
          updatedSelection = this.removeBracketsInSelection(selection);
          new import_obsidian.Notice("Removed brackets from selection!");
        } else {
          updatedSelection = this.updateSelection(selection, this.settings);
          new import_obsidian.Notice("Added brackets in selection!");
        }
        view.editor.replaceSelection(updatedSelection);
        new import_obsidian.Notice(action === "removeBrackets" ? "Removed brackets from selection!" : "Updated content in selection!");
      } else {
        if (action === "removeBrackets") {
          await this.removeBracketsinFile();
          new import_obsidian.Notice("Removed brackets from entire file!");
        } else {
          await this.addBracketsForFile();
          new import_obsidian.Notice("Added brackets on entire file!");
        }
      }
    }
  }
  async removeBrackets() {
    await this.processMarkdownContent("removeBrackets");
  }
  async addBrackets() {
    const activeLeaf = this.app.workspace.activeLeaf;
    if (!activeLeaf || !activeLeaf.view) {
      new import_obsidian.Notice("Please open a markdown file or select a folder");
      return;
    }
    if (activeLeaf.view instanceof import_obsidian.MarkdownView) {
      const editor = activeLeaf.view.editor;
      const selection = editor.getSelection();
      if (selection && selection.trim().length !== 0) {
        const updatedSelection = this.updateSelection(selection, this.settings);
        editor.replaceSelection(updatedSelection);
        new import_obsidian.Notice("Added brackets in selection!");
        return;
      } else {
        const filePath = activeLeaf.view.file.path;
        await this.addBracketsForFile(filePath);
        new import_obsidian.Notice("Updated entire file!");
        return;
      }
    }
    function isSelected(item) {
      return item.selfEl && item.selfEl.classList.contains("has-focus");
    }
    let selectedFileItem = null;
    for (const key in activeLeaf.view.fileItems) {
      if (Object.prototype.hasOwnProperty.call(activeLeaf.view.fileItems, key)) {
        const item = activeLeaf.view.fileItems[key];
        if (isSelected(item)) {
          selectedFileItem = item;
          break;
        }
      }
    }
    if (!selectedFileItem) {
      new import_obsidian.Notice("No markdown file or folder is currently selected. Please select one.");
      return;
    }
    if (selectedFileItem.collapsible) {
      const folderPath = selectedFileItem.file.path;
      await this.addBracketsForFolder(folderPath);
    } else {
      const filePath = selectedFileItem.file.path;
      await this.addBracketsForFile(filePath);
    }
  }
  async addBracketsForFolder(folderPath) {
    const files = this.app.vault.getMarkdownFiles().filter((file) => file.path.startsWith(folderPath));
    const totalFiles = files.length;
    let processedFiles = 0;
    const processingNotice = new import_obsidian.Notice(`Processing ${totalFiles} files...`, totalFiles * 1e3);
    const maxConcurrentTasks = 20;
    const taskQueue = [];
    const processFile = async (file) => {
      await this.addBracketsForFile(file.path);
      processedFiles++;
      processingNotice.setMessage(`Processing file ${processedFiles} of ${totalFiles}`);
      if (taskQueue.length > 0) {
        const nextTask = taskQueue.shift();
        await nextTask();
      }
    };
    const enqueueTask = (file) => {
      if (taskQueue.length < maxConcurrentTasks) {
        taskQueue.push(() => processFile(file));
      } else {
        processFile(file);
      }
    };
    files.forEach((file) => enqueueTask(file));
    while (taskQueue.length > 0) {
      const nextTask = taskQueue.shift();
      await nextTask();
    }
    processingNotice.hide();
    new import_obsidian.Notice(`All ${totalFiles} files in the folder processed.`);
  }
  async addToBlacklist() {
    const activeLeaf = this.app.workspace.activeLeaf;
    if (!activeLeaf || !activeLeaf.view) {
      new import_obsidian.Notice("Please open a markdown file or select a folder");
      return;
    }
    if (activeLeaf.view instanceof import_obsidian.MarkdownView) {
      const editor = activeLeaf.view.editor;
      const selection = editor.getSelection();
      if (selection && selection.trim().length !== 0) {
        const links = selection.match(/\[\[([^\]]+)\]\]/g);
        if (links) {
          links.forEach((link) => {
            const text = link.replace(/\[\[|\]\]/g, "");
            if (!this.settings.blacklist.includes(text)) {
              this.settings.blacklist.push(text);
            }
          });
          await this.saveSettings();
          new import_obsidian.Notice("Added to blacklist!");
          return;
        }
      }
    }
    new import_obsidian.Notice("No valid selection found. Please select a valid link.");
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHtBcHAsIE1hcmtkb3duVmlldywgTm90aWNlLCBQbHVnaW4sIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcsIFRGaWxlfSBmcm9tICdvYnNpZGlhbic7XHJcblxyXG5pbnRlcmZhY2UgUmVnZXhHcm91cCB7XHJcblx0aXNBY3RpdmU6IGJvb2xlYW47XHJcblx0Z3JvdXBOYW1lOiBzdHJpbmc7XHJcblx0cmVnZXhlczogQXJyYXk8eyBpc0FjdGl2ZTogYm9vbGVhbiwga2V5OiBzdHJpbmcsIHJlZ2V4OiBzdHJpbmcgfT47XHJcblx0aXNDb2xsYXBzZWQ/OiBib29sZWFuO1xyXG59XHJcbmludGVyZmFjZSBSZWxheFBsdWdpblNldHRpbmdzIHtcclxuXHRyZWdleEdyb3VwczogQXJyYXk8UmVnZXhHcm91cD47XHJcblx0cmVnZXhQYWlyczogQXJyYXk8eyBpc0FjdGl2ZTogYm9vbGVhbiwga2V5OiBzdHJpbmcsIHJlZ2V4OiBzdHJpbmcgfT47XHJcblx0aWdub3JlTGlua3M/OiBib29sZWFuO1xyXG5cdGlnbm9yZVVSTHM/OiBib29sZWFuO1xyXG5cdGRlZmFuZ1VSTHM/OiBib29sZWFuO1xyXG5cdGlnbm9yZUNvZGVCbG9ja3M/OiBib29sZWFuO1xyXG5cdGJsYWNrbGlzdDogc3RyaW5nW107XHJcbn1cclxuXHJcbnZhciBERUZBVUxUX1NFVFRJTkdTID0ge1xyXG5cdHJlZ2V4UGFpcnM6IFtdLFxyXG5cdHJlZ2V4R3JvdXBzOiBbXHJcblx0XHR7XHJcblx0XHRcdGlzQWN0aXZlOiB0cnVlLFxyXG5cdFx0XHRncm91cE5hbWU6IFwiRGVmYXVsdCBSZWdFeFwiLFxyXG5cdFx0XHRyZWdleGVzOiBbXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJlTWFpbFwiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIihbQS1aYS16MC05Ll8lKy1dK0BbQS1aYS16MC05Li1dK1xcXFwuW0EtWnxhLXpdezIsfSlcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJEb21haW5zXCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiXFxcXGIoW2EtekEtWjAtOVxcXFwtXFxcXC5dK1xcXFwuKD86Y29tfG9yZ3xuZXR8bWlsfGVkdXxDT018T1JHfE5FVHxNSUx8RURVKSlcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJJUHY0XCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiXFxcXGIoKD86KD86KD8hMT8yPzdcXFxcLjBcXFxcLjBcXFxcLjEpKD86MjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KVxcXFwuKXszfSg/OjI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPykpKVxcXFxiXCJcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFwiaXNBY3RpdmVcIjogdHJ1ZSxcclxuXHRcdFx0XHRcdFwia2V5XCI6IFwiR1VJRFwiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIihbQS1GYS1mMC05XXs4fS1bQS1GYS1mMC05XXs0fS1bQS1GYS1mMC05XXs0fS1bQS1GYS1mMC05XXs0fS1bQS1GYS1mMC05XXsxMn0pXCJcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFwiaXNBY3RpdmVcIjogdHJ1ZSxcclxuXHRcdFx0XHRcdFwia2V5XCI6IFwiU0hBMjU2XCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiXFxcXGIoW2EtZkEtRjAtOV17NjR9KVxcXFxiXCJcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFwiaXNBY3RpdmVcIjogdHJ1ZSxcclxuXHRcdFx0XHRcdFwia2V5XCI6IFwiSkFSTVwiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIlxcXFxiKFthLWZBLUYwLTldezYyfSlcXFxcYlwiXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcImlzQWN0aXZlXCI6IHRydWUsXHJcblx0XHRcdFx0XHRcImtleVwiOiBcIlNIQTFcIixcclxuXHRcdFx0XHRcdFwicmVnZXhcIjogXCJcXFxcYihbYS1mQS1GMC05XXs0MH0pXFxcXGJcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJNRDVcIixcclxuXHRcdFx0XHRcdFwicmVnZXhcIjogXCJcXFxcYihbYS1mQS1GMC05XXszMn0pXFxcXGJcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJCaXRjb2luXCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiXFxcXGIoWzEzXXsxfVthLWttLXpBLUhKLU5QLVoxLTldezI2LDMzfXxiYzFbYS16MC05XXszOSw1OX0pXFxcXGJcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJEYXRlXCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiKCg/OjBbMS05XXxbMTJdWzAtOV18M1swMV0pW1xcXFxcXFxcXFxcXC9cXFxcLi1dKD86MFsxLTldfDFbMDEyXSlbXFxcXFxcXFxcXFxcL1xcXFwuLV0oPzoxOXwyMHwpXFxcXGRcXFxcZClcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJXaW5kb3dzIFVzZXJuYW1lc1wiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIlxcXFxcXFxcVXNlcnNcXFxcXFxcXCsoPyEoPzpQdWJsaWN8QWRtaW5pc3RyYXRvcilcXFxcXFxcXCkoW15cXFxcXFxcXF0rKVxcXFxcXFxcXCJcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFwiaXNBY3RpdmVcIjogdHJ1ZSxcclxuXHRcdFx0XHRcdFwia2V5XCI6IFwiTWFya2Rvd24gXFx4QjRcIixcclxuXHRcdFx0XHRcdFwicmVnZXhcIjogXCIoPzpbXFx4QjRdKCgoPzooPyE8YnI+fFxcXFxyfFxcXFxuKVteXFx4QjQgXSl7NCwzMH0pKVtcXHhCNF0pXCJcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFwiaXNBY3RpdmVcIjogdHJ1ZSxcclxuXHRcdFx0XHRcdFwia2V5XCI6IFwiTWFya2Rvd24gJ1wiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIig/OlsnXSgoKD86KD8hPGJyPnxcXFxccnxcXFxcbilbXicgXSl7NCwzMH0pKVsnXSlcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJDVkVzXCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiKENWRS0oMTk5OXwyXFxcXGR7M30pLSg/ITB7NH0pKDBcXFxcZHsyfVswLTldfFsxLTldXFxcXGR7Myx9KSlcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJNQUMgQWRkcmVzc1wiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIihbMC05QS1GYS1mXXsyfVs6LV0pezV9KFswLTlBLUZhLWZdezJ9KVwiXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcImlzQWN0aXZlXCI6IHRydWUsXHJcblx0XHRcdFx0XHRcImtleVwiOiBcIlRvciBPbmlvbiBBZGRyZXNzXCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiXFxcXGIoKD86aHR0cHM/OlxcXFwvXFxcXC8pPyg/Ond3dyk/KFxcXFxTKj9cXFxcLm9uaW9uKVxcXFxiKVwiXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcImlzQWN0aXZlXCI6IHRydWUsXHJcblx0XHRcdFx0XHRcImtleVwiOiBcIklQdjYgQWRkcmVzc1wiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIigoPzpbMC05YS1mQS1GXXsxLDR9Oil7Nyw3fVswLTlhLWZBLUZdezEsNH18KD86WzAtOWEtZkEtRl17MSw0fTopezEsN306fCg/OlswLTlhLWZBLUZdezEsNH06KXsxLDZ9OlswLTlhLWZBLUZdezEsNH18KD86WzAtOWEtZkEtRl17MSw0fTopezEsNX0oPzo6WzAtOWEtZkEtRl17MSw0fSl7MSwyfXwoPzpbMC05YS1mQS1GXXsxLDR9Oil7MSw0fSg/OjpbMC05YS1mQS1GXXsxLDR9KXsxLDN9fCg/OlswLTlhLWZBLUZdezEsNH06KXsxLDN9KD86OlswLTlhLWZBLUZdezEsNH0pezEsNH18KD86WzAtOWEtZkEtRl17MSw0fTopezEsMn0oPzo6WzAtOWEtZkEtRl17MSw0fSl7MSw1fXxbMC05YS1mQS1GXXsxLDR9Oig/Oig/OjpbMC05YS1mQS1GXXsxLDR9KXsxLDZ9KXw6KD86KD86OlswLTlhLWZBLUZdezEsNH0pezEsN318Oil8ZmU4MDooPzo6WzAtOWEtZkEtRl17MCw0fSl7MCw0fSVbMC05YS16QS1aXXsxLH18OjooPzpmZmZmKD86OjB7MSw0fSl7MCwxfTopezAsMX0oPzooPzoyNVswLTVdfCg/OjJbMC00XXwxezAsMX1bMC05XSl7MCwxfVswLTldKVxcXFwuKXszLDN9KD86MjVbMC01XXwoPzoyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSl8KD86WzAtOWEtZkEtRl17MSw0fTopezEsNH06KD86KD86MjVbMC01XXwoPzoyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSlcXFxcLil7MywzfSg/OjI1WzAtNV18KD86MlswLTRdfDF7MCwxfVswLTldKXswLDF9WzAtOV0pKVwiXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcImlzQWN0aXZlXCI6IHRydWUsXHJcblx0XHRcdFx0XHRcImtleVwiOiBcIlNTRGVlcFwiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIihcXFxcZCs6W2EteisvQS1aMC05XSs6W2EteisvQS1aMC05XSssXFxcXFxcXCJbXlxcXFxcXFwiXStcXFxcXFxcIilcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJWVCBzdWJpdHRlclwiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIihbMC05YS1mXXs4fSAtICg/OmFwaXx3ZWIpKVwiXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcImlzQWN0aXZlXCI6IHRydWUsXHJcblx0XHRcdFx0XHRcImtleVwiOiBcIk1BQyBBZHJlc3Nlc1wiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIigoPzpbMC05QS1GYS1mXXsyfVs6LV0pezV9KD86WzAtOUEtRmEtZl17Mn0pKVwiXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcImlzQWN0aXZlXCI6IHRydWUsXHJcblx0XHRcdFx0XHRcImtleVwiOiBcIlBhc3Nwb3J0XCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiKFtBLVBSLVdZXVsxLTldXFxcXGRcXFxccz9cXFxcZHs0fVsxLTldKVwiXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcImlzQWN0aXZlXCI6IHRydWUsXHJcblx0XHRcdFx0XHRcImtleVwiOiBcIk1hcmtkb3duIFxcdTIwMThcIixcclxuXHRcdFx0XHRcdFwicmVnZXhcIjogXCIoPzpbXFx1MjAxOF0oKCg/Oig/ITxicj58XFxcXHJ8XFxcXG4pW15cXHUyMDE4IF0pezQsMzB9KSlbXFx1MjAxOF0pXCJcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFwiaXNBY3RpdmVcIjogdHJ1ZSxcclxuXHRcdFx0XHRcdFwia2V5XCI6IFwiTWFya2Rvd24gXFx1MjAxOVwiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIig/OltcXHUyMDE5XSgoKD86KD8hPGJyPnxcXFxccnxcXFxcbilbXlxcdTIwMTkgXSl7NCwzMH0pKVtcXHUyMDE5XSlcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogJ01hcmtkb3duIFwiJyxcclxuXHRcdFx0XHRcdFwicmVnZXhcIjogJyg/OltcIlxcdTIwMUVcXHUyMDMzXFx1MjAxRF0oKCg/Oig/ITxicj58XFxcXHJ8XFxcXG4pW15cIlxcdTIwMzNcXHUyMDFEIF0pezQsMzB9KSlbXCJcXHUyMDMzXFx1MjAxRF0pJ1xyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJNYXJrZG93biBfXCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiKD86W19dKCgoPzooPyE8YnI+fFxcXFxyfFxcXFxuKVteXyBdKXs0LDMwfSkpW19dKVwiXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcImlzQWN0aXZlXCI6IHRydWUsXHJcblx0XHRcdFx0XHRcImtleVwiOiBcIk1hcmtkb3duIFxcdTIwMThcXHUyMDE5XCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiKD86W1xcdTIwMThdKCgoPzooPyE8YnI+fFxcXFxyfFxcXFxuKVteXFx1MjAxOSBdKXs0LDMwfSkpW1xcdTIwMTldKVwiXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcImlzQWN0aXZlXCI6IHRydWUsXHJcblx0XHRcdFx0XHRcImtleVwiOiBcIlNpZ25hbCBGcmVxdWVuY2llc1wiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIihcXFxcYlswLTldezEsNH0oPzpcXFxcLlxcXFxkezEsNH0pP1xcXFxzPyhIenxrSHp8TUh6fEdIeilcXFxcYilcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJCaWJUZVggRW50cmllc1wiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIkAoYXJ0aWNsZXxib29rfGluYm9va3xjb25mZXJlbmNlfGlucHJvY2VlZGluZ3MpeyhbXn1dKyl9XCJcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFwiaXNBY3RpdmVcIjogdHJ1ZSxcclxuXHRcdFx0XHRcdFwia2V5XCI6IFwiR1BTIENvb3JkaW5hdGVzXCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiXFxcXGJbKy1dP1swLTldezEsMn1cXFxcLlswLTldKyxcXFxccypbKy1dP1swLTldezEsM31cXFxcLlswLTldK1xcXFxiXCJcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFwiaXNBY3RpdmVcIjogdHJ1ZSxcclxuXHRcdFx0XHRcdFwia2V5XCI6IFwiSVNCTiBOdW1iZXJzXCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiXFxcXGJJU0JOXFxcXHM/KD86LT8xM3wtMTApPzo/XFxcXHM/WzAtOS1dezEwLDE3fVxcXFxiXCJcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFwiaXNBY3RpdmVcIjogdHJ1ZSxcclxuXHRcdFx0XHRcdFwia2V5XCI6IFwiQ2FtZXJhIFNldHRpbmdzXCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiXFxcXGJJU09cXFxccz9bMC05XSt8Zi9bMC05Ll0rfDEvWzAtOV0rXFxcXHM/c2VjXFxcXGJcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJIaXN0b3JpY2FsIERhdGVzXCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiXFxcXGIoPzpbMC05XXsxLDR9IChBRHxCQyl8WzAtOV17MSw0fXRoIGNlbnR1cnkpXFxcXGJcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJQcm9jZXNzb3IgU3BlY3NcIixcclxuXHRcdFx0XHRcdFwicmVnZXhcIjogXCJcXFxcYkludGVsIENvcmUgaVszNTc5XS1bMC05XXs0fVtIUUdVXUs/fEFNRCBSeXplbiBbMzU3OV0gWzAtOV17NH1YP1xcXFxiXCJcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFwiaXNBY3RpdmVcIjogZmFsc2UsXHJcblx0XHRcdFx0XHRcImtleVwiOiBcIkJhc2U2NCBTdHJpbmdzXCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiKFtBLVphLXowLTkrL117NH0pKihbQS1aYS16MC05Ky9dezJ9PT18W0EtWmEtejAtOSsvXXszfT0pP1wiXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcImlzQWN0aXZlXCI6IGZhbHNlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJTY3JpcHQgTGFuZ3VhZ2UgRmlsZVwiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIihbXFxcXHddK1xcXFwuKD86cHl8anN8amF2YXxjc3xjcHB8cmJ8Z298cGhwKSlbXFxcXGJdXCJcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFwiaXNBY3RpdmVcIjogZmFsc2UsXHJcblx0XHRcdFx0XHRcImtleVwiOiBcIkNob3JkIFByb2dyZXNzaW9uc1wiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIlxcXFxiKCg/OkN8RG18RW18RnxHfEFtfEJkaW0pKD86XFxcXHMtPlxcXFxzKD86Q3xEbXxFbXxGfEd8QW18QmRpbSkpKilcXFxcYlwiXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcImlzQWN0aXZlXCI6IGZhbHNlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJIZXggQ29sb3JzXCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiIyhbYS1mQS1GMC05XXs2fXxbYS1mQS1GMC05XXszfSlcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiBmYWxzZSxcclxuXHRcdFx0XHRcdFwia2V5XCI6IFwiQ2hlbWljYWwgRWxlbWVudHNcIixcclxuXHRcdFx0XHRcdFwicmVnZXhcIjogXCJcXFxcYig/Okh8SGV8TGl8QmV8QnxDfE58T3xGfE5lfE5hfE1nfEFsfFNpfFB8U3xDbHxBcnxLfENhKVxcXFxiXCJcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFwiaXNBY3RpdmVcIjogZmFsc2UsXHJcblx0XHRcdFx0XHRcImtleVwiOiBcIkhhc2h0YWdzXCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiI1tBLVphLXowLTlfXStcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiBmYWxzZSxcclxuXHRcdFx0XHRcdFwia2V5XCI6IFwiQWNhZGVtaWMgQ2l0YXRpb25zXCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiXFxcXGJcXFxcKFtBLVphLXpdKyxcXFxcc1swLTldezR9XFxcXClcXFxcYlwiXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcImlzQWN0aXZlXCI6IGZhbHNlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJUZW1wZXJhdHVyZSBSZWFkaW5nc1wiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIlxcXFxiLT9bMC05XStcXFxccz8oXFx4QjBDfFxceEIwRnxLKVxcXFxiXCJcclxuXHRcdFx0XHR9XHJcblx0XHRcdF1cclxuXHRcdH1cclxuXHRdLFxyXG5cdGlnbm9yZUxpbmtzOiB0cnVlLFxyXG5cdGlnbm9yZUNvZGVCbG9ja3M6IHRydWUsXHJcblx0ZGVmYW5nVVJMczogdHJ1ZSxcclxuXHRpZ25vcmVVUkxzOiBmYWxzZSxcclxuXHRibGFja2xpc3Q6IFtcclxuXHRcdFwiZ2l0aHViLmNvbVwiLFxyXG5cdFx0XCIxMjcuMC4wLjFcIixcclxuXHRcdFwibWljcm9zb2Z0LmNvbVwiLFxyXG5cdFx0XCJ3d3cueW91dHViZS5jb21cIixcclxuXHRcdFwieW91dHViZS5jb21cIixcclxuXHRcdFwid3d3Lm1pY3Jvc29mdC5jb21cIixcclxuXHRcdFwid3d3LmdpdGh1Yi5jb21cIixcclxuXHRcdFwibWVkaXVtLmNvbVwiLFxyXG5cdFx0XCJ3d3cubWVkaXVtLmNvbVwiLFxyXG5cdFx0XCJ3aGl0ZVwiLFxyXG5cdFx0XCJ3aW5kb3dzXCIsXHJcblx0XHRcImthc3BlcnNreS5jb21cIixcclxuXHRcdFwiZ21haWwuY29tXCIsXHJcblx0XHRcImRvbWFpbi5jb21cIixcclxuXHRcdFwid3d3LmZpcmVleWUuY29tXCIsXHJcblx0XHRcInJlc2VhcmNoY2VudGVyLnBhbG9hbHRvbmV0d29ya3MuY29tXCIsXHJcblx0XHRcInd3dy5zeW1hbnRlYy5jb21cIixcclxuXHRcdFwid3d3LnZpcnVzdG90YWwuY29tXCIsXHJcblx0XHRcInd3dy50cmVuZG1pY3JvLmNvbVwiLFxyXG5cdFx0XCJ2aXJ1c3RvdGFsLmNvbVwiLFxyXG5cdFx0XCJ3d3cuU29waG9zLmNvbVwiLFxyXG5cdFx0XCJ3d3cubWNhZmVlLmNvbVwiLFxyXG5cdFx0XCJcXFxcVXNlcnNcXFxcVXNlclxcXFxcIixcclxuXHRcdFwidHdpdHRlci5jb21cIixcclxuXHRcdFwibnl0aW1lcy5jb21cIixcclxuXHRcdFwiX1x1MDQxRFx1MDQxNVx1MDQxQ1x1MDQxNVx1MDQyNlx1MDQxQVx1MDQxOFx1MDQxNV9cIixcclxuXHRcdFwiY2VkNGRjNTQwMWY5ZGI0OTcwMDllM2JhYmVlOTFkMGIxZjUxZmZlNTE2YzFjZTRkNTk0NDQyZTVhMjNjYzliZlwiLFxyXG5cdFx0XCJ3d3cuRmlyZUV5ZS5jb21cIixcclxuXHRcdFwiZmlyZWV5ZS5jb21cIixcclxuXHRcdFwiaW5mb0BmaXJlZXllLmNvbVwiLFxyXG5cdFx0XCJiamd3cWwuY29tXCIsXHJcblx0XHRcImFsdW1uaS5lY251LmVkdVwiLFxyXG5cdFx0XCJkb3duLjUxY3RvLmNvbVwiLFxyXG5cdFx0XCJ3d3cuZGpiaC5uZXRcIixcclxuXHRcdFwiNDAyODg1Y2IzNWQxMWE1NDAxMzVkMTY4ZTQxZTAwMGNcIixcclxuXHRcdFwicmp6eWpzeHkuenppYS5lZHVcIixcclxuXHRcdFwiODAxZjgxY2YtOGYzMC00YWE0LTg0MjgtN2Y5ZDRlNzc4ZTc2XCIsXHJcblx0XHRcInd3dy55aW5namllc2hlbmcuY29tXCIsXHJcblx0XHRcInd3dy5yZWNvcmRlZGZ1dHVyZS5jb21cIixcclxuXHRcdFwiemhpZGFvLmJhaWR1LmNvbVwiLFxyXG5cdFx0XCJtYW5kaWFudC5jb21cIixcclxuXHRcdFwiaW5mb0BtYW5kaWFudC5jb21cIixcclxuXHRcdFwiMTI2LmNvbVwiLFxyXG5cdFx0XCIxNjMuY29tXCIsXHJcblx0XHRcImhvdG1haWwuY29tXCIsXHJcblx0XHRcInFxLmNvbVwiLFxyXG5cdFx0XCJzb2h1LmNvbVwiLFxyXG5cdFx0XCJ5YWhvby5jb21cIixcclxuXHRcdFwid3d3Lm1hbmRpYW50LmNvbVwiLFxyXG5cdFx0XCJGaXJlRXllLmNvbVwiLFxyXG5cdFx0XCJzZWN1cmV3b3Jrcy5jb21cIixcclxuXHRcdFwiYmxvZy50cmVuZG1pY3JvLmNvbVwiLFxyXG5cdFx0XCJ0cmVuZG1pY3JvLmNvbVwiLFxyXG5cdFx0XCJ3d3cuc2xpZGVzaGFyZS5uZXRcIixcclxuXHRcdFwid3d3LnB3Yy5jb21cIixcclxuXHRcdFwic2VjdXJlbGlzdC5jb21cIixcclxuXHRcdFwid3d3LmVzZXQuY29tXCIsXHJcblx0XHRcImFzZXJ0LmFyYm9ybmV0d29ya3MuY29tXCIsXHJcblx0XHRcInVuaXQ0Mi5wYWxvYWx0b25ldHdvcmtzLmNvbVwiLFxyXG5cdFx0XCJzZXJ0LmFyYm9ybmV0d29ya3MuY29tXCIsXHJcblx0XHRcImxvZy5hcG5pYy5uZXRcIixcclxuXHRcdFwid3d3Lm5ldHNjb3V0LmNvbVwiLFxyXG5cdFx0XCJyZXNlYXJjaC5uY2Nncm91cC5jb21cIixcclxuXHRcdFwiaW50ZWxsaWdlbmNlQGthc3BlcnNreS5jb21cIixcclxuXHRcdFwidXBkYXRlLmlhYWNzdHVkaW8uY29tXCIsXHJcblx0XHRcImJsZWVwaW5nY29tcHV0ZXIuY29tXCIsXHJcblx0XHRcImNhbXB1c2NvZGlAeG1wcC5pc1wiLFxyXG5cdFx0XCI6OlwiLFxyXG5cdFx0XCJfTE9DQUxfXCIsXHJcblx0XHRcIl9DVVJSRU5UX1wiLFxyXG5cdFx0XCJpbnRlbHJlcG9ydHNAa2FzcGVyc2t5LmNvbVwiLFxyXG5cdFx0XCJ3d3cud2VsaXZlc2VjdXJpdHkuY29tXCIsXHJcblx0XHRcImF0dGFjay5taXRyZS5vcmdcIixcclxuXHRcdFwid3d3LmNsZWFyc2t5c2VjLmNvbVwiLFxyXG5cdFx0XCJibG9nLnRhbG9zaW50ZWxsaWdlbmNlLmNvbVwiLFxyXG5cdFx0XCI1ZDYzMWQ3NzQwMTYxNWQ1M2YzY2UzZGJjMmJmZWU1ZDkzNDYwMmRjMzVkNDg4YWE3Y2ViZjliM2ZmMWM0ODE2XCIsXHJcblx0XHRcIml0c2VjLmVpY3AubmV0XCIsXHJcblx0XHRcInBhc3RlYmluLmNvbVwiLFxyXG5cdFx0XCJyZXNlYXJjaC5jaGVja3BvaW50LmNvbVwiLFxyXG5cdFx0XCJ3d3cucHJvb2Zwb2ludC5jb21cIixcclxuXHRcdFwiZW4ud2lraXBlZGlhLm9yZ1wiLFxyXG5cdFx0XCI6OkNcIixcclxuXHRcdFwiZG9jcy5taWNyb3NvZnQuY29tXCIsXHJcblx0XHRcInd3dy5ibGVlcGluZ2NvbXB1dGVyLmNvbVwiLFxyXG5cdFx0XCJfcHJvY2Vzc19cIixcclxuXHRcdFwiYmxvZy5tYWx3YXJlYnl0ZXMuY29tXCIsXHJcblx0XHRcImU6OlwiLFxyXG5cdFx0XCJfZmlsZV9cIixcclxuXHRcdFwiMC4wLjAuMFwiLFxyXG5cdFx0XCI6OkZcIixcclxuXHRcdFwiaW5mb0BjbGVhcnNreXNlYy5jb21cIixcclxuXHRcdFwibXAud2VpeGluLnFxLmNvbVwiLFxyXG5cdFx0XCJ3d3cuY3Jvd2RzdHJpa2UuY29tXCIsXHJcblx0XHRcIl9FWEVDVVRFX1wiLFxyXG5cdFx0XCInUHVibGljJ1wiLFxyXG5cdFx0XCJ0aS5xaWFueGluLmNvbVwiLFxyXG5cdFx0XCJfc3RyaW5nX1wiLFxyXG5cdFx0XCJnb29nbGUuY29tXCIsXHJcblx0XHRcIl9tZXRlb3JfXCIsXHJcblx0XHRcIl9uYW1lX1wiLFxyXG5cdFx0XCJkOjpcIixcclxuXHRcdFwib25saW5lbmljLWVuZHVzZXJAb25saW5lbmljLmNvbVwiLFxyXG5cdFx0XCJ3ZWxpdmVzZWN1cml0eS5jb21cIixcclxuXHRcdFwid3d3Lmdvb2dsZS5jb21cIixcclxuXHRcdFwid3d3LmN5YmVyZWFzb24uY29tXCIsXHJcblx0XHRcImljYW5uLm9yZ1wiLFxyXG5cdFx0XCJfY29udGVudF9cIixcclxuXHRcdFwiXFxcXFVzZXJzXFxcXHVzZXJcXFxcXCIsXHJcblx0XHRcInd3dy5mYWNlYm9vay5jb21cIixcclxuXHRcdFwiXFxcIm5hbWVcXFwiXCIsXHJcblx0XHRcInNlY3VyaXR5aW50ZWxsaWdlbmNlLmNvbVwiLFxyXG5cdFx0XCJ3d3cuc2VjdXJld29ya3MuY29tXCIsXHJcblx0XHRcIl9kYXRhX1wiLFxyXG5cdFx0XCJuZXdzLnNvcGhvcy5jb21cIixcclxuXHRcdFwiTWljcm9zb2Z0Lk5FVFwiLFxyXG5cdFx0XCJ3d3cudGhyZWF0Z2Vlay5jb21cIixcclxuXHRcdFwid3d3LnpkbmV0LmNvbVwiLFxyXG5cdFx0XCJyYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tXCIsXHJcblx0XHRcInd3dy5maWRlbGlzc2VjdXJpdHkuY29tXCIsXHJcblx0XHRcInRpLjM2MC5uZXRcIixcclxuXHRcdFwiYmxvZ3MuYmxhY2tiZXJyeS5jb21cIixcclxuXHRcdFwiXFxcIlBPU1RcXFwiXCIsXHJcblx0XHRcIl9GSUxFX1wiLFxyXG5cdFx0XCJjZG4uZGlzY29yZGFwcC5jb21cIixcclxuXHRcdFwicGljLnR3aXR0ZXIuY29tXCIsXHJcblx0XHRcIm1zZG4ubWljcm9zb2Z0LmNvbVwiLFxyXG5cdFx0XCI6OmNcIixcclxuXHRcdFwia3JlYnNvbnNlY3VyaXR5LmNvbVwiLFxyXG5cdFx0XCJzeW1hbnRlYy1lbnRlcnByaXNlLWJsb2dzLnNlY3VyaXR5LmNvbVwiLFxyXG5cdFx0XCJfZHJvcHBlcl9cIixcclxuXHRcdFwid3d3LnJldXRlcnMuY29tXCIsXHJcblx0XHRcIkJsZWVwaW5nQ29tcHV0ZXIuY29tXCIsXHJcblx0XHRcInNvZnRAaG90bWFpbC5jb21cIixcclxuXHRcdFwiQVNQLk5FVFwiLFxyXG5cdFx0XCI4LjguOC44XCIsXHJcblx0XHRcIl9EQVRBX1wiLFxyXG5cdFx0XCJ3d3cud2lyZWQuY29tXCIsXHJcblx0XHRcInByb29mcG9pbnQuY29tXCIsXHJcblx0XHRcIlxcXCJNYW5kaWFudFxcXCJcIixcclxuXHRcdFwiXFxcXFVzZXJzXFxcXGFkbWluXFxcXFwiLFxyXG5cdFx0XCJfVHJvamFuX1wiLFxyXG5cdFx0XCJyZWV5ZS5jb21cIixcclxuXHRcdFwiXFxcInZhbHVlXFxcIlwiLFxyXG5cdFx0XCJ0aGVkZmlycmVwb3J0LmNvbVwiLFxyXG5cdFx0XCJ0aHJlYXRwb3N0LmNvbVwiLFxyXG5cdFx0XCInXFxcInswfVxcXCInXCIsXHJcblx0XHRcImluZm9AbGlmYXJzLmNvbVwiLFxyXG5cdFx0XCJMSUZBUlMuY29tXCIsXHJcblx0XHRcIl9mcm9tX1wiLFxyXG5cdFx0XCJhdS5jb21cIixcclxuXHRcdFwiaXNjLnNhbnMuZWR1XCIsXHJcblx0XHRcInByb3Rvbm1haWwuY29tXCIsXHJcblx0XHRcImFzZWMuYWhubGFiLmNvbVwiLFxyXG5cdFx0XCInJVdJTkRJUiVcXFxcc3lzd293NjRcXFxcbmV0LmV4ZSdcIixcclxuXHRcdFwid3d3LnRocmVhdGNvbm5lY3QuY29tXCIsXHJcblx0XHRcInd3dy5kcm9wYm94LmNvbVwiLFxyXG5cdFx0XCJcXFwidHJ1ZVxcXCJcIixcclxuXHRcdFwid3d3Lm55dGltZXMuY29tXCIsXHJcblx0XHRcImNyb3dkc3RyaWtlLmNvbVwiLFxyXG5cdFx0XCJkcml2ZS5nb29nbGUuY29tXCIsXHJcblx0XHRcIlxcXCJ3aGl0ZVxcXCJcIixcclxuXHRcdFwiMTcyLjE2LjI1My4xMzBcIixcclxuXHRcdFwiXFxcIldTY3JpcHQuU2hlbGxcXFwiXCIsXHJcblx0XHRcInd3dy5hcmJvcm5ldHdvcmtzLmNvbVwiLFxyXG5cdFx0XCJKaW5EaVFJQU9AaG90bWFpbC5jb21cIixcclxuXHRcdFwiZG9jcy5nb29nbGUuY29tXCIsXHJcblx0XHRcIl9ET01BSU5fXCIsXHJcblx0XHRcInd3dy52aXJ1c2J1bGxldGluLmNvbVwiLFxyXG5cdFx0XCJfY3JlYXRpb24vd2luX1wiLFxyXG5cdFx0XCJ3aG9pcy5hcmluLm5ldFwiLFxyXG5cdFx0XCJfQmFja2Rvb3JfXCIsXHJcblx0XHRcImNpdGl6ZW5sYWIub3JnXCIsXHJcblx0XHRcInd3dy5mb3J0aW5ldC5jb21cIixcclxuXHRcdFwiU25vcnQub3JnXCIsXHJcblx0XHRcIjo6QVwiLFxyXG5cdFx0XCJ3ZWIuYXJjaGl2ZS5vcmdcIixcclxuXHRcdFwiX3NhbXBsZV9cIixcclxuXHRcdFwiX3Byb2NfXCIsXHJcblx0XHRcIl9oYXNoX1wiLFxyXG5cdFx0XCJmb3J0aW5ldC5jb21cIixcclxuXHRcdFwid3d3LnJlYWRhYmlsaXR5LmNvbVwiLFxyXG5cdFx0XCJkb2kub3JnXCIsXHJcblx0XHRcIjE5Mi4xNjguMS4xXCIsXHJcblx0XHRcIl9kZWNyeXB0X1wiLFxyXG5cdFx0XCJibG9nLnlvcm9pLmNvbVwiLFxyXG5cdFx0XCJcXFwiZGF0YVxcXCJcIixcclxuXHRcdFwiRi1TZWN1cmUuY29tXCIsXHJcblx0XHRcIlxcXCJpbmZvcm1hdGlvbmFsXFxcIlwiLFxyXG5cdFx0XCI1LjE4Mi4yMTEuNVwiLFxyXG5cdFx0XCJ3d3cuZ3JvdXAtaWIuY29tXCIsXHJcblx0XHRcImdjYXQuZ29vZ2xlLmNvbVwiLFxyXG5cdFx0XCJ3d3cubGlua2VkaW4uY29tXCIsXHJcblx0XHRcImNvbnRhY3RAaWRjcHJpdmFjeS5jb21cIixcclxuXHRcdFwiX0NPTU1PTl9cIixcclxuXHRcdFwiXFxcInR5cGVcXFwiXCIsXHJcblx0XHRcIl9jbGllbnRfXCIsXHJcblx0XHRcIlxcXCImYnMmXFxcIlwiLFxyXG5cdFx0XCJ0aHJlYXRpbnRlbEBlc2V0LmNvbVwiLFxyXG5cdFx0XCJibG9nLm5ldGxhYi4zNjAuY29tXCIsXHJcblx0XHRcIlxcXFxVc2Vyc1xcXFw8dXNlcj5cXFxcXCIsXHJcblx0XHRcIl9wYXJ0X1wiLFxyXG5cdFx0XCJwYW5kYXNlY3VyaXR5LmNvbVwiLFxyXG5cdFx0XCJ0ZWNobmV0Lm1pY3Jvc29mdC5jb21cIixcclxuXHRcdFwiXFxcXFVzZXJzXFxcXHVzZXJuYW1lXFxcXFwiLFxyXG5cdFx0XCJ3d3cubW9ycGhpc2VjLmNvbVwiLFxyXG5cdFx0XCInXFxcXHgwMCdcIixcclxuXHRcdFwiYXZzdm1jbG91ZC5jb21cIixcclxuXHRcdFwiMS4wLjAuMFwiLFxyXG5cdFx0XCJfUFJPQ0VTU19cIixcclxuXHRcdFwiX0FUVFJJQlVURV9cIixcclxuXHRcdFwid3d3LmJiYy5jb21cIixcclxuXHRcdFwid3d3LnZvbGV4aXR5LmNvbVwiLFxyXG5cdFx0XCI6OmNiXCIsXHJcblx0XHRcInNlY3VyaW5ndG9tb3Jyb3cubWNhZmVlLmNvbVwiLFxyXG5cdFx0XCJ3d3cudzMub3JnXCIsXHJcblx0XHRcIndpdGhoZWxkZm9ycHJpdmFjeS5jb21cIixcclxuXHRcdFwid3d3LnB0c2VjdXJpdHkuY29tXCIsXHJcblx0XHRcIl9GTEFHX1wiLFxyXG5cdFx0XCJfcmVhZF9cIixcclxuXHRcdFwidGFsb3NpbnRlbGxpZ2VuY2UuY29tXCIsXHJcblx0XHRcIl93cml0ZV9cIixcclxuXHRcdFwiXFxcXFVzZXJzXFxcXDx1c2VybmFtZT5cXFxcXCIsXHJcblx0XHRcIl9lbnRyeV9cIixcclxuXHRcdFwiX3ZhbHVlX1wiLFxyXG5cdFx0XCIxOTIuMTY4LjEuOFwiLFxyXG5cdFx0XCJfVFlQRV9cIixcclxuXHRcdFwiX3VzZXJfXCIsXHJcblx0XHRcImE6OlwiLFxyXG5cdFx0XCJmYWNlYm9vay5jb21cIixcclxuXHRcdFwiXFxcImZhbHNlXFxcIlwiLFxyXG5cdFx0XCJcXFwiY21kLmV4ZVxcXCJcIixcclxuXHRcdFwiX2NvbmZpZ19cIixcclxuXHRcdFwiMS4xLjEuMVwiLFxyXG5cdFx0XCJfaW5pdF9cIixcclxuXHRcdFwiX0NMQVNTRVNfXCIsXHJcblx0XHRcInd3dy5mLXNlY3VyZS5jb21cIixcclxuXHRcdFwid3d3Lndhc2hpbmd0b25wb3N0LmNvbVwiLFxyXG5cdFx0XCJjbGVhcnNreXNlYy5jb21cIixcclxuXHRcdFwiaW5mb0BjeWJlcmtvdi5jb21cIixcclxuXHRcdFwiX21vZHVsZV9cIixcclxuXHRcdFwiX29iamVjdF9cIixcclxuXHRcdFwienNjYWxlci5jb21cIixcclxuXHRcdFwid3d3LmFwcGxlLmNvbVwiLFxyXG5cdFx0XCI6OkVcIixcclxuXHRcdFwiYXBpLnRlbGVncmFtLm9yZ1wiLFxyXG5cdFx0XCJcXFwiMTAxMzU1MzZcXFwiXCIsXHJcblx0XHRcInd3dy5jeWJlcmtvdi5jb21cIixcclxuXHRcdFwiYmxvZ3MubWljcm9zb2Z0LmNvbVwiLFxyXG5cdFx0XCJjeWJlcnNlY3VyaXR5LmF0dC5jb21cIixcclxuXHRcdFwid3d3LmNpc2NvLmNvbVwiLFxyXG5cdFx0XCJhcGkuaXBpZnkub3JnXCIsXHJcblx0XHRcImRyYWdvcy5jb21cIixcclxuXHRcdFwid3d3LmZyZWVidWYuY29tXCIsXHJcblx0XHRcInd3dy5rYXNwZXJza3kuY29tXCIsXHJcblx0XHRcIl9zZXJ2ZXJfXCIsXHJcblx0XHRcImJsb2cuZ3JvdXAtaWIuY29tXCIsXHJcblx0XHRcInRhbG9zLWV4dGVybmFsQGNpc2NvLmNvbVwiLFxyXG5cdFx0XCJfREVWSUNFX1wiLFxyXG5cdFx0XCJCNTAxNDAxOVwiLFxyXG5cdFx0XCJfSHVudGluZ19cIixcclxuXHRcdFwic2NoZW1hcy5taWNyb3NvZnQuY29tXCIsXHJcblx0XHRcInd3dy5pbnRlemVyLmNvbVwiLFxyXG5cdFx0XCJvYmplY3RpdmUtc2VlLmNvbVwiLFxyXG5cdFx0XCJcXFwiIzAwYmE2NlxcXCJcIixcclxuXHRcdFwiMS4zLjYuMVwiLFxyXG5cdFx0XCJncm91cC1pYi5jb21cIixcclxuXHRcdFwiXFxcIlVURi04XFxcIlwiLFxyXG5cdFx0XCJfRG9udXRfXCIsXHJcblx0XHRcIl9RVUVSWV9cIixcclxuXHRcdFwiZXhhbXBsZS5jb21cIixcclxuXHRcdFwibGluay5saW5raXB2Ni5jb21cIixcclxuXHRcdFwiQ3lXYXRjaEBmYmkuZ292XCIsXHJcblx0XHRcInd3dy5wYWxvYWx0b25ldHdvcmtzLmNvbVwiLFxyXG5cdFx0XCJkZG5zLm5ldFwiLFxyXG5cdFx0XCJ3d3cuYW1uZXN0eS5vcmdcIixcclxuXHRcdFwid3d3LmRhcmtyZWFkaW5nLmNvbVwiLFxyXG5cdFx0XCJhcmNoaXZlLm9yZ1wiLFxyXG5cdFx0XCJcXFwiZmlsZVxcXCJcIixcclxuXHRcdFwic2VudGluZWxvbmUuY29tXCIsXHJcblx0XHRcIl9wYXlsb2FkX1wiLFxyXG5cdFx0XCIndmFsdWUnXCIsXHJcblx0XHRcInB0c2VjdXJpdHkuY29tXCIsXHJcblx0XHRcIl9lbmNyeXB0ZWRfXCIsXHJcblx0XHRcIl9zZWN1cml0eV9cIixcclxuXHRcdFwiX3dpdGhfXCIsXHJcblx0XHRcIlx1MDBFNkNoZWVyc1x1MDBDNlwiLFxyXG5cdFx0XCJcXFwia2VybmVsMzIuZGxsXFxcIlwiLFxyXG5cdFx0XCJibG9nLmN5YmxlLmNvbVwiLFxyXG5cdFx0XCJfV2luMzJfXCIsXHJcblx0XHRcIl90eXBlX1wiLFxyXG5cdFx0XCJzeW1hbnRlYy5jb21cIixcclxuXHRcdFwiXFxcInBhdGhcXFwiXCIsXHJcblx0XHRcIlxcXCJQb3J0XFxcIlwiLFxyXG5cdFx0XCJfY29tbWFuZF9cIixcclxuXHRcdFwiZ2lzdC5naXRodWIuY29tXCIsXHJcblx0XHRcIndpa2lsZWFrcy5vcmdcIixcclxuXHRcdFwidGhlaGFja2VybmV3cy5jb21cIixcclxuXHRcdFwiX1dJVEhfXCIsXHJcblx0XHRcInd3dy5iaXRseS5jb21cIixcclxuXHRcdFwiZGF3bi5wYWtnb3Yub3JnXCIsXHJcblx0XHRcIl9uZXh0X1wiLFxyXG5cdFx0XCJiaXRseS5jb21cIixcclxuXHRcdFwiXFxcIlVURi0xNkxFXFxcIlwiLFxyXG5cdFx0XCJjb250YWdpb2R1bXAuYmxvZ3Nwb3QuY29tXCIsXHJcblx0XHRcInd3dy5leHBsb2l0LWRiLmNvbVwiLFxyXG5cdFx0XCJcXFwiY29uZmlnXFxcIlwiLFxyXG5cdFx0XCJpYTgwMTUwMy51cy5hcmNoaXZlLm9yZ1wiLFxyXG5cdFx0XCJpbnRlemVyLmNvbVwiLFxyXG5cdFx0XCJjeWJlcmVhc29uLmNvbVwiLFxyXG5cdFx0XCJzdXBwb3J0Lm1pY3Jvc29mdC5jb21cIixcclxuXHRcdFwiX3JhbmRvbV9cIixcclxuXHRcdFwiX2Jsb2NrX1wiLFxyXG5cdFx0XCJcXFwiTWljcm9zb2Z0XFxcIlwiLFxyXG5cdFx0XCJzaXRlcy5nb29nbGUuY29tXCIsXHJcblx0XHRcIl9GSUxFU19cIixcclxuXHRcdFwiX1NZU1RFTV9cIixcclxuXHRcdFwiX29wZXJhbmRfXCIsXHJcblx0XHRcInd3dy5ibGFja2hhdC5jb21cIixcclxuXHRcdFwid3d3LmFub21hbGkuY29tXCIsXHJcblx0XHRcIlxcXCJTY3JpcHRpbmcuRmlsZVN5c3RlbU9iamVjdFxcXCJcIixcclxuXHRcdFwiX05PVElGWV9cIixcclxuXHRcdFwiXFxcInByb2Nlc3NcXFwiXCIsXHJcblx0XHRcIlxcXCJKaXR0ZXJcXFwiXCIsXHJcblx0XHRcImJsb2cuYXZhc3QuY29tXCIsXHJcblx0XHRcIlxcXCJzZXJ2ZXJcXFwiXCIsXHJcblx0XHRcIjQ1LjE1NC4xNC4yMzVcIixcclxuXHRcdFwiX0xvYWRlcl9cIixcclxuXHRcdFwiXFxcImV2ZW50XFxcIlwiLFxyXG5cdFx0XCJcXFwiUGxhdGludW1cXFwiXCIsXHJcblx0XHRcIlxcXCIyMDE2LTA0LTEyXFxcIlwiLFxyXG5cdFx0XCJzY2hlbWFzLnhtbHNvYXAub3JnXCIsXHJcblx0XHRcInd3dy50aGVndWFyZGlhbi5jb21cIixcclxuXHRcdFwiYmxvZy5tb3JwaGlzZWMuY29tXCIsXHJcblx0XHRcInR1dGFub3RhLmNvbVwiLFxyXG5cdFx0XCIzMS4xMy4xOTUuMjUxXCIsXHJcblx0XHRcIl9SZXBvcnRfXCIsXHJcblx0XHRcIl9saW5lX1wiLFxyXG5cdFx0XCJfVEhSRUFEX1wiLFxyXG5cdFx0XCJfRElSRUNUT1JZX1wiLFxyXG5cdFx0XCJ3d3cuc29waG9zLmNvbVwiLFxyXG5cdFx0XCJfdGFyZ2V0X1wiLFxyXG5cdFx0XCJtYWlsLmNvbVwiLFxyXG5cdFx0XCJcXFxcVXNlcnNcXFxcQWRtaW5cXFxcXCIsXHJcblx0XHRcIjQ5NzU3Y2Y4NTY1Nzc1NzcwNDY1NmMwNzk3ODVjMDcyYmJjMjMzY2FiOTQyNDE4ZDk5ZDFmNjNkNDNmMjgzNTlcIixcclxuXHRcdFwicy5jZXJ0ZmEuY29tXCIsXHJcblx0XHRcIl8yLWdyYW1fXCIsXHJcblx0XHRcIjQ1Ljc3LjYwLjEzOFwiLFxyXG5cdFx0XCJcXFwidG9rLWdvXFxcIlwiLFxyXG5cdFx0XCJfc2VxdWVuY2VfXCIsXHJcblx0XHRcImFwaS5mYWNlaXQuY29tXCIsXHJcblx0XHRcInd3dy5zZWN1cml0eXdlZWsuY29tXCIsXHJcblx0XHRcInd3dy5zYW5zLm9yZ1wiLFxyXG5cdFx0XCJ3d3cuYWNjZW50dXJlLmNvbVwiLFxyXG5cdFx0XCJ3d3cuaWNhbm4ub3JnXCIsXHJcblx0XHRcIl9TaGVsbF9cIixcclxuXHRcdFwibGFicy5zZW50aW5lbG9uZS5jb21cIixcclxuXHRcdFwiNGE3NGE5ZmQ0MGI2MzIxOGY3NTA0ZjgwNmZjZTcxZGZmZWZjMWIxZDZjYTRiYmFhZGQ3MjBiNmE4OWQ0Nzc2MVwiLFxyXG5cdFx0XCJcXFwicG93ZXJzaGVsbC5leGVcXFwiXCIsXHJcblx0XHRcInd3dy5zZWNwdWxzZS5jb21cIixcclxuXHRcdFwiX2V4ZWN1dGFibGVfXCIsXHJcblx0XHRcIldXVy5MT0dSSFlUSE0uQ09NXCIsXHJcblx0XHRcIlxcXCJFU19FVkVOVF9cIixcclxuXHRcdFwiY3lsZXJhLmNvbVwiLFxyXG5cdFx0XCJjZG5saXN0Lm5ldFwiLFxyXG5cdFx0XCJpZC1yYW5zb213YXJlLmJsb2dzcG90LmNvbVwiLFxyXG5cdFx0XCJcXFwiTkNTQ1xcXCJcIixcclxuXHRcdFwiZXhwbG9pdHJldmVyc2luZy5jb21cIixcclxuXHRcdFwid3d3Lndzai5jb21cIixcclxuXHRcdFwiY29tbXVuaXR5LnJpc2tpcS5jb21cIixcclxuXHRcdFwiYmxvZy5jZXJ0ZmEuY29tXCIsXHJcblx0XHRcImp1ZHlzdGV2ZW5zb24uaW5mb1wiLFxyXG5cdFx0XCJib296YWxsZW4uY29tXCIsXHJcblx0XHRcIlxcXCJoaWRkZW5fY29icmFcXFwiXCIsXHJcblx0XHRcIl9oZWFkZXJfXCIsXHJcblx0XHRcIl9mdW5jX1wiLFxyXG5cdFx0XCJXV1cuVklSVVNCVUxMRVRJTi5DT01cIixcclxuXHRcdFwid3d3LnRvcnByb2plY3Qub3JnXCIsXHJcblx0XHRcIlxcXCJTdGFydFxcXCJcIixcclxuXHRcdFwiX0ZPTlRfXCIsXHJcblx0XHRcIlNlY1B1bHNlLkNPTVwiLFxyXG5cdFx0XCJ0aW55dXJsLmNvbVwiLFxyXG5cdFx0XCJcXFwicGFzc3dvcmRcXFwiXCIsXHJcblx0XHRcImFwcGxlLmNvbVwiLFxyXG5cdFx0XCJibG9ncy50ZWNobmV0LmNvbVwiLFxyXG5cdFx0XCJ3d3cuaWRjcHJpdmFjeS5jb21cIixcclxuXHRcdFwiX2xvY2FsX1wiLFxyXG5cdFx0XCJhcnN0ZWNobmljYS5jb21cIixcclxuXHRcdFwid3d3LmJpdGRlZmVuZGVyLmNvbVwiLFxyXG5cdFx0XCJfcHVibGljX1wiLFxyXG5cdFx0XCJcXFwic2hhMVxcXCJcIixcclxuXHRcdFwiX1BIT05FX1wiLFxyXG5cdFx0XCJtYXJjb3JhbWlsbGkuY29tXCIsXHJcblx0XHRcIl91cGRhdGVfXCIsXHJcblx0XHRcInRydXN0d2F2ZS5jb21cIixcclxuXHRcdFwiaS5pbWd1ci5jb21cIixcclxuXHRcdFwiY3VzdG9tZXJwb3J0YWwuc29sYXJ3aW5kcy5jb21cIixcclxuXHRcdFwid3d3LnpzY2FsZXIuY29tXCIsXHJcblx0XHRcIl9wYXRoX1wiLFxyXG5cdFx0XCJfc3RhcnRfXCIsXHJcblx0XHRcIlxcXCJ0aW1lXFxcIlwiLFxyXG5cdFx0XCJcXFwiQzpcXFxcV2luZG93c1xcXFxTeXN0ZW0zMlxcXFxjbWQuZXhlXFxcIlwiLFxyXG5cdFx0XCJcXFwicm9vdFxcXCJcIixcclxuXHRcdFwiX2hvc3RfXCIsXHJcblx0XHRcIlx1MDBFNmFseWFjLm9yZ1wiLFxyXG5cdFx0XCJ0YXNrbWdyLnNlcnZlaHR0cC5jb21cIixcclxuXHRcdFwiX3N0b21wX1wiLFxyXG5cdFx0XCJcXFwiUG9sbGluZ1xcXCJcIixcclxuXHRcdFwid3d3LmJsb29tYmVyZy5jb21cIixcclxuXHRcdFwid3d3LmFrYW1haS5jb21cIixcclxuXHRcdFwidGhyZWF0cmVjb24ubnNoYy5uZXRcIixcclxuXHRcdFwiX3NlcnZpY2VfXCIsXHJcblx0XHRcIm1zcmMubWljcm9zb2Z0LmNvbVwiLFxyXG5cdFx0XCJsZWFybi5taWNyb3NvZnQuY29tXCIsXHJcblx0XHRcIlxcXCJiYXNlNjRcXFwiXCIsXHJcblx0XHRcIl9SRVFVRVNUX1wiLFxyXG5cdFx0XCJwcml2YXRlLmRpcmVjdGludmVzdGluZy5jb21cIixcclxuXHRcdFwiODExODBiZjljN2IyODJjNmI4NDExZjhmMzE1YmM0MjJcIixcclxuXHRcdFwiXFxcXFVzZXJzXFxcXFVTRVJcXFxcXCIsXHJcblx0XHRcIl9IT01FVU5JWF9cIixcclxuXHRcdFwicmVjb3JkZWRmdXR1cmUuY29tXCIsXHJcblx0XHRcIm1hbHdhcmUtdHJhZmZpYy1hbmFseXNpcy5uZXRcIixcclxuXHRcdFwiaXAtYXBpLmNvbVwiLFxyXG5cdFx0XCJfVkVSU0lPTl9cIixcclxuXHRcdFwiYmxvZy5lc2V0LmNvbVwiLFxyXG5cdFx0XCJcXFwic2hhMjU2XFxcIlwiLFxyXG5cdFx0XCJfUkVMMzJfXCIsXHJcblx0XHRcInd3dy5mb3JiZXMuY29tXCIsXHJcblx0XHRcIm5ha2Vkc2VjdXJpdHkuc29waG9zLmNvbVwiLFxyXG5cdFx0XCJfQ1JFQVRFX1wiLFxyXG5cdFx0XCIxMTIuMTc1LjkyLjU3XCIsXHJcblx0XHRcIlxcXCJ1c2VybmFtZVxcXCJcIixcclxuXHRcdFwiX2xpYmNfXCIsXHJcblx0XHRcImFzc2FkY3JpbWVzLmluZm9cIixcclxuXHRcdFwic3RlbXRvcHguY29tXCIsXHJcblx0XHRcImludGVsNDcxLmNvbVwiLFxyXG5cdFx0XCJ2YmxvY2FsaG9zdC5jb21cIixcclxuXHRcdFwiXFxcIm9wZW5cXFwiXCIsXHJcblx0XHRcIl9SRUFEX1wiLFxyXG5cdFx0XCJzZXJ2aWNlLmNsaWNrYXdheS5jb21cIixcclxuXHRcdFwid3d3LkxJRkFSUy5jb21cIixcclxuXHRcdFwidGVhbS1jeW1ydS5jb21cIixcclxuXHRcdFwiX3RhYmxlX1wiLFxyXG5cdFx0XCJfU0VDVElPTl9cIixcclxuXHRcdFwiOjpEZWNcIixcclxuXHRcdFwiXFxcIl9fbWFpbl9cIixcclxuXHRcdFwiX2tlcm5lbDMyX1wiLFxyXG5cdFx0XCJfR0xPQl9cIixcclxuXHRcdFwid3d3LnRocmVhdGV4cGVydC5jb21cIixcclxuXHRcdFwibWVkaWEua2FzcGVyc2t5Y29udGVudGh1Yi5jb21cIixcclxuXHRcdFwibmF2ZXIuY29tXCIsXHJcblx0XHRcIjcwMDM0YjMzZjU5YzY2OTg0MDMyOTNjZGMyODY3NmM3ZGFhOGM0OTAzMTA4OWVmYTZlZWZjZTQxZTIyZGNjYjNcIixcclxuXHRcdFwiemRuZXQuY29tXCIsXHJcblx0XHRcIlxcXCJXc2NyaXB0LlNoZWxsXFxcIlwiLFxyXG5cdFx0XCJpcGxvZ2dlci5vcmdcIixcclxuXHRcdFwiX3N0YWNrX1wiLFxyXG5cdFx0XCJfU1RBVFVTX1wiLFxyXG5cdFx0XCJjZGVybGVhcm4uY29tXCIsXHJcblx0XHRcIl9jcmVhdGlvbi9wcm9jX1wiLFxyXG5cdFx0XCInYnl0ZXMnXCIsXHJcblx0XHRcInRocmVhdHZlY3Rvci5jeWxhbmNlLmNvbVwiLFxyXG5cdFx0XCJcXFwicG9ydFxcXCJcIixcclxuXHRcdFwiXFxcIlJFR19EV09SRFxcXCJcIixcclxuXHRcdFwiXFxcXFVzZXJzXFxcXEJhbGR1clxcXFxcIixcclxuXHRcdFwidGVjaGNvbW11bml0eS5taWNyb3NvZnQuY29tXCIsXHJcblx0XHRcIlxcXCJcXFxceDAwXFxcIlwiLFxyXG5cdFx0XCI2Ni40Mi45OC4yMjBcIixcclxuXHRcdFwid3d3LmttMTUzLmNvbVwiLFxyXG5cdFx0XCJfZmlsZXNfXCIsXHJcblx0XHRcInd3dy5zZW50aW5lbG9uZS5jb21cIixcclxuXHRcdFwid3cucmVjb3JkZWRmdXR1cmUuY29tXCIsXHJcblx0XHRcIl9FTlRSWV9cIixcclxuXHRcdFwiX2NhbGxfXCIsXHJcblx0XHRcIl9jdXJyZW50X1wiLFxyXG5cdFx0XCI6OmFcIixcclxuXHRcdFwiXHUwMEU2XCIsXHJcblx0XHRcIl9saXN0X1wiLFxyXG5cdFx0XCJyZXl3ZWIuY29tXCIsXHJcblx0XHRcIlxcXCJjZW50ZXJcXFwiXCIsXHJcblx0XHRcIl9FWFRFUk5BTF9cIixcclxuXHRcdFwiJ19fbWFpbl9cIixcclxuXHRcdFwiX1dlYnNoZWxsX1wiLFxyXG5cdFx0XCJwbGF5Lmdvb2dsZS5jb21cIixcclxuXHRcdFwiJ3V0Zi04J1wiLFxyXG5cdFx0XCJ3d3cuZ29kYWRkeS5jb21cIixcclxuXHRcdFwiXFxcInN1Ym1pdFxcXCJcIixcclxuXHRcdFwiXFxcIjIwMTgvMDQvMTlcXFwiXCIsXHJcblx0XHRcIjE3Mi4xNi4xMC4yXCIsXHJcblx0XHRcImluZm9ARmlyZUV5ZS5jb21cIixcclxuXHRcdFwiX2ludGhlX1wiLFxyXG5cdFx0XCJ0aHJlYXRjb25uZWN0LmNvbVwiLFxyXG5cdFx0XCJpbnRydXNpb250cnV0aC53b3JkcHJlc3MuY29tXCIsXHJcblx0XHRcIlxcXFxVc2Vyc1xcXFxVc2VybmFtZVxcXFxcIixcclxuXHRcdFwibWNhZmVlLmNvbVwiLFxyXG5cdFx0XCJfbWFpbl9cIixcclxuXHRcdFwiRTo6XCIsXHJcblx0XHRcImRlLmNvbVwiLFxyXG5cdFx0XCJcdTAwRTZ0eXBlXHUwMEM2XCIsXHJcblx0XHRcIidmYWxzZSdcIixcclxuXHRcdFwiX3N1c3BfXCIsXHJcblx0XHRcIl9TVEFSVF9cIixcclxuXHRcdFwiX0RJU0tfXCIsXHJcblx0XHRcIl9hcHQzOF9cIixcclxuXHRcdFwiX2NoZWNrX1wiLFxyXG5cdFx0XCJ3d3cubWVkaWFmaXJlLmNvbVwiLFxyXG5cdFx0XCJpbmZvQGNpcmNsLmx1XCIsXHJcblx0XHRcIlxcXFxVc2Vyc1xcXFxqYWNrXFxcXFwiLFxyXG5cdFx0XCJ3b3Jka2V5dnBsb2FkLm5ldFwiLFxyXG5cdFx0XCJfQVBUMV9cIixcclxuXHRcdFwiX3BhY2tldF9cIixcclxuXHRcdFwiX2J1ZmZlcl9cIixcclxuXHRcdFwiX0lNQUdFX1wiLFxyXG5cdFx0XCJ3d3cuYmxhY2tiZXJyeS5jb21cIixcclxuXHRcdFwicGx1cy5nb29nbGUuY29tXCIsXHJcblx0XHRcIl9jb2RlX1wiLFxyXG5cdFx0XCJcXFwiUkVHX1NaXFxcIlwiLFxyXG5cdFx0XCJzZWN1cml0eXNjb3JlY2FyZC5jb21cIixcclxuXHRcdFwiXFxcIlRydWVcXFwiXCIsXHJcblx0XHRcIlxcXCJzdGFydFxcXCJcIixcclxuXHRcdFwiX2ludGVybmFsX1wiLFxyXG5cdFx0XCJwaG90b2J1Y2tldC5jb21cIixcclxuXHRcdFwiXFxcIk5hbWVcXFwiXCIsXHJcblx0XHRcIjEwMy4xMjUuMTkwLjI0OFwiLFxyXG5cdFx0XCJ4ZmlzaEBob3RtYWlsLmNvbVwiLFxyXG5cdFx0XCIxOTIuMTY4LjAuMVwiLFxyXG5cdFx0XCJwd2MuYmxvZ3MuY29tXCIsXHJcblx0XHRcImxhYnMuYml0ZGVmZW5kZXIuY29tXCIsXHJcblx0XHRcIl9ISUdITk9PTl9cIixcclxuXHRcdFwiX1JhbnNvbXdhcmVfXCIsXHJcblx0XHRcIl9JTkZPX1wiLFxyXG5cdFx0XCJcdTAwRTZwYXRoLmFseWFjLm9yZ1wiLFxyXG5cdFx0XCJjb20uZ2FcIixcclxuXHRcdFwiXFxcInV0Zi04XFxcIlwiLFxyXG5cdFx0XCJfY29icmFfXCIsXHJcblx0XHRcIlZCLk5FVFwiLFxyXG5cdFx0XCJfZnJhbWVfXCIsXHJcblx0XHRcIl9HZW5lcmljX1wiLFxyXG5cdFx0XCJfRHJvcHBlcl9cIixcclxuXHRcdFwicmRhcC5hcmluLm5ldFwiLFxyXG5cdFx0XCJzdWJtaXRAbWFsd2FyZS51cy1jZXJ0LmdvdlwiLFxyXG5cdFx0XCJ3d3cuY3Nvb25saW5lLmNvbVwiLFxyXG5cdFx0XCJ3d3cuYW1hem9uLmNvbVwiLFxyXG5cdFx0XCIxODEuMzkuMTM1LjEyNlwiLFxyXG5cdFx0XCIxOTcuMjExLjIxMi41OVwiLFxyXG5cdFx0XCI4MS45NC4xOTIuMTQ3XCIsXHJcblx0XHRcIlxcXCJDb250ZW50LVR5cGVcXFwiXCIsXHJcblx0XHRcIl9tZXRob2RfXCIsXHJcblx0XHRcIlxcXCJhcmd1bWVudHNcXFwiXCIsXHJcblx0XHRcInJlZGNhbmFyeS5jb21cIixcclxuXHRcdFwiXFxcXFVzZXJzXFxcXCpcXFxcXCIsXHJcblx0XHRcInd3dy5sYW5nbmVyLmNvbVwiLFxyXG5cdFx0XCJfcGFzc19cIixcclxuXHRcdFwiZW5yaXBpbnRvczEyM0BvdXRsb29rLmVzXCIsXHJcblx0XHRcIkVGRi5PUkdcIixcclxuXHRcdFwid3d3LnNlY3VyaXR5c2NvcmVjYXJkLmNvbVwiLFxyXG5cdFx0XCJpbmZvLnB1YmxpY2ludGVsbGlnZW5jZS5uZXRcIixcclxuXHRcdFwiZG9jdW1lbnRzLnRyZW5kbWljcm8uY29tXCIsXHJcblx0XHRcIlxcXCJ1c2VyXFxcIlwiLFxyXG5cdFx0XCJ3d3cuYmluZy5jb21cIixcclxuXHRcdFwiXHUwMEU2VGVhbVNweVx1MDBDNlwiLFxyXG5cdFx0XCJnaXRsYWIuY29tXCIsXHJcblx0XHRcIlxcXCJUeXBlXFxcIlwiLFxyXG5cdFx0XCJfL1xcXFwvXFxcXF9cIixcclxuXHRcdFwiOTM3NUNGRjA0MTMxMTFkM0I4OEEwMDEwNEIyQTY2NzZcIixcclxuXHRcdFwiXFxcIkJhc2VcXFwiXCIsXHJcblx0XHRcInByb2Nlc3MuY29tXCIsXHJcblx0XHRcIjE4NS4zNC4yMjQuMTIxXCIsXHJcblx0XHRcIjE3Mi4yNDUuNi4xMzRcIixcclxuXHRcdFwiMjU1LjI1NS4yNTUuMFwiLFxyXG5cdFx0XCJfbWVtb3J5X1wiLFxyXG5cdFx0XCJkZGVhNDA4ZTE3OGYwNDEyYWU3OGZmNWQ1YWRmMjQzOTI1MWY2OGNhZDRmZDg1M2VlNDY2YTNjNzQ2NDk2NDJkXCIsXHJcblx0XHRcIl8yMDIwX1wiLFxyXG5cdFx0XCJfZW5jb2RlZF9cIixcclxuXHRcdFwib3R4LmFsaWVudmF1bHQuY29tXCIsXHJcblx0XHRcIl9zeXN0ZW1fXCIsXHJcblx0XHRcInBoZGF5cy5jb21cIixcclxuXHRcdFwiXFxcIkRpc3Rpbmd1aXNoZWROYW1lXFxcIlwiLFxyXG5cdFx0XCJcXFwiU2NvcGVPZlNlYXJjaFxcXCJcIixcclxuXHRcdFwiXFxcIlNlYXJjaEZpbHRlclxcXCJcIixcclxuXHRcdFwiXFxcIm1lbWJlcj0qXFxcIlwiLFxyXG5cdFx0XCJ3d3cuYXBhY2hlLm9yZ1wiLFxyXG5cdFx0XCJfcmVzb2x2ZV9cIixcclxuXHRcdFwiMjE1MWMxOTc3YjQ1NTVhMTc2MWMxMmYxNTE5NjlmOGU4NTNlMjZjMzk2ZmExYTdiNzRjY2JhZjNhNDhmNDUyNVwiLFxyXG5cdFx0XCJcXFwiY2xpZW50XFxcIlwiLFxyXG5cdFx0XCJfdmVyc2lvbl9cIixcclxuXHRcdFwiXFxcInRleHRcXFwiXCIsXHJcblx0XHRcIl9PUFRJT05fXCIsXHJcblx0XHRcInJlcG9ydEBjaXNhLmdvdlwiLFxyXG5cdFx0XCJcXFwic3lzdGVtXFxcIlwiLFxyXG5cdFx0XCJcXFwiaG9zdG5hbWVcXFwiXCIsXHJcblx0XHRcIjEwLjAuMC4xXCIsXHJcblx0XHRcIkN5YmVyc2VjdXJpdHlfUmVxdWVzdHNAbnNhLmdvdlwiLFxyXG5cdFx0XCJcXFxcVXNlcnNcXFxcXFxcXCV1c2VybmFtZSVcXFxcXCIsXHJcblx0XHRcInRvcHNlYzIwMTQuY29tXCIsXHJcblx0XHRcIl9zZWN0aW9uX1wiLFxyXG5cdFx0XCJncmVlbnNreTI3LnZpY3AubmV0XCIsXHJcblx0XHRcIl9zdHViX1wiLFxyXG5cdFx0XCJ3d3cuY2FyYm9uYmxhY2suY29tXCIsXHJcblx0XHRcIlxcXFxVc2Vyc1xcXFwldXNlcm5hbWUlXFxcXFwiLFxyXG5cdFx0XCJfdGltZV9cIixcclxuXHRcdFwiR09EQUREWS5DT01cIixcclxuXHRcdFwid3d3LmN5YmVyYXJrLmNvbVwiLFxyXG5cdFx0XCJzaGFyaW5nbXltZWRpYS5jb21cIixcclxuXHRcdFwid2UxMXBvaW50LmNvbVwiLFxyXG5cdFx0XCJcXFxcVXNlcnNcXFxcSUVVc2VyXFxcXFwiLFxyXG5cdFx0XCJjb2xkc2VhbHVzLmZhdGNvdy5jb21cIixcclxuXHRcdFwid3d3LnJlc2VhcmNoYnVuZGxlLmNvbVwiLFxyXG5cdFx0XCJ3aWxjYXJvYmJlLmNvbVwiLFxyXG5cdFx0XCJ4bWwuc3Nkc2FuZGJveC5uZXRcIixcclxuXHRcdFwiX3NpemVfXCIsXHJcblx0XHRcIl9leHBsb2l0X1wiLFxyXG5cdFx0XCJ3d3cuYWhubGFiLmNvbVwiLFxyXG5cdFx0XCJcXFwiV2hpdGVcXFwiXCIsXHJcblx0XHRcIl9yZXR1cm5fXCIsXHJcblx0XHRcIlxcXCIuZXhlXFxcIlwiLFxyXG5cdFx0XCJ3d3cuZXhhdHJhY2suY29tXCIsXHJcblx0XHRcIl9TeXN0ZW1DYWxsX1wiLFxyXG5cdFx0XCJcXFwiaGlkZGVuXFxcIlwiLFxyXG5cdFx0XCJiaXRidWNrZXQub3JnXCIsXHJcblx0XHRcImNvbS5uZXRcIixcclxuXHRcdFwicm96aW5hbmRyZXk3MzZAZ21haWwuY29tXCIsXHJcblx0XHRcIl9uYWd5X1wiLFxyXG5cdFx0XCJhMGU5ZjVkNjQzNDlmYjEzMTkxYmM3ODFmODFmNDJlMVwiLFxyXG5cdFx0XCIwdjJ4LmJsb2dzcG90LmNvbVwiLFxyXG5cdFx0XCJcXFwiTk9fQ0hBTkdFXFxcIlwiLFxyXG5cdFx0XCJfVGhyZWF0X1wiLFxyXG5cdFx0XCJfYWNjZXNzX1wiLFxyXG5cdFx0XCJfRVhQT1JUX1wiLFxyXG5cdFx0XCJfcHJveHlfXCIsXHJcblx0XHRcInd3dy5jeWJlcnNjb29wLmNvbVwiLFxyXG5cdFx0XCJ3d3cueWFob28uY29tXCIsXHJcblx0XHRcInd3dy5uYW1lY2hlYXAuY29tXCIsXHJcblx0XHRcImJsb2cuY2hlY2twb2ludC5jb21cIixcclxuXHRcdFwiX3dpbjMyX1wiLFxyXG5cdFx0XCI6OmZcIixcclxuXHRcdFwiOjplXCIsXHJcblx0XHRcImFvbC5jb21cIixcclxuXHRcdFwiX0JPT1RfXCIsXHJcblx0XHRcIl9BQ0NFU1NfXCIsXHJcblx0XHRcIl9GaWRlbGlzX1wiLFxyXG5cdFx0XCJfZGVsZWdhdGVfXCIsXHJcblx0XHRcIl9FTkdMSVNIX1wiLFxyXG5cdFx0XCJ3andqLm5vLWlwLm9yZ1wiLFxyXG5cdFx0XCJ0ci5jb21cIixcclxuXHRcdFwiJ3VkYmNnaXV0LmRhdCdcIixcclxuXHRcdFwicGFwYWd1amppaWlpaWkuYmxvZ3Nwb3QuY29tXCIsXHJcblx0XHRcIjlrZTZuLmJsb2dzcG90LmNvbVwiLFxyXG5cdFx0XCJqb2V4cGVkaWFncm91cC5jb21cIixcclxuXHRcdFwiX050RWxldmF0aW9uX1wiLFxyXG5cdFx0XCJfbGFzdF9cIixcclxuXHRcdFwid3d3LmN2ZS5taXRyZS5vcmdcIixcclxuXHRcdFwiX0NPTlRST0xfXCIsXHJcblx0XHRcIl9FWFBBTkRfXCIsXHJcblx0XHRcInd3dy5iYW5raW5mb3NlY3VyaXR5LmNvbVwiLFxyXG5cdFx0XCJ3d3cuY29udGV4dGlzLmNvbVwiLFxyXG5cdFx0XCJXZUxpdmVTZWN1cml0eS5jb21cIixcclxuXHRcdFwiYmxvZy5yZXZlcnNpbmdsYWJzLmNvbVwiLFxyXG5cdFx0XCJcXFwidGVzdFxcXCJcIixcclxuXHRcdFwiX1NUQUNLX1wiLFxyXG5cdFx0XCJfYnl0ZV9cIixcclxuXHRcdFwiYmxvZy5mb3gtaXQuY29tXCIsXHJcblx0XHRcImJhbm5ldHdvcmsub3JnXCJcclxuXHRdXHJcbn07XHJcblxyXG5jbGFzcyBSZWxheFNldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcclxuXHRwbHVnaW46IFJlbGF4UGx1Z2luO1xyXG5cdGtleVZhbHVlQ29udGFpbmVyOiBIVE1MRGl2RWxlbWVudDtcclxuXHRzYXZlQnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudDtcclxuXHRpc0hpZ2hsaWdodGVkID0gZmFsc2U7XHJcblx0ZHJhZ0VsZW1lbnQgPSBudWxsO1xyXG5cdGN1cnJlbnRJbmRleCA9IG51bGw7XHJcblx0bmV3SW5kZXggPSBudWxsO1xyXG5cdHN0YXJ0WSA9IDA7XHJcblx0c3RhcnRUb3AgPSAwO1xyXG5cdGluaXRpYWxPZmZzZXRZID0gMDtcclxuXHRwcml2YXRlIHNldHRpbmdzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcclxuXHJcblxyXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IFJlbGF4UGx1Z2luKSB7XHJcblx0XHRzdXBlcihhcHAsIHBsdWdpbik7XHJcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuXHRcdHRoaXMub25EcmFnRW5kID0gdGhpcy5vbkRyYWdFbmQuYmluZCh0aGlzKTtcclxuXHRcdHRoaXMub25EcmFnTW92ZSA9IHRoaXMub25EcmFnTW92ZS5iaW5kKHRoaXMpO1xyXG5cdFx0dGhpcy5tYWtlRHJhZ2dhYmxlID0gdGhpcy5tYWtlRHJhZ2dhYmxlLmJpbmQodGhpcyk7XHJcblxyXG5cdFx0dGhpcy51cGRhdGVSZWdleE9yZGVyRnJvbURPTSA9ICgpID0+IHtcclxuXHRcdFx0Y29uc3QgcmVnZXhHcm91cHMgPSBbXTtcclxuXHRcdFx0dGhpcy5rZXlWYWx1ZUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKFwiLnJlZ2V4LWdyb3VwLWNvbnRhaW5lclwiKS5mb3JFYWNoKGdyb3VwQ29udGFpbmVyID0+IHtcclxuXHRcdFx0XHRjb25zdCBncm91cE5hbWVFbGVtZW50ID0gZ3JvdXBDb250YWluZXIucXVlcnlTZWxlY3RvcihcIi5yZWdleC1ncm91cC1uYW1lXCIpO1xyXG5cdFx0XHRcdGNvbnN0IGFjdGl2ZUNoZWNrYm94SW5wdXQgPSBncm91cENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiaW5wdXRbdHlwZT0nY2hlY2tib3gnXVwiKTtcclxuXHRcdFx0XHRjb25zdCBncm91cE5hbWUgPSBncm91cE5hbWVFbGVtZW50ID8gZ3JvdXBOYW1lRWxlbWVudC50ZXh0Q29udGVudCA6IFwiXCI7XHJcblx0XHRcdFx0Y29uc3QgaXNBY3RpdmUgPSBhY3RpdmVDaGVja2JveElucHV0ID8gYWN0aXZlQ2hlY2tib3hJbnB1dC5jaGVja2VkIDogZmFsc2U7XHJcblxyXG5cdFx0XHRcdGNvbnN0IHJlZ2V4ZXMgPSBBcnJheS5mcm9tKGdyb3VwQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoXCIucmVnZXgtZ3JvdXAtY29udGVudCAuZmxleC1yb3dcIikpLm1hcChyb3cgPT4ge1xyXG5cdFx0XHRcdFx0Y29uc3Qga2V5SW5wdXQgPSByb3cucXVlcnlTZWxlY3RvcihcImlucHV0W3BsYWNlaG9sZGVyPSdEZXNjcmlwdGlvbi1LZXknXVwiKTtcclxuXHRcdFx0XHRcdGNvbnN0IHZhbHVlSW5wdXQgPSByb3cucXVlcnlTZWxlY3RvcihcImlucHV0W3BsYWNlaG9sZGVyPSdSZWdleHAnXVwiKTtcclxuXHRcdFx0XHRcdGNvbnN0IHJlZ2V4QWN0aXZlQ2hlY2tib3ggPSByb3cucXVlcnlTZWxlY3RvcihcImlucHV0W3R5cGU9J2NoZWNrYm94J11cIik7XHJcblx0XHRcdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdFx0XHRpc0FjdGl2ZTogcmVnZXhBY3RpdmVDaGVja2JveCA/IHJlZ2V4QWN0aXZlQ2hlY2tib3guY2hlY2tlZCA6IGZhbHNlLFxyXG5cdFx0XHRcdFx0XHRrZXk6IGtleUlucHV0ID8ga2V5SW5wdXQudmFsdWUgOiBcIlwiLFxyXG5cdFx0XHRcdFx0XHRyZWdleDogdmFsdWVJbnB1dCA/IHZhbHVlSW5wdXQudmFsdWUgOiBcIlwiXHJcblx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRjb25zdCBpc0NvbGxhcHNlZCA9IGdyb3VwQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5yZWdleC1ncm91cC1jb250ZW50Jykuc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCI7XHJcblx0XHRcdFx0cmVnZXhHcm91cHMucHVzaCh7aXNBY3RpdmUsIGdyb3VwTmFtZSwgcmVnZXhlcywgaXNDb2xsYXBzZWR9KTtcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHRpZiAodGhpcy5wbHVnaW4gJiYgdGhpcy5wbHVnaW4uc2V0dGluZ3MpIHtcclxuXHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5yZWdleEdyb3VwcyA9IHJlZ2V4R3JvdXBzO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJQbHVnaW4gb3Igc2V0dGluZ3Mgbm90IGF2YWlsYWJsZVwiKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRjb25zdCByZWdleFBhaXJzID0gQXJyYXkuZnJvbSh0aGlzLmtleVZhbHVlQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc3RhbmRhbG9uZS1yZWdleC1yb3dcIikpLm1hcChyb3cgPT4ge1xyXG5cdFx0XHRcdGNvbnN0IGtleUlucHV0ID0gcm93LnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFtwbGFjZWhvbGRlcj0nRGVzY3JpcHRpb24tS2V5J11cIik7XHJcblx0XHRcdFx0Y29uc3QgdmFsdWVJbnB1dCA9IHJvdy5xdWVyeVNlbGVjdG9yKFwiaW5wdXRbcGxhY2Vob2xkZXI9J1JlZ2V4cCddXCIpO1xyXG5cdFx0XHRcdGNvbnN0IHJlZ2V4QWN0aXZlQ2hlY2tib3ggPSByb3cucXVlcnlTZWxlY3RvcihcImlucHV0W3R5cGU9J2NoZWNrYm94J11cIik7XHJcblx0XHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRcdGlzQWN0aXZlOiByZWdleEFjdGl2ZUNoZWNrYm94ID8gcmVnZXhBY3RpdmVDaGVja2JveC5jaGVja2VkIDogZmFsc2UsXHJcblx0XHRcdFx0XHRrZXk6IGtleUlucHV0ID8ga2V5SW5wdXQudmFsdWUgOiBcIlwiLFxyXG5cdFx0XHRcdFx0cmVnZXg6IHZhbHVlSW5wdXQgPyB2YWx1ZUlucHV0LnZhbHVlIDogXCJcIlxyXG5cdFx0XHRcdH07XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MucmVnZXhQYWlycyA9IHJlZ2V4UGFpcnM7XHJcblx0XHRcdHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0fTtcclxuXHJcblxyXG5cdFx0dGhpcy5zYXZlQ2hhbmdlcyA9ICgpID0+IHtcclxuXHRcdFx0dGhpcy51cGRhdGVSZWdleE9yZGVyRnJvbURPTSgpO1xyXG5cdFx0XHR0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0Y29uc3QgY2xvc2VCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsLWNsb3NlLWJ1dHRvblwiKTtcclxuXHRcdFx0aWYgKGNsb3NlQnV0dG9uKSB7XHJcblx0XHRcdFx0Y2xvc2VCdXR0b24uY2xpY2soKTtcclxuXHRcdFx0fVxyXG5cdFx0XHR0aGlzLnNldEhpZ2hsaWdodGVkKGZhbHNlKTtcclxuXHRcdH07XHJcblx0fVxyXG5cclxuXHRtYWtlRHJhZ2dhYmxlKGVsZW1lbnQsIGRyYWdIYW5kbGUpIHtcclxuXHRcdGlmICghZHJhZ0hhbmRsZSkge1xyXG5cdFx0XHRjb25zb2xlLmVycm9yKFwiRHJhZyBoYW5kbGUgbm90IGZvdW5kIVwiLCBlbGVtZW50LmlubmVySFRNTCk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRkcmFnSGFuZGxlLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgKGUpID0+IHtcclxuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuXHRcdFx0dGhpcy5kcmFnRWxlbWVudCA9IGVsZW1lbnQ7XHJcblx0XHRcdHRoaXMuZHJhZ0VsZW1lbnQuY2xhc3NMaXN0LmFkZChcImRyYWdnaW5nXCIpO1xyXG5cclxuXHRcdFx0dGhpcy5wbGFjZWhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cdFx0XHR0aGlzLnBsYWNlaG9sZGVyLmNsYXNzTmFtZSA9ICdwbGFjZWhvbGRlcic7XHJcblx0XHRcdHRoaXMucGxhY2Vob2xkZXIuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xyXG5cdFx0XHR0aGlzLnBsYWNlaG9sZGVyLnN0eWxlLmhlaWdodCA9IGAke2VsZW1lbnQub2Zmc2V0SGVpZ2h0fXB4YDtcclxuXHRcdFx0dGhpcy5wbGFjZWhvbGRlci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAncmdiYSgwLCAwLCAwLCAwLjEpJztcclxuXHRcdFx0ZWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLnBsYWNlaG9sZGVyLCBlbGVtZW50KTtcclxuXHJcblx0XHRcdHRoaXMuZHJhZ0VsZW1lbnQuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG5cdFx0XHR0aGlzLmRyYWdFbGVtZW50LnN0eWxlLmJvcmRlciA9ICdub25lJztcclxuXHJcblx0XHRcdGNvbnN0IGNsb25lID0gdGhpcy5kcmFnRWxlbWVudC5jbG9uZU5vZGUodHJ1ZSk7XHJcblx0XHRcdGNsb25lLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuXHRcdFx0Y2xvbmUuc3R5bGUudG9wID0gJzAnO1xyXG5cdFx0XHRjbG9uZS5zdHlsZS5sZWZ0ID0gJzAnO1xyXG5cdFx0XHRjbG9uZS5zdHlsZS53aWR0aCA9ICcxMDAlJztcclxuXHRcdFx0Y2xvbmUuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xyXG5cdFx0XHRjbG9uZS5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xyXG5cdFx0XHRjbG9uZS5zdHlsZS5wb2ludGVyRXZlbnRzID0gJ25vbmUnO1xyXG5cdFx0XHRjbG9uZS5zdHlsZS56SW5kZXggPSAnOTk5JztcclxuXHRcdFx0dGhpcy5wbGFjZWhvbGRlci5hcHBlbmRDaGlsZChjbG9uZSk7XHJcblxyXG5cdFx0XHRjb25zdCBmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cdFx0XHRmcmFtZS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcblx0XHRcdGZyYW1lLnN0eWxlLnRvcCA9ICcwJztcclxuXHRcdFx0ZnJhbWUuc3R5bGUubGVmdCA9ICcwJztcclxuXHRcdFx0ZnJhbWUuc3R5bGUud2lkdGggPSAnMTAwJSc7XHJcblx0XHRcdGZyYW1lLnN0eWxlLmhlaWdodCA9ICcxMDAlJztcclxuXHRcdFx0ZnJhbWUuc3R5bGUuYm9yZGVyID0gJzJweCBkYXNoZWQgdmFyKC0taW50ZXJhY3RpdmUtYWNjZW50KSc7XHJcblx0XHRcdGZyYW1lLnN0eWxlLmJveFNpemluZyA9ICdib3JkZXItYm94JztcclxuXHRcdFx0ZnJhbWUuc3R5bGUuekluZGV4ID0gJzEwMDAnO1xyXG5cdFx0XHR0aGlzLnBsYWNlaG9sZGVyLmFwcGVuZENoaWxkKGZyYW1lKTtcclxuXHJcblx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5vbkRyYWdNb3ZlKTtcclxuXHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy5vbkRyYWdFbmQpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cdGZpbmRDbG9zZXN0R3JvdXBPclN0YW5kYWxvbmVBcmVhKHlQb3NpdGlvbikge1xyXG5cdFx0bGV0IGNsb3Nlc3QgPSBudWxsO1xyXG5cdFx0bGV0IGNsb3Nlc3REaXN0YW5jZSA9IEluZmluaXR5O1xyXG5cclxuXHRcdGNvbnN0IGFsbENvbnRhaW5lcnMgPSB0aGlzLmtleVZhbHVlQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5yZWdleC1ncm91cC1jb250YWluZXIsIC5zdGFuZGFsb25lLXJlZ2V4LXJvdycpO1xyXG5cclxuXHRcdGFsbENvbnRhaW5lcnMuZm9yRWFjaChjb250YWluZXIgPT4ge1xyXG5cdFx0XHRjb25zdCByZWN0ID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cdFx0XHRjb25zdCBjb250YWluZXJNaWRwb2ludCA9IHdpbmRvdy5zY3JvbGxZICsgcmVjdC50b3AgKyByZWN0LmhlaWdodCAvIDI7XHJcblx0XHRcdGNvbnN0IGRpc3RhbmNlID0gTWF0aC5hYnMoeVBvc2l0aW9uIC0gY29udGFpbmVyTWlkcG9pbnQpO1xyXG5cclxuXHRcdFx0aWYgKGRpc3RhbmNlIDwgY2xvc2VzdERpc3RhbmNlKSB7XHJcblx0XHRcdFx0Y2xvc2VzdCA9IGNvbnRhaW5lcjtcclxuXHRcdFx0XHRjbG9zZXN0RGlzdGFuY2UgPSBkaXN0YW5jZTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0cmV0dXJuIGNsb3Nlc3Q7XHJcblx0fVxyXG5cclxuXHRmaW5kU291cmNlR3JvdXBJbmRleChkcmFnRWxlbWVudCkge1xyXG5cdFx0Y29uc3QgZ3JvdXBDb250YWluZXIgPSBkcmFnRWxlbWVudC5jbG9zZXN0KCcucmVnZXgtZ3JvdXAtY29udGFpbmVyJyk7XHJcblx0XHRpZiAoIWdyb3VwQ29udGFpbmVyKSByZXR1cm4gLTE7XHJcblxyXG5cdFx0Y29uc3QgZ3JvdXBOYW1lID0gZ3JvdXBDb250YWluZXIucXVlcnlTZWxlY3RvcihcIi5yZWdleC1ncm91cC1uYW1lXCIpLnRleHRDb250ZW50LnRyaW0oKTtcclxuXHRcdHJldHVybiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5yZWdleEdyb3Vwcy5maW5kSW5kZXgoZ3JvdXAgPT4gZ3JvdXAuZ3JvdXBOYW1lID09PSBncm91cE5hbWUpO1xyXG5cdH1cclxuXHJcblx0YWRqdXN0UGxhY2Vob2xkZXJQb3NpdGlvbih0YXJnZXRHcm91cCkge1xyXG5cdFx0aWYgKCF0aGlzLmRyYWdFbGVtZW50IHx8ICF0aGlzLnBsYWNlaG9sZGVyKSByZXR1cm47XHJcblx0XHRpZiAodGFyZ2V0R3JvdXAuY2xhc3NMaXN0LmNvbnRhaW5zKCdyZWdleC1ncm91cC1jb250YWluZXInKSB8fCB0YXJnZXRHcm91cC5jbGFzc0xpc3QuY29udGFpbnMoJ3N0YW5kYWxvbmUtcmVnZXgtcm93JykpIHtcclxuXHRcdFx0Y29uc3QgcGFyZW50ID0gdGFyZ2V0R3JvdXAucGFyZW50Tm9kZTtcclxuXHJcblx0XHRcdGlmIChwYXJlbnQgJiYgKHBhcmVudCA9PT0gdGhpcy5wbGFjZWhvbGRlci5wYXJlbnROb2RlKSkge1xyXG5cdFx0XHRcdHBhcmVudC5pbnNlcnRCZWZvcmUodGhpcy5wbGFjZWhvbGRlciwgdGFyZ2V0R3JvdXApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRvbkRyYWdNb3ZlKGUpIHtcclxuXHRcdGlmICghdGhpcy5kcmFnRWxlbWVudCkgcmV0dXJuO1xyXG5cclxuXHRcdGNvbnN0IHBhcmVudCA9IHRoaXMuZHJhZ0VsZW1lbnQucGFyZW50RWxlbWVudDtcclxuXHRcdGNvbnN0IHNjcm9sbFRvcCA9IHBhcmVudC5zY3JvbGxUb3A7XHJcblx0XHRjb25zdCBtb3VzZVkgPSBlLmNsaWVudFkgKyBzY3JvbGxUb3A7XHJcblxyXG5cdFx0bGV0IGNsb3Nlc3QgPSBudWxsO1xyXG5cdFx0bGV0IGNsb3Nlc3REaXN0YW5jZSA9IEluZmluaXR5O1xyXG5cclxuXHRcdFsuLi5wYXJlbnQuY2hpbGRyZW5dLmZvckVhY2goKGNoaWxkKSA9PiB7XHJcblx0XHRcdGlmIChjaGlsZCAhPT0gdGhpcy5kcmFnRWxlbWVudCAmJiBjaGlsZCAhPT0gdGhpcy5wbGFjZWhvbGRlcikge1xyXG5cdFx0XHRcdGNvbnN0IHJlY3QgPSBjaGlsZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHRcdFx0XHRjb25zdCBjaGlsZE1pZHBvaW50ID0gcmVjdC50b3AgKyBzY3JvbGxUb3AgKyByZWN0LmhlaWdodCAvIDI7XHJcblx0XHRcdFx0Y29uc3QgZGlzdGFuY2UgPSBNYXRoLmFicyhtb3VzZVkgLSBjaGlsZE1pZHBvaW50KTtcclxuXHJcblx0XHRcdFx0aWYgKGRpc3RhbmNlIDwgY2xvc2VzdERpc3RhbmNlKSB7XHJcblx0XHRcdFx0XHRjbG9zZXN0ID0gY2hpbGQ7XHJcblx0XHRcdFx0XHRjbG9zZXN0RGlzdGFuY2UgPSBkaXN0YW5jZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdGlmICh0aGlzLnBsYWNlaG9sZGVyKSB7XHJcblx0XHRcdGNvbnN0IGNsb25lID0gdGhpcy5wbGFjZWhvbGRlci5xdWVyeVNlbGVjdG9yKCcuY2xvbmUtY2xhc3MnKTtcclxuXHRcdFx0aWYgKGNsb25lKSB7XHJcblx0XHRcdFx0Y2xvbmUuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVkoJHtlLmNsaWVudFkgLSB0aGlzLnN0YXJ0WX1weClgO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGNsb3Nlc3QpIHtcclxuXHRcdFx0Y29uc3QgcmVjdCA9IGNsb3Nlc3QuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblx0XHRcdGNvbnN0IGNoaWxkTWlkcG9pbnQgPSByZWN0LnRvcCArIHNjcm9sbFRvcCArIHJlY3QuaGVpZ2h0IC8gMjtcclxuXHRcdFx0aWYgKG1vdXNlWSA8IGNoaWxkTWlkcG9pbnQpIHtcclxuXHRcdFx0XHRwYXJlbnQuaW5zZXJ0QmVmb3JlKHRoaXMucGxhY2Vob2xkZXIsIGNsb3Nlc3QpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHBhcmVudC5pbnNlcnRCZWZvcmUodGhpcy5wbGFjZWhvbGRlciwgY2xvc2VzdC5uZXh0U2libGluZyk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRsZXQgdGFyZ2V0R3JvdXAgPSB0aGlzLmZpbmRDbG9zZXN0R3JvdXBPclN0YW5kYWxvbmVBcmVhKGUuY2xpZW50WSk7XHJcblx0XHRpZiAodGFyZ2V0R3JvdXApIHtcclxuXHRcdFx0aWYgKHRhcmdldEdyb3VwLmNsYXNzTGlzdC5jb250YWlucygncmVnZXgtZ3JvdXAtY29udGFpbmVyJykpIHtcclxuXHRcdFx0XHRpZiAodGFyZ2V0R3JvdXApIHtcclxuXHRcdFx0XHRcdHRoaXMuYWRqdXN0UGxhY2Vob2xkZXJQb3NpdGlvbih0YXJnZXRHcm91cCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdGZpbmRSZWdleEluZGV4SW5Hcm91cChkcmFnRWxlbWVudCwgc291cmNlR3JvdXBJbmRleClcclxuXHR7XHJcblx0XHRjb25zdCBncm91cCA9IHRoaXMucGx1Z2luLnNldHRpbmdzLnJlZ2V4R3JvdXBzW3NvdXJjZUdyb3VwSW5kZXhdO1xyXG5cdFx0Y29uc3QgcmVnZXhLZXkgPSBkcmFnRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiaW5wdXRbcGxhY2Vob2xkZXI9J0Rlc2NyaXB0aW9uLUtleSddXCIpLnZhbHVlO1xyXG5cdFx0cmV0dXJuIGdyb3VwLnJlZ2V4ZXMuZmluZEluZGV4KHJlZ2V4ID0+IHJlZ2V4LmtleSA9PT0gcmVnZXhLZXkpO1xyXG5cdH1cclxuXHJcblx0b25EcmFnRW5kKCkge1xyXG5cdFx0aWYgKCF0aGlzLmRyYWdFbGVtZW50IHx8ICF0aGlzLnBsYWNlaG9sZGVyKVxyXG5cdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0dGhpcy5wbGFjZWhvbGRlci5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLmRyYWdFbGVtZW50LCB0aGlzLnBsYWNlaG9sZGVyKTtcclxuXHRcdHRoaXMuZHJhZ0VsZW1lbnQuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xyXG5cdFx0dGhpcy5wbGFjZWhvbGRlci5yZW1vdmUoKTtcclxuXHRcdHRoaXMuZHJhZ0VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImRyYWdnaW5nXCIpO1xyXG5cdFx0dGhpcy5kcmFnRWxlbWVudCA9IG51bGw7XHJcblx0XHR0aGlzLnBsYWNlaG9sZGVyID0gbnVsbDtcclxuXHJcblx0XHR0aGlzLnVwZGF0ZVJlZ2V4T3JkZXJGcm9tRE9NKCk7XHJcblx0XHR0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHR9XHJcblxyXG5cclxuXHRmaW5kR3JvdXBJbmRleChncm91cEVsZW1lbnQpIHtcclxuXHRcdGlmICghZ3JvdXBFbGVtZW50KSByZXR1cm4gLTE7XHJcblx0XHRjb25zdCBncm91cE5hbWUgPSBncm91cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5yZWdleC1ncm91cC1uYW1lXCIpLnRleHRDb250ZW50LnRyaW0oKTtcclxuXHRcdHJldHVybiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5yZWdleEdyb3Vwcy5maW5kSW5kZXgoZ3JvdXAgPT4gZ3JvdXAuZ3JvdXBOYW1lID09PSBncm91cE5hbWUpO1xyXG5cdH1cclxuXHJcblx0ZmluZFJlZ2V4UGFpckluZGV4KGRyYWdnZWRFbGVtZW50KSB7XHJcblx0XHRjb25zdCBrZXkgPSBkcmFnZ2VkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiaW5wdXRbcGxhY2Vob2xkZXI9J0Rlc2NyaXB0aW9uLUtleSddXCIpLnZhbHVlO1xyXG5cdFx0cmV0dXJuIHRoaXMucGx1Z2luLnNldHRpbmdzLnJlZ2V4UGFpcnMuZmluZEluZGV4KHBhaXIgPT4gcGFpci5rZXkgPT09IGtleSk7XHJcblx0fVxyXG5cclxuXHJcblx0c2V0SGlnaGxpZ2h0ZWQoaGlnaGxpZ2h0OiBib29sZWFuKSB7XHJcblx0XHR0aGlzLmlzSGlnaGxpdGVkID0gaGlnaGxpZ2h0O1xyXG5cdFx0aWYgKHRoaXMuc2F2ZUJ1dHRvbikge1xyXG5cdFx0XHR0aGlzLnNhdmVCdXR0b24uZGlzYWJsZWQgPSAhaGlnaGxpZ2h0O1xyXG5cdFx0XHRpZiAoaGlnaGxpZ2h0KSB7XHJcblx0XHRcdFx0dGhpcy5zYXZlQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJpcy1oaWdobGlnaHRcIik7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dGhpcy5zYXZlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoXCJpcy1oaWdobGlnaHRcIik7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGRpc3BsYXkoKSB7XHJcblx0XHRjb25zdCB7IGNvbnRhaW5lckVsIH0gPSB0aGlzO1xyXG5cdFx0Y29udGFpbmVyRWwuZW1wdHkoKTtcclxuXHRcdHRoaXMua2V5VmFsdWVDb250YWluZXIgPSBjb250YWluZXJFbC5jcmVhdGVFbChcImRpdlwiKTtcclxuXHRcdHRoaXMua2V5VmFsdWVDb250YWluZXIuY2xhc3NMaXN0LmFkZChcImZsZXgtY29sdW1uXCIpO1xyXG5cclxuXHRcdHRoaXMuY3JlYXRlU2V0dGluZ3NVSShjb250YWluZXJFbCk7XHJcblxyXG5cdFx0Y29uc3QgdmFsaWRhdGVDb250ZW50ID0gKGNvbnRlbnQpID0+IHtcclxuXHRcdFx0Y29uc3QgcmVnZXggPSAvXFxbXFxbKC4rPylcXF1cXF0vZztcclxuXHRcdFx0cmV0dXJuICFyZWdleC50ZXN0KGNvbnRlbnQpO1xyXG5cdFx0fTtcclxuXHJcblx0XHRjb25zdCBhcHBseVZhbGlkYXRpb25TdHlsZSA9ICh0ZXh0YXJlYSkgPT4ge1xyXG5cdFx0XHRpZiAodmFsaWRhdGVDb250ZW50KHRleHRhcmVhLnZhbHVlKSkge1xyXG5cdFx0XHRcdHRleHRhcmVhLmNsYXNzTGlzdC50b2dnbGUoXCJ2YWxpZC1jb250ZW50XCIsIHZhbGlkYXRlQ29udGVudCh0ZXh0YXJlYS52YWx1ZSkpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHRleHRhcmVhLmNsYXNzTGlzdC50b2dnbGUoXCJpbnZhbGlkLWNvbnRlbnRcIiwgIXZhbGlkYXRlQ29udGVudCh0ZXh0YXJlYS52YWx1ZSkpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIChldmVudCkgPT4ge1xyXG5cdFx0XHRjb25zdCBtb2RhbEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjb3Blbk1vZGFsQnV0dG9uXCIpO1xyXG5cclxuXHRcdFx0bW9kYWxCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRjb25zdCBtb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxcIik7XHJcblx0XHRcdFx0Y29uc3QgdGV4dGFyZWEgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKFwidGV4dGFyZWFcIik7XHJcblxyXG5cdFx0XHRcdGFwcGx5VmFsaWRhdGlvblN0eWxlKHRleHRhcmVhKTtcclxuXHJcblx0XHRcdFx0dGV4dGFyZWEuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdGFwcGx5VmFsaWRhdGlvblN0eWxlKHRleHRhcmVhKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHRsZXQgZHJhZ2dlZEVsZW1lbnQgPSBudWxsO1xyXG5cdFx0XHRsZXQgcGxhY2Vob2xkZXIgPSBudWxsO1xyXG5cclxuXHRcdFx0Y29uc3QgY3JlYXRlUGxhY2Vob2xkZXIgPSAoKSA9PiB7XHJcblx0XHRcdFx0Y29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblx0XHRcdFx0ZGl2LnN0eWxlLmhlaWdodCA9ICcycHgnO1xyXG5cdFx0XHRcdGRpdi5zdHlsZS5iYWNrZ3JvdW5kID0gJ2JsdWUnO1xyXG5cdFx0XHRcdGRpdi5zdHlsZS5tYXJnaW4gPSAnNXB4IDAnO1xyXG5cdFx0XHRcdHJldHVybiBkaXY7XHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZHJhZ2dhYmxlJykuZm9yRWFjaChlbGVtID0+IHtcclxuXHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRcdGRyYWdnZWRFbGVtZW50ID0gdGhpcztcclxuXHRcdFx0XHRcdHBsYWNlaG9sZGVyID0gY3JlYXRlUGxhY2Vob2xkZXIoKTtcclxuXHRcdFx0XHRcdGRyYWdnZWRFbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHBsYWNlaG9sZGVyLCBkcmFnZ2VkRWxlbWVudC5uZXh0U2libGluZyk7XHJcblx0XHRcdFx0XHRkcmFnZ2VkRWxlbWVudC5zdHlsZS5vcGFjaXR5ID0gJzAuNSc7XHJcblx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIChlKSA9PiB7XHJcblx0XHRcdFx0XHRpZiAoIWRyYWdnZWRFbGVtZW50KSByZXR1cm47XHJcblxyXG5cdFx0XHRcdFx0Y29uc3QgcmVjdCA9IHBsYWNlaG9sZGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cdFx0XHRcdFx0Y29uc3QgcGFyZW50ID0gcGxhY2Vob2xkZXIucGFyZW50Tm9kZTtcclxuXHRcdFx0XHRcdHBhcmVudC5jaGlsZE5vZGVzLmZvckVhY2goKGNoaWxkKSA9PiB7XHJcblx0XHRcdFx0XHRcdGlmIChjaGlsZCAhPT0gZHJhZ2dlZEVsZW1lbnQgJiYgY2hpbGQgIT09IHBsYWNlaG9sZGVyKSB7XHJcblx0XHRcdFx0XHRcdFx0Y29uc3QgY2hpbGRSZWN0ID0gY2hpbGQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblx0XHRcdFx0XHRcdFx0aWYgKGUuY2xpZW50WSA+IGNoaWxkUmVjdC50b3AgJiYgZS5jbGllbnRZIDwgY2hpbGRSZWN0LmJvdHRvbSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKGUuY2xpZW50WSA8IChjaGlsZFJlY3QudG9wICsgY2hpbGRSZWN0LmJvdHRvbSkgLyAyKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHBhcmVudC5pbnNlcnRCZWZvcmUocGxhY2Vob2xkZXIsIGNoaWxkKTtcclxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHBhcmVudC5pbnNlcnRCZWZvcmUocGxhY2Vob2xkZXIsIGNoaWxkLm5leHRTaWJsaW5nKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgKCkgPT4ge1xyXG5cdFx0XHRcdFx0aWYgKGRyYWdnZWRFbGVtZW50KSB7XHJcblx0XHRcdFx0XHRcdGRyYWdnZWRFbGVtZW50LnN0eWxlLm9wYWNpdHkgPSAnMSc7XHJcblx0XHRcdFx0XHRcdHBsYWNlaG9sZGVyLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGRyYWdnZWRFbGVtZW50LCBwbGFjZWhvbGRlcik7XHJcblx0XHRcdFx0XHRcdHBsYWNlaG9sZGVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocGxhY2Vob2xkZXIpO1xyXG5cdFx0XHRcdFx0XHRkcmFnZ2VkRWxlbWVudCA9IG51bGw7XHJcblx0XHRcdFx0XHRcdHBsYWNlaG9sZGVyID0gbnVsbDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHJcblx0XHRjb25zdCB2YWxpZGF0ZVJlZ2V4SW5wdXQgPSAoaW5wdXQpID0+IHtcclxuXHRcdFx0bGV0IGVycm9yTXNnID0gXCJcIjtcclxuXHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRjb25zdCByZWcgPSBuZXcgUmVnRXhwKGlucHV0LnZhbHVlKTtcclxuXHRcdFx0XHRjb25zdCBncm91cENvdW50ID0gKGlucHV0LnZhbHVlLm1hdGNoKC9cXCgoPyFcXD8pL2cpIHx8IFtdKS5sZW5ndGg7XHJcblx0XHRcdFx0aWYgKGdyb3VwQ291bnQgPiAxKSB7XHJcblx0XHRcdFx0XHRpbnB1dC5jbGFzc0xpc3QuYWRkKFwiaW52YWxpZC1ib3JkZXJcIik7XHJcblx0XHRcdFx0XHRlcnJvck1zZyA9IFwiTW9yZSB0aGFuIG9uZSBncm91cCBkZXRlY3RlZC5cIjtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0aW5wdXQuY2xhc3NMaXN0LnJlbW92ZShcImludmFsaWQtYm9yZGVyXCIpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBjYXRjaCAoZSkge1xyXG5cdFx0XHRcdGlucHV0LmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLWJvcmRlclwiKTtcclxuXHRcdFx0XHRlcnJvck1zZyA9IFwiSW52YWxpZCByZWdleC5cIjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y29uc3QgZXJyb3JFbGVtZW50ID0gaW5wdXQubmV4dFNpYmxpbmc7XHJcblx0XHRcdGlmIChlcnJvckVsZW1lbnQgJiYgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcInJlZ2V4LWVycm9yXCIpKSB7XHJcblx0XHRcdFx0ZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gZXJyb3JNc2c7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Y29uc3Qgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xyXG5cdFx0XHRcdHNwYW4uY2xhc3NOYW1lID0gXCJyZWdleC1lcnJvclwiO1xyXG5cdFx0XHRcdHNwYW4udGV4dENvbnRlbnQgPSBlcnJvck1zZztcclxuXHRcdFx0XHRpbnB1dC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzcGFuLCBpbnB1dC5uZXh0U2libGluZyk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0Y29uc3QgYWRkUmVnZXhUb0dyb3VwID0gKGdyb3VwQ29udGVudCwgcmVnZXgpID0+IHtcclxuXHRcdFx0Y29uc3Qgcm93ID0gZ3JvdXBDb250ZW50LmNyZWF0ZUVsKFwiZGl2XCIsIHtjbHM6ICdmbGV4LXJvdyd9KTtcclxuXHRcdFx0cm93LnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XHJcblx0XHRcdHJvdy5zdHlsZS5hbGlnbkl0ZW1zID0gJ2NlbnRlcic7XHJcblxyXG5cdFx0XHRjb25zdCBkcmFnSGFuZGxlID0gcm93LmNyZWF0ZUVsKFwic3BhblwiLCB7Y2xhc3NOYW1lOiBcImRyYWctaGFuZGxlXCIsIHRleHQ6IFwiXHUyNjMwXCJ9KTtcclxuXHRcdFx0Y29uc3QgYWN0aXZlQ2hlY2tib3ggPSByb3cuY3JlYXRlRWwoXCJpbnB1dFwiLCB7dHlwZTogXCJjaGVja2JveFwiLCBjbGFzc05hbWU6IFwiYWN0aXZlLWNoZWNrYm94XCJ9KTtcclxuXHRcdFx0YWN0aXZlQ2hlY2tib3guY2hlY2tlZCA9IHJlZ2V4LmlzQWN0aXZlO1xyXG5cclxuXHRcdFx0Y29uc3Qga2V5SW5wdXQgPSByb3cuY3JlYXRlRWwoXCJpbnB1dFwiLCB7XHJcblx0XHRcdFx0dHlwZTogXCJ0ZXh0XCIsXHJcblx0XHRcdFx0Y2xhc3NOYW1lOiBcImtleS1pbnB1dC1mbGV4XCIsXHJcblx0XHRcdFx0dmFsdWU6IHJlZ2V4LmtleSxcclxuXHRcdFx0XHRwbGFjZWhvbGRlcjogXCJEZXNjcmlwdGlvbi1LZXlcIlxyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdGNvbnN0IHZhbHVlSW5wdXQgPSByb3cuY3JlYXRlRWwoXCJpbnB1dFwiLCB7XHJcblx0XHRcdFx0dHlwZTogXCJ0ZXh0XCIsXHJcblx0XHRcdFx0Y2xhc3NOYW1lOiBcInZhbHVlLWlucHV0LWZsZXhcIixcclxuXHRcdFx0XHR2YWx1ZTogcmVnZXgucmVnZXgsXHJcblx0XHRcdFx0cGxhY2Vob2xkZXI6IFwiUmVnZXhwXCJcclxuXHRcdFx0fSk7XHJcblx0XHRcdHZhbHVlSW5wdXQuc3R5bGUuZmxleEdyb3cgPSAnMSc7XHJcblxyXG5cdFx0XHRjb25zdCBkZWxldGVCdXR0b24gPSByb3cuY3JlYXRlRWwoXCJidXR0b25cIiwge3RleHQ6IFwiRGVsZXRlXCIsIGNsYXNzTmFtZTogXCJkZWxldGUtYnV0dG9uXCJ9KTtcclxuXHJcblx0XHRcdGRlbGV0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG5cdFx0XHRcdHJvdy5yZW1vdmUoKTtcclxuXHRcdFx0XHR0aGlzLnVwZGF0ZVJlZ2V4T3JkZXJGcm9tRE9NKCk7XHJcblx0XHRcdFx0dGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0aWYgKGRyYWdIYW5kbGUpIHRoaXMubWFrZURyYWdnYWJsZShyb3csIGRyYWdIYW5kbGUpO1xyXG5cdFx0XHRrZXlJbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG5cdFx0XHRcdHRoaXMuc2V0SGlnaGxpZ2h0ZWQodHJ1ZSk7XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0dmFsdWVJbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG5cdFx0XHRcdHZhbGlkYXRlUmVnZXhJbnB1dCh2YWx1ZUlucHV0KTtcclxuXHRcdFx0XHR0aGlzLnNldEhpZ2hsaWdodGVkKHRydWUpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBhZGRHcm91cFVJID0gKGdyb3VwLCBpbmRleCkgPT4ge1xyXG5cclxuXHRcdFx0Y29uc3QgZ3JvdXBDb250YWluZXIgPSB0aGlzLmtleVZhbHVlQ29udGFpbmVyLmNyZWF0ZUVsKFwiZGl2XCIsIHsgY2xzOiAncmVnZXgtZ3JvdXAtY29udGFpbmVyIGdyb3VwLWNvbnRhaW5lcicgfSk7XHJcblx0XHRcdGdyb3VwQ29udGFpbmVyLnN0eWxlLmJvcmRlciA9IGdyb3VwLmlzQWN0aXZlID8gXCIxcHggc29saWQgdmFyKC0taW50ZXJhY3RpdmUtYWNjZW50KVwiIDogXCIxcHggc29saWQgI2NjY1wiO1xyXG5cdFx0XHRncm91cENvbnRhaW5lci5zdHlsZS5wYWRkaW5nID0gXCIxMHB4XCI7XHJcblx0XHRcdGdyb3VwQ29udGFpbmVyLnN0eWxlLm1hcmdpbkJvdHRvbSA9IFwiMTBweFwiO1xyXG5cclxuXHRcdFx0Y29uc3QgZ3JvdXBIZWFkZXIgPSBncm91cENvbnRhaW5lci5jcmVhdGVFbChcImRpdlwiLCB7IGNsczogXCJyZWdleC1ncm91cC1oZWFkZXJcIiB9KTtcclxuXHJcblx0XHRcdGNvbnN0IGdyb3VwTmFtZUFuZENvbnRyb2xzID0gZ3JvdXBIZWFkZXIuY3JlYXRlRGl2KHsgY2xzOiBcImdyb3VwLW5hbWUtYW5kLWNvbnRyb2xzXCIgfSk7XHJcblxyXG5cdFx0XHRjb25zdCBkcmFnSGFuZGxlID0gZ3JvdXBOYW1lQW5kQ29udHJvbHMuY3JlYXRlRWwoXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBcImRyYWctaGFuZGxlXCIsIHRleHQ6IFwiXFx1MjYzMFwiIH0pO1xyXG5cdFx0XHRjb25zdCBjb2xsYXBzZUljb24gPSBncm91cE5hbWVBbmRDb250cm9scy5jcmVhdGVFbChcInNwYW5cIiwgeyBjbHM6ICdjb2xsYXBzZS1pY29uJyB9KTtcclxuXHRcdFx0Y29sbGFwc2VJY29uLnRleHRDb250ZW50ID0gZ3JvdXAuaXNDb2xsYXBzZWQgPyAnXHUyNUJBJyA6ICdcdTI1QkMnO1xyXG5cclxuXHRcdFx0Y29uc3QgZ3JvdXBBY3RpdmVDaGVja2JveCA9IGdyb3VwTmFtZUFuZENvbnRyb2xzLmNyZWF0ZUVsKFwiaW5wdXRcIiwgeyB0eXBlOiAnY2hlY2tib3gnIH0pO1xyXG5cdFx0XHRncm91cEFjdGl2ZUNoZWNrYm94LmNoZWNrZWQgPSBncm91cC5pc0FjdGl2ZTtcclxuXHJcblx0XHRcdGNvbnN0IGdyb3VwTmFtZUVsID0gZ3JvdXBOYW1lQW5kQ29udHJvbHMuY3JlYXRlRWwoXCJzcGFuXCIsIHsgY2xzOiBcInJlZ2V4LWdyb3VwLW5hbWVcIiwgdGV4dDogZ3JvdXAuZ3JvdXBOYW1lIH0pO1xyXG5cdFx0XHRncm91cE5hbWVFbC5zZXRBdHRyaWJ1dGUoXCJjb250ZW50ZWRpdGFibGVcIiwgXCJ0cnVlXCIpO1xyXG5cclxuXHRcdFx0Y29uc3QgY29udHJvbEJ1dHRvbnMgPSBncm91cEhlYWRlci5jcmVhdGVEaXYoeyBjbHM6IFwiY29udHJvbC1idXR0b25zXCIgfSk7XHJcblxyXG5cdFx0XHRjb25zdCBhZGRSZWdleEJ1dHRvbiA9IGNvbnRyb2xCdXR0b25zLmNyZWF0ZUVsKFwiYnV0dG9uXCIsIHsgdGV4dDogXCJBZGQgUmVnZXhcIiwgY2xhc3NOYW1lOiBcImFkZC1yZWdleC1idXR0b25cIiB9KTtcclxuXHJcblx0XHRcdGNvbnN0IGRlbGV0ZUdyb3VwQnV0dG9uID0gY29udHJvbEJ1dHRvbnMuY3JlYXRlRWwoXCJidXR0b25cIiwgeyB0ZXh0OiBcIkRlbGV0ZSBHcm91cFwiLCBjbGFzc05hbWU6IFwiZGVsZXRlLWdyb3VwLWJ1dHRvblwiIH0pO1xyXG5cclxuXHRcdFx0Z3JvdXBBY3RpdmVDaGVja2JveC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsICgpID0+IHtcclxuXHRcdFx0XHRncm91cC5pc0FjdGl2ZSA9IGdyb3VwQWN0aXZlQ2hlY2tib3guY2hlY2tlZDtcclxuXHRcdFx0XHRncm91cENvbnRhaW5lci5zdHlsZS5ib3JkZXIgPSBncm91cC5pc0FjdGl2ZSA/IFwiMXB4IHNvbGlkIHZhcigtLWludGVyYWN0aXZlLWFjY2VudClcIiA6IFwiMXB4IHNvbGlkICNjY2NcIjtcclxuXHRcdFx0XHR0aGlzLnNldEhpZ2hsaWdodGVkKHRydWUpO1xyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdGNvbnN0IGdyb3VwQ29udGVudCA9IGdyb3VwQ29udGFpbmVyLmNyZWF0ZUVsKFwiZGl2XCIsIHsgY2xzOiAncmVnZXgtZ3JvdXAtY29udGVudCcgfSk7XHJcblx0XHRcdGdyb3VwQ29udGVudC5zdHlsZS5kaXNwbGF5ID0gZ3JvdXAuaXNDb2xsYXBzZWQgPyBcIm5vbmVcIiA6IFwiYmxvY2tcIjtcclxuXHJcblxyXG5cdFx0XHRhZGRSZWdleEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG5cdFx0XHRcdGdyb3VwLnJlZ2V4ZXMgPSBBcnJheS5mcm9tKGdyb3VwQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoXCIucmVnZXgtZ3JvdXAtY29udGVudCAuZmxleC1yb3dcIikpLm1hcChyb3cgPT4ge1xyXG5cdFx0XHRcdFx0Y29uc3Qga2V5SW5wdXQgPSByb3cucXVlcnlTZWxlY3RvcihcImlucHV0W3BsYWNlaG9sZGVyPSdEZXNjcmlwdGlvbi1LZXknXVwiKTtcclxuXHRcdFx0XHRcdGNvbnN0IHZhbHVlSW5wdXQgPSByb3cucXVlcnlTZWxlY3RvcihcImlucHV0W3BsYWNlaG9sZGVyPSdSZWdleHAnXVwiKTtcclxuXHRcdFx0XHRcdGNvbnN0IHJlZ2V4QWN0aXZlQ2hlY2tib3ggPSByb3cucXVlcnlTZWxlY3RvcihcImlucHV0W3R5cGU9J2NoZWNrYm94J11cIik7XHJcblx0XHRcdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdFx0XHRpc0FjdGl2ZTogcmVnZXhBY3RpdmVDaGVja2JveCA/IHJlZ2V4QWN0aXZlQ2hlY2tib3guY2hlY2tlZCA6IGZhbHNlLFxyXG5cdFx0XHRcdFx0XHRrZXk6IGtleUlucHV0ID8ga2V5SW5wdXQudmFsdWUgOiBcIlwiLFxyXG5cdFx0XHRcdFx0XHRyZWdleDogdmFsdWVJbnB1dCA/IHZhbHVlSW5wdXQudmFsdWUgOiBcIlwiXHJcblx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdGdyb3VwLnJlZ2V4ZXMudW5zaGlmdCh7IGlzQWN0aXZlOiB0cnVlLCBrZXk6IFwiTmV3IEtleVwiLCByZWdleDogXCJOZXcgUmVnZXhcIiB9KTtcclxuXHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5yZWdleEdyb3Vwc1tpbmRleF0gPSBncm91cDtcclxuXHRcdFx0XHR0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHR0aGlzLmRpc3BsYXkoKTtcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHRkZWxldGVHcm91cEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG5cdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnJlZ2V4R3JvdXBzLnNwbGljZShpbmRleCwgMSk7XHJcblx0XHRcdFx0dGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0dGhpcy5kaXNwbGF5KCk7XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0Y29sbGFwc2VJY29uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcblx0XHRcdFx0Z3JvdXAuaXNDb2xsYXBzZWQgPSAhZ3JvdXAuaXNDb2xsYXBzZWQ7XHJcblx0XHRcdFx0Z3JvdXBDb250ZW50LnN0eWxlLmRpc3BsYXkgPSBncm91cC5pc0NvbGxhcHNlZCA/IFwibm9uZVwiIDogXCJibG9ja1wiO1xyXG5cdFx0XHRcdGNvbGxhcHNlSWNvbi50ZXh0Q29udGVudCA9IGdyb3VwLmlzQ29sbGFwc2VkID8gJ1x1MjVCQScgOiAnXHUyNUJDJztcclxuXHRcdFx0XHR0aGlzLnNldEhpZ2hsaWdodGVkKHRydWUpO1xyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdGdyb3VwTmFtZUVsLmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIChldmVudCkgPT4ge1xyXG5cdFx0XHRcdGNvbnN0IG5ld05hbWUgPSBncm91cE5hbWVFbC50ZXh0Q29udGVudC50cmltKCk7XHJcblx0XHRcdFx0aWYgKG5ld05hbWUubGVuZ3RoID4gMCAmJiBuZXdOYW1lICE9PSBncm91cC5ncm91cE5hbWUpIHtcclxuXHRcdFx0XHRcdGdyb3VwLmdyb3VwTmFtZSA9IG5ld05hbWU7XHJcblx0XHRcdFx0XHR0aGlzLnVwZGF0ZVJlZ2V4T3JkZXJGcm9tRE9NKCk7XHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdG5ldyBOb3RpY2UoXCJHcm91cCBuYW1lIHVwZGF0ZWQuXCIpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRncm91cE5hbWVFbC50ZXh0Q29udGVudCA9IGdyb3VwLmdyb3VwTmFtZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0aWYgKGRyYWdIYW5kbGUpIHRoaXMubWFrZURyYWdnYWJsZShncm91cENvbnRhaW5lciwgZHJhZ0hhbmRsZSk7XHJcblxyXG5cdFx0XHRncm91cC5yZWdleGVzLmZvckVhY2gocmVnZXggPT4gYWRkUmVnZXhUb0dyb3VwKGdyb3VwQ29udGVudCwgcmVnZXgpKTtcclxuXHRcdH07XHJcblxyXG5cclxuXHRcdGNvbnN0IGJ1dHRvbnNDb250YWluZXIgPSBjb250YWluZXJFbC5jcmVhdGVEaXYoKTtcclxuXHRcdGJ1dHRvbnNDb250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xyXG5cdFx0YnV0dG9uc0NvbnRhaW5lci5zdHlsZS5qdXN0aWZ5Q29udGVudCA9IFwic3BhY2UtYmV0d2VlblwiO1xyXG5cdFx0YnV0dG9uc0NvbnRhaW5lci5zdHlsZS5tYXJnaW5Cb3R0b20gPSBcIjEwcHhcIjtcclxuXHJcblx0XHRjb25zdCBhZGRHcm91cEJ1dHRvbiA9IGJ1dHRvbnNDb250YWluZXIuY3JlYXRlRWwoXCJidXR0b25cIiwgeyB0ZXh0OiBcIkFkZCBHcm91cFwiIH0pO1xyXG5cdFx0YWRkR3JvdXBCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuXHRcdFx0Y29uc3QgbmV3R3JvdXAgPSB7XHJcblx0XHRcdFx0aXNBY3RpdmU6IHRydWUsXHJcblx0XHRcdFx0Z3JvdXBOYW1lOiBcIk5ldyBHcm91cFwiLFxyXG5cdFx0XHRcdHJlZ2V4ZXM6IFtdXHJcblx0XHRcdH07XHJcblx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnJlZ2V4R3JvdXBzLnB1c2gobmV3R3JvdXApO1xyXG5cdFx0XHR0aGlzLmRpc3BsYXkoKTtcclxuXHRcdFx0dGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHR9KTtcclxuXHJcblx0XHRjb25zdCBhZGRSZWdleFBhaXJCdXR0b24gPSBidXR0b25zQ29udGFpbmVyLmNyZWF0ZUVsKFwiYnV0dG9uXCIsIHsgdGV4dDogXCJBZGQgUmVnZXhwXCIgfSk7XHJcblx0XHRhZGRSZWdleFBhaXJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuXHRcdFx0Y29uc3QgbmV3UGFpciA9IHsgaXNBY3RpdmU6IGZhbHNlLCBrZXk6ICcnLCByZWdleDogJycgfTtcclxuXHRcdFx0dGhpcy5hZGRTdGFuZGFsb25lUmVnZXhVSShuZXdQYWlyKTtcclxuXHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MucmVnZXhQYWlycy5wdXNoKG5ld1BhaXIpO1xyXG5cdFx0XHR0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnJlZ2V4R3JvdXBzLmZvckVhY2goKGdyb3VwLCBpbmRleCkgPT4gYWRkR3JvdXBVSShncm91cCwgaW5kZXgpKTtcclxuXHJcblx0XHRpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MucmVnZXhQYWlycyAmJiBBcnJheS5pc0FycmF5KHRoaXMucGx1Z2luLnNldHRpbmdzLnJlZ2V4UGFpcnMpKSB7XHJcblx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnJlZ2V4UGFpcnMuZm9yRWFjaChwYWlyID0+IHRoaXMuYWRkU3RhbmRhbG9uZVJlZ2V4VUkocGFpcikpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMucmVuZGVyQmxhY2tsaXN0VUkoY29udGFpbmVyRWwpXHJcblxyXG5cdH1cclxuXHRwcml2YXRlIHJlbmRlckJsYWNrbGlzdFVJKGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudCkge1xyXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoJ2gzJywge3RleHQ6ICdCbGFja2xpc3QgTWFuYWdlbWVudCd9KTtcclxuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdwJywge3RleHQ6ICdFbnRlciBpdGVtcyB0byBibGFja2xpc3QuIFRoZXNlIGl0ZW1zIHdpbGwgbm90IGJlIHByb2Nlc3NlZC4nfSk7XHJcblxyXG5cdFx0Y29uc3QgYmxhY2tsaXN0Q29udGFpbmVyID0gY29udGFpbmVyRWwuY3JlYXRlRGl2KCk7XHJcblx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5ibGFja2xpc3QuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcclxuXHRcdFx0Y29uc3QgaXRlbURpdiA9IGJsYWNrbGlzdENvbnRhaW5lci5jcmVhdGVEaXYoKTtcclxuXHRcdFx0aXRlbURpdi50ZXh0Q29udGVudCA9IGl0ZW07XHJcblxyXG5cdFx0XHRjb25zdCByZW1vdmVCdXR0b24gPSBpdGVtRGl2LmNyZWF0ZUVsKCdidXR0b24nLCB7dGV4dDogJ1JlbW92ZSd9KTtcclxuXHRcdFx0cmVtb3ZlQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XHJcblx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuYmxhY2tsaXN0LnNwbGljZShpbmRleCwgMSk7XHJcblx0XHRcdFx0dGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCkudGhlbigoKSA9PiB0aGlzLmRpc3BsYXkoKSk7XHJcblx0XHRcdH07XHJcblx0XHR9KTtcclxuXHJcblx0XHRjb25zdCBhZGRJdGVtSW5wdXQgPSBjb250YWluZXJFbC5jcmVhdGVFbCgnaW5wdXQnLCB7dHlwZTogJ3RleHQnfSk7XHJcblx0XHRjb25zdCBhZGRJdGVtQnV0dG9uID0gY29udGFpbmVyRWwuY3JlYXRlRWwoJ2J1dHRvbicsIHt0ZXh0OiAnQWRkIHRvIEJsYWNrbGlzdCd9KTtcclxuXHRcdGFkZEl0ZW1CdXR0b24ub25jbGljayA9ICgpID0+IHtcclxuXHRcdFx0aWYgKGFkZEl0ZW1JbnB1dC52YWx1ZSAmJiAhdGhpcy5wbHVnaW4uc2V0dGluZ3MuYmxhY2tsaXN0LmluY2x1ZGVzKGFkZEl0ZW1JbnB1dC52YWx1ZSkpIHtcclxuXHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5ibGFja2xpc3QucHVzaChhZGRJdGVtSW5wdXQudmFsdWUpO1xyXG5cdFx0XHRcdGFkZEl0ZW1JbnB1dC52YWx1ZSA9ICcnO1xyXG5cdFx0XHRcdHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpLnRoZW4oKCkgPT4gdGhpcy5kaXNwbGF5KCkpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxuXHJcblx0Y3JlYXRlU2V0dGluZ3NVSShjb250YWluZXJFbCkge1xyXG5cdFx0Ly8gSWdub3JlIExpbmtzIFRvZ2dsZVxyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdC5zZXROYW1lKFwiSWdub3JlIGxpbmtzXCIpXHJcblx0XHRcdC5hZGRUb2dnbGUodG9nZ2xlID0+IHtcclxuXHRcdFx0XHR0b2dnbGVcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pZ25vcmVMaW5rcyA/PyB0cnVlKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jIHZhbHVlID0+IHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuaWdub3JlTGlua3MgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdFx0LnNldFRvb2x0aXAoXCJEbyBub3QgbW9kaWZ5IExpbmtzLCBwcmV2ZW50aW5nIHRvIGhhbmRsZSB0aGUgc2FtZSBkYXRhIG92ZXIgYW5kIG92ZXIgYWdhaW4uXCIpO1xyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoXCJJZ25vcmUgVVJMc1wiKVxyXG5cdFx0XHQuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB7XHJcblx0XHRcdFx0dG9nZ2xlXHJcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaWdub3JlVVJMcyA/PyB0cnVlKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jIHZhbHVlID0+IHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuaWdub3JlVVJMcyA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHQuc2V0VG9vbHRpcChcIkRvIG5vdCBtb2RpZnkgVVJMcywgc28gdGhleSBkbyBrZWVwIHdvcmtpbmcuXCIpO1xyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoXCJEZWZhbmcgVVJMc1wiKVxyXG5cdFx0XHQuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB7XHJcblx0XHRcdFx0dG9nZ2xlXHJcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVmYW5nVVJMcyA/PyB0cnVlKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jIHZhbHVlID0+IHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVmYW5nVVJMcyA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHQuc2V0VG9vbHRpcChcIkNvbnZlcnQgaHR0cHNbOl0vLyAtPiBodHRwczovL1wiKTtcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdC5zZXROYW1lKFwiSWdub3JlIGNvZGUgYmxvY2tzXCIpXHJcblx0XHRcdC5hZGRUb2dnbGUodG9nZ2xlID0+IHtcclxuXHRcdFx0XHR0b2dnbGVcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pZ25vcmVDb2RlQmxvY2tzID8/IGZhbHNlKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jIHZhbHVlID0+IHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuaWdub3JlQ29kZUJsb2NrcyA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHQuc2V0VG9vbHRpcChcIklnbm9yZSBjb250ZW50IHdpdGhpbiBjb2RlIGJsb2NrcyB3aGVuIGxpbmtpbmcgcmVnZXhlcy5cIik7XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZShcIlNhdmVcIilcclxuXHRcdFx0LmFkZEJ1dHRvbihidXR0b24gPT4ge1xyXG5cdFx0XHRcdGJ1dHRvbi5zZXRCdXR0b25UZXh0KFwiU2F2ZVwiKVxyXG5cdFx0XHRcdFx0Lm9uQ2xpY2soKCkgPT4ge1xyXG5cdFx0XHRcdFx0XHR0aGlzLnNhdmVDaGFuZ2VzKCk7XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR0aGlzLnNhdmVCdXR0b24gPSBidXR0b24uYnV0dG9uRWw7XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZShcIlJlc2V0IGRlZmF1bHRzXCIpXHJcblx0XHRcdC5hZGRCdXR0b24oYnV0dG9uID0+IHtcclxuXHRcdFx0XHRidXR0b24uc2V0QnV0dG9uVGV4dChcIlJlc2V0XCIpXHJcblx0XHRcdFx0XHQub25DbGljaygoKSA9PiB7XHJcblx0XHRcdFx0XHRcdGNvbnN0IHJlc2V0Q29uZmlybSA9IGNvbmZpcm0oXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcmVzZXQgdG8gZGVmYXVsdCBzZXR0aW5ncz9cIik7XHJcblx0XHRcdFx0XHRcdGlmIChyZXNldENvbmZpcm0pIHtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLnJlc2V0VG9EZWZhdWx0cygpO1xyXG5cdFx0XHRcdFx0XHRcdGlmICh0aGlzLnBsdWdpbi5fc2V0dGluZ1RhYlJlZmVyZW5jZSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uX3NldHRpbmdUYWJSZWZlcmVuY2UuZGlzcGxheSgpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdH0pO1xyXG5cdH1cclxuXHJcblxyXG5cdHJlc2V0VG9EZWZhdWx0cygpIHtcclxuXHRcdHRoaXMucGx1Z2luLnNldHRpbmdzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShERUZBVUxUX1NFVFRJTkdTKSk7XHJcblxyXG5cdFx0dGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCkudGhlbigoKSA9PiB7XHJcblx0XHRcdG5ldyBOb3RpY2UoXCJTZXR0aW5ncyBoYXZlIGJlZW4gcmVzZXQgdG8gZGVmYXVsdHMuXCIpO1xyXG5cdFx0XHR0aGlzLmRpc3BsYXkoKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBhZGRTdGFuZGFsb25lUmVnZXhVSShwYWlyKSB7XHJcblx0XHRjb25zdCByb3cgPSB0aGlzLmtleVZhbHVlQ29udGFpbmVyLmNyZWF0ZUVsKFwiZGl2XCIsIHsgY2xzOiAnZmxleC1yb3cgc3RhbmRhbG9uZS1yZWdleC1yb3cnIH0pO1xyXG5cdFx0cm93LnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XHJcblx0XHRyb3cuc3R5bGUuYWxpZ25JdGVtcyA9ICdjZW50ZXInO1xyXG5cclxuXHRcdGNvbnN0IGRyYWdIYW5kbGUgPSByb3cuY3JlYXRlRWwoXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBcImRyYWctaGFuZGxlXCIsIHRleHQ6IFwiXHUyNjMwXCIgfSk7XHJcblxyXG5cdFx0Y29uc3QgYWN0aXZlQ2hlY2tib3ggPSByb3cuY3JlYXRlRWwoXCJpbnB1dFwiLCB7IHR5cGU6IFwiY2hlY2tib3hcIiwgY2xhc3NOYW1lOiBcImFjdGl2ZS1jaGVja2JveFwiIH0pO1xyXG5cdFx0YWN0aXZlQ2hlY2tib3guY2hlY2tlZCA9IHBhaXIuaXNBY3RpdmU7XHJcblxyXG5cdFx0Y29uc3Qga2V5SW5wdXQgPSByb3cuY3JlYXRlRWwoXCJpbnB1dFwiLCB7XHJcblx0XHRcdHR5cGU6IFwidGV4dFwiLFxyXG5cdFx0XHRjbGFzc05hbWU6IFwia2V5LWlucHV0LWZsZXhcIixcclxuXHRcdFx0dmFsdWU6IHBhaXIua2V5LFxyXG5cdFx0XHRwbGFjZWhvbGRlcjogXCJEZXNjcmlwdGlvbi1LZXlcIlxyXG5cdFx0fSk7XHJcblxyXG5cdFx0Y29uc3QgdmFsdWVJbnB1dCA9IHJvdy5jcmVhdGVFbChcImlucHV0XCIsIHtcclxuXHRcdFx0dHlwZTogXCJ0ZXh0XCIsXHJcblx0XHRcdGNsYXNzTmFtZTogXCJ2YWx1ZS1pbnB1dC1mbGV4XCIsXHJcblx0XHRcdHZhbHVlOiBwYWlyLnJlZ2V4LFxyXG5cdFx0XHRwbGFjZWhvbGRlcjogXCJSZWdleHBcIlxyXG5cdFx0fSk7XHJcblx0XHR2YWx1ZUlucHV0LnN0eWxlLmZsZXhHcm93ID0gJzEnO1xyXG5cclxuXHRcdGNvbnN0IGRlbGV0ZUJ1dHRvbiA9IHJvdy5jcmVhdGVFbChcImJ1dHRvblwiLCB7IHRleHQ6IFwiRGVsZXRlXCIsIGNsYXNzTmFtZTogXCJkZWxldGUtYnV0dG9uXCIgfSk7XHJcblx0XHRkZWxldGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuXHRcdFx0cm93LnJlbW92ZSgpO1xyXG5cdFx0XHR0aGlzLnVwZGF0ZVJlZ2V4T3JkZXJGcm9tRE9NKCk7XHJcblx0XHRcdHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0Y29uc3QgaW5wdXRzQ29udGFpbmVyID0gcm93LmNyZWF0ZURpdih7IGNsczogJ2lucHV0cy1jb250YWluZXInIH0pO1xyXG5cdFx0aW5wdXRzQ29udGFpbmVyLmFwcGVuZChrZXlJbnB1dCwgdmFsdWVJbnB1dCwgZGVsZXRlQnV0dG9uKTtcclxuXHRcdGlucHV0c0NvbnRhaW5lci5zdHlsZS5mbGV4R3JvdyA9IFwiMVwiO1xyXG5cdFx0aW5wdXRzQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcclxuXHRcdGlucHV0c0NvbnRhaW5lci5zdHlsZS5qdXN0aWZ5Q29udGVudCA9IFwic3BhY2UtYmV0d2VlblwiO1xyXG5cdFx0aW5wdXRzQ29udGFpbmVyLnN0eWxlLmFsaWduSXRlbXMgPSBcImNlbnRlclwiO1xyXG5cclxuXHRcdGlmIChkcmFnSGFuZGxlKSB0aGlzLm1ha2VEcmFnZ2FibGUocm93LCBkcmFnSGFuZGxlKTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbGF4UGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcclxuXHRzZXR0aW5nczogUmVsYXhQbHVnaW5TZXR0aW5ncztcclxuXHRfc2V0dGluZ1RhYlJlZmVyZW5jZTogUmVsYXhTZXR0aW5nVGFiO1xyXG5cclxuXHRhc3luYyBvbmxvYWQoKSB7XHJcblx0XHRhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xyXG5cclxuXHRcdHRoaXMuX3NldHRpbmdUYWJSZWZlcmVuY2UgPSBuZXcgUmVsYXhTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKTtcclxuXHJcblx0XHR0aGlzLmFkZFNldHRpbmdUYWIodGhpcy5fc2V0dGluZ1RhYlJlZmVyZW5jZSk7XHJcblx0XHR0aGlzLmFkZENvbW1hbmQoe2lkOiBcInJlbGF4XCIsIG5hbWU6IFwiUi5FLkwuQS5YLlwiLCBjYWxsYmFjazogKCkgPT4gdGhpcy5hZGRCcmFja2V0cygpfSk7XHJcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xyXG5cdFx0XHRpZDogXCJyZWxheC1hZGQtdG8tYmxhY2tsaXN0XCIsXHJcblx0XHRcdG5hbWU6IFwiUkVMQVg6IEFkZCB0byBibGFja2xpc3RcIixcclxuXHRcdFx0Y2FsbGJhY2s6ICgpID0+IHRoaXMuYWRkVG9CbGFja2xpc3QoKVxyXG5cdFx0fSk7XHJcblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQoXHJcblx0XHRcdHRoaXMuYXBwLndvcmtzcGFjZS5vbihcImZpbGUtbWVudVwiLCAobWVudSwgZmlsZSkgPT4ge1xyXG5cdFx0XHRcdG1lbnUuYWRkSXRlbSgoaXRlbSkgPT4ge1xyXG5cdFx0XHRcdFx0aXRlbVxyXG5cdFx0XHRcdFx0XHQuc2V0VGl0bGUoXCJSLkUuTC5BLlguXCIpXHJcblx0XHRcdFx0XHRcdC5zZXRJY29uKFwiY3VybHktYnJhY2VzXCIpXHJcblx0XHRcdFx0XHRcdC5vbkNsaWNrKGFzeW5jICgpID0+IHtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLmFkZEJyYWNrZXRzKCk7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9KVxyXG5cdFx0KTtcclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudChcclxuXHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLm9uKFwiZWRpdG9yLW1lbnVcIiwgKG1lbnUsIGVkaXRvciwgdmlldykgPT4ge1xyXG5cdFx0XHRcdG1lbnUuYWRkSXRlbSgoaXRlbSkgPT4ge1xyXG5cdFx0XHRcdFx0aXRlbVxyXG5cdFx0XHRcdFx0XHQuc2V0VGl0bGUoXCJSLkUuTC5BLlguXCIpXHJcblx0XHRcdFx0XHRcdC5zZXRJY29uKFwiY3VybHktYnJhY2VzXCIpXHJcblx0XHRcdFx0XHRcdC5vbkNsaWNrKGFzeW5jICgpID0+IHtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLmFkZEJyYWNrZXRzKCk7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9KVxyXG5cdFx0KTtcclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudChcclxuXHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLm9uKFwiZWRpdG9yLW1lbnVcIiwgKG1lbnUsIGVkaXRvciwgdmlldykgPT4ge1xyXG5cdFx0XHRcdG1lbnUuYWRkSXRlbSgoaXRlbSkgPT4ge1xyXG5cdFx0XHRcdFx0aXRlbVxyXG5cdFx0XHRcdFx0XHQuc2V0VGl0bGUoXCJSRUxBWDogUmVtb3ZlIGFsbCBicmFja2V0c1wiKVxyXG5cdFx0XHRcdFx0XHQuc2V0SWNvbihcImN1cmx5LWJyYWNlc1wiKVxyXG5cdFx0XHRcdFx0XHQub25DbGljayhhc3luYyAoKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0dGhpcy5yZW1vdmVCcmFja2V0cygpO1xyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSlcclxuXHRcdCk7XHJcblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQoXHJcblx0XHRcdHRoaXMuYXBwLndvcmtzcGFjZS5vbihcImVkaXRvci1tZW51XCIsIChtZW51LCBmaWxlKSA9PiB7XHJcblx0XHRcdFx0bWVudS5hZGRJdGVtKChpdGVtKSA9PiB7XHJcblx0XHRcdFx0XHRpdGVtXHJcblx0XHRcdFx0XHRcdC5zZXRUaXRsZShcIlJFTEFYOiBibGFja2xpc3Qgc2VsZWN0ZWQgbGlua3NcIilcclxuXHRcdFx0XHRcdFx0LnNldEljb24oXCJjdXJseS1icmFjZXNcIilcclxuXHRcdFx0XHRcdFx0Lm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdHRoaXMuYWRkVG9CbGFja2xpc3QoKTtcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0pXHJcblx0XHQpO1xyXG5cdFx0dGhpcy5yZWdpc3RlckV2ZW50KHRoaXMuYXBwLndvcmtzcGFjZS5vbihcInNldHRpbmdzOm9wZW5lZFwiLCAoKSA9PiB7XHJcblx0XHRcdGlmICh0aGlzLl9zZXR0aW5nVGFiUmVmZXJlbmNlKSB7XHJcblx0XHRcdFx0dGhpcy5fc2V0dGluZ1RhYlJlZmVyZW5jZS5zZXRIaWdobGlnaHRlZChmYWxzZSk7XHJcblx0XHRcdH1cclxuXHRcdH0pKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIHJlc2V0VG9EZWZhdWx0cygpIHtcclxuXHRcdHRoaXMuc2V0dGluZ3MgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KERFRkFVTFRfU0VUVElOR1MpKTtcclxuXHRcdGF3YWl0IHRoaXMuc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRuZXcgTm90aWNlKFwiU2V0dGluZ3MgaGF2ZSBiZWVuIHJlc2V0IHRvIGRlZmF1bHRzLlwiKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcclxuXHRcdHRyeSB7XHJcblx0XHRcdGNvbnN0IGxvYWRlZFNldHRpbmdzID0gYXdhaXQgdGhpcy5sb2FkRGF0YSgpO1xyXG5cdFx0XHRpZiAobG9hZGVkU2V0dGluZ3MpIHtcclxuXHRcdFx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgbG9hZGVkU2V0dGluZ3MpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIk5vIHNldHRpbmdzIGxvYWRlZFwiKTtcclxuXHRcdFx0fVxyXG5cdFx0fSBjYXRjaCAoZSkge1xyXG5cdFx0XHRjb25zb2xlLmVycm9yKFwiRXJyb3IgbG9hZGluZyBzZXR0aW5nczpcIiwgZSk7XHJcblx0XHRcdGF3YWl0IHRoaXMucmVzZXRUb0RlZmF1bHRzKCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHJcblx0b251bmxvYWQoKSB7XHJcblx0fVxyXG5cclxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XHJcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xyXG5cdFx0bmV3IE5vdGljZShcIkNvbmZpZyBzYXZlZCFcIik7XHJcblx0fVxyXG5cclxuXHRyZW1vdmVCcmFja2V0c0luU2VsZWN0aW9uKGNvbnRlbnQ6IHN0cmluZyk6IHN0cmluZyB7XHJcblx0XHRyZXR1cm4gY29udGVudC5yZXBsYWNlKC8oW14hXSlcXFtcXFsoW15cXF1dKylcXF1cXF0vZywgXCIkMSQyXCIpO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgYWRkQnJhY2tldHNGb3JGaWxlKG5vdGVGaWxlUGF0aCA9IFwiXCIpIHtcclxuXHRcdGF3YWl0IHRoaXMucHJvY2Vzc0ZpbGVDb250ZW50KG5vdGVGaWxlUGF0aCwgKGNvbnRlbnQpID0+IHRoaXMudXBkYXRlU2VsZWN0aW9uKGNvbnRlbnQsIHRoaXMuc2V0dGluZ3MpKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIHJlbW92ZUJyYWNrZXRzaW5GaWxlKG5vdGVGaWxlUGF0aCA9IFwiXCIpIHtcclxuXHRcdGF3YWl0IHRoaXMucHJvY2Vzc0ZpbGVDb250ZW50KG5vdGVGaWxlUGF0aCwgdGhpcy5yZW1vdmVCcmFja2V0c0luU2VsZWN0aW9uKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIHByb2Nlc3NGaWxlQ29udGVudChub3RlRmlsZVBhdGg6IHN0cmluZywgY29udGVudFByb2Nlc3NvcjogKGNvbnRlbnQ6IHN0cmluZykgPT4gc3RyaW5nLCBub3RlRmlsZT86IFRGaWxlKTogUHJvbWlzZTx2b2lkPiB7XHJcblx0XHRpZiAoIW5vdGVGaWxlICYmIG5vdGVGaWxlUGF0aCAhPT0gXCJcIikge1xyXG5cdFx0XHRub3RlRmlsZSA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChub3RlRmlsZVBhdGgpIGFzIFRGaWxlO1xyXG5cdFx0XHRpZiAoIW5vdGVGaWxlKSB7XHJcblx0XHRcdFx0bmV3IE5vdGljZShgTm8gZmlsZSBmb3VuZCBhdCB0aGUgZ2l2ZW4gcGF0aDogJHtub3RlRmlsZVBhdGh9YCk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2UgaWYgKCFub3RlRmlsZSkge1xyXG5cdFx0XHRjb25zdCBsZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUxlYWYgfHwgdGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYoKTtcclxuXHRcdFx0bm90ZUZpbGUgPSBsZWFmLnZpZXcgaW5zdGFuY2VvZiBNYXJrZG93blZpZXcgPyBsZWFmLnZpZXcuZmlsZSA6IG51bGw7XHJcblxyXG5cdFx0XHRpZiAoIW5vdGVGaWxlKSB7XHJcblx0XHRcdFx0bmV3IE5vdGljZSgnTm8gZmlsZSBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBhIG1hcmtkb3duIGZpbGUgZnJvbSB0aGUgZWRpdG9yIG9yIG5hdmlnYXRpb24gYmFyLicpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICghKG5vdGVGaWxlIGluc3RhbmNlb2YgVEZpbGUpKSB7XHJcblx0XHRcdG5ldyBOb3RpY2UoJ1NlbGVjdGVkIGl0ZW0gaXMgbm90IGEgdmFsaWQgdGV4dCBmaWxlLicpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IGZpbGVDb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChub3RlRmlsZSk7XHJcblx0XHRjb25zdCB1cGRhdGVkQ29udGVudCA9IGNvbnRlbnRQcm9jZXNzb3IoZmlsZUNvbnRlbnQpO1xyXG5cdFx0YXdhaXQgdGhpcy5hcHAudmF1bHQubW9kaWZ5KG5vdGVGaWxlLCB1cGRhdGVkQ29udGVudCk7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIHJlbmRlckJsYWNrbGlzdFVJKGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudCkge1xyXG5cdFx0Y29uc3QgYmxhY2tsaXN0U2VjdGlvbiA9IGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdkaXYnKTtcclxuXHRcdGJsYWNrbGlzdFNlY3Rpb24uY3JlYXRlRWwoJ2gzJywgeyB0ZXh0OiAnQmxhY2tsaXN0JyB9KTtcclxuXHRcdGNvbnN0IGxpc3RDb250YWluZXIgPSBibGFja2xpc3RTZWN0aW9uLmNyZWF0ZUVsKCdkaXYnKTtcclxuXHJcblx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5ibGFja2xpc3QuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcclxuXHRcdFx0Y29uc3QgaXRlbUVsID0gbGlzdENvbnRhaW5lci5jcmVhdGVFbCgnZGl2Jyk7XHJcblx0XHRcdGl0ZW1FbC5jcmVhdGVFbCgnc3BhbicsIHsgdGV4dDogaXRlbSB9KTtcclxuXHRcdFx0Y29uc3QgcmVtb3ZlQnV0dG9uID0gaXRlbUVsLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdSZW1vdmUnIH0pO1xyXG5cdFx0XHRyZW1vdmVCdXR0b24ub25jbGljayA9ICgpID0+IHtcclxuXHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5ibGFja2xpc3Quc3BsaWNlKGluZGV4LCAxKTtcclxuXHRcdFx0XHR0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKS50aGVuKCgpID0+IHRoaXMuZGlzcGxheSgpKTtcclxuXHRcdFx0fTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdGNvbnN0IGFkZEl0ZW1JbnB1dCA9IGJsYWNrbGlzdFNlY3Rpb24uY3JlYXRlRWwoJ2lucHV0JywgeyB0eXBlOiAndGV4dCcgfSk7XHJcblx0XHRjb25zdCBhZGRJdGVtQnV0dG9uID0gYmxhY2tsaXN0U2VjdGlvbi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnQWRkJyB9KTtcclxuXHRcdGFkZEl0ZW1CdXR0b24ub25jbGljayA9ICgpID0+IHtcclxuXHRcdFx0aWYgKGFkZEl0ZW1JbnB1dC52YWx1ZSkge1xyXG5cdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmJsYWNrbGlzdC5wdXNoKGFkZEl0ZW1JbnB1dC52YWx1ZSk7XHJcblx0XHRcdFx0dGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCkudGhlbigoKSA9PiB0aGlzLmRpc3BsYXkoKSk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0fVxyXG5cdHVwZGF0ZVNlbGVjdGlvbihjb250ZW50OiBzdHJpbmcsIHNldHRpbmdzOiBSZWxheFBsdWdpblNldHRpbmdzKTogc3RyaW5nIHtcclxuXHRcdGNvbnN0IHVybFJlZ2V4ID0gLyhodHRwcz86XFwvXFwvW15cXHNdKykvZztcclxuXHRcdGNvbnN0IGV4Y2x1ZGVkRXh0ZW5zaW9ucyA9IC9cXC4oZXhlfGxua3x4bHN8bWR8c2h8ZWxmfGJpbnx0bXB8ZG9jfG9kdHxkb2N4fHBkZnx5YXJhfGRsbHx0eHQpJC87XHJcblx0XHRjb25zdCBmYW5nTWFwID0ge1xyXG5cdFx0XHRcIlsuXVwiOiBcIi5cIixcclxuXHRcdFx0XCJbOl1cIjogXCI6XCJcclxuXHRcdH07XHJcblx0XHRpZiAoc2V0dGluZ3MuZGVmYW5nVVJMcykge1xyXG5cdFx0XHRjb250ZW50ID0gY29udGVudC5yZXBsYWNlKC9cXFtcXC5cXF18XFxbXFw6XFxdL2csIGNoYXIgPT4gZmFuZ01hcFtjaGFyXSk7XHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IHVwZGF0ZWRUZXh0ID0gXCJcIjtcclxuXHRcdGNvbnN0IGxpbmVzID0gY29udGVudC5zcGxpdChcIlxcblwiKTtcclxuXHRcdGxldCBpbkNvZGVCbG9jayA9IGZhbHNlO1xyXG5cclxuXHRcdGZ1bmN0aW9uIGNvbnRhaW5zVmFsaWRMaW5rKGxpbmU6IHN0cmluZywgbWF0Y2g6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG5cdFx0XHRjb25zdCBsaW5rUmVnZXggPSAvXFxbXFxbLio/XFxdXFxdL2c7XHJcblx0XHRcdGxldCByZXN1bHQ7XHJcblx0XHRcdHdoaWxlICgocmVzdWx0ID0gbGlua1JlZ2V4LmV4ZWMobGluZSkpICE9PSBudWxsKSB7XHJcblx0XHRcdFx0aWYgKHJlc3VsdC5pbmRleCA8PSBsaW5lLmluZGV4T2YobWF0Y2gpICYmIGxpbmtSZWdleC5sYXN0SW5kZXggPj0gbGluZS5pbmRleE9mKG1hdGNoKSArIG1hdGNoLmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHRsaW5lcy5mb3JFYWNoKChsaW5lLCBpbmRleCkgPT4ge1xyXG5cdFx0XHRpZiAoc2V0dGluZ3MuaWdub3JlQ29kZUJsb2NrcyAmJiBsaW5lLnRyaW0oKS5zdGFydHNXaXRoKFwiYGBgXCIpKSB7XHJcblx0XHRcdFx0aW5Db2RlQmxvY2sgPSAhaW5Db2RlQmxvY2s7XHJcblx0XHRcdFx0dXBkYXRlZFRleHQgKz0gbGluZSArIFwiXFxuXCI7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoaW5Db2RlQmxvY2spIHtcclxuXHRcdFx0XHR1cGRhdGVkVGV4dCArPSBsaW5lICsgXCJcXG5cIjtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGxldCBtb2RpZmllZExpbmUgPSBsaW5lO1xyXG5cclxuXHRcdFx0c2V0dGluZ3MucmVnZXhHcm91cHMuZm9yRWFjaChncm91cCA9PiB7XHJcblx0XHRcdFx0aWYgKCFncm91cC5pc0FjdGl2ZSkgcmV0dXJuO1xyXG5cclxuXHRcdFx0XHRncm91cC5yZWdleGVzLmZvckVhY2goKHtpc0FjdGl2ZSwgcmVnZXh9KSA9PiB7XHJcblx0XHRcdFx0XHRpZiAoIWlzQWN0aXZlKSByZXR1cm47XHJcblxyXG5cdFx0XHRcdFx0Y29uc3QgY29tcGlsZWRSZWdleCA9IG5ldyBSZWdFeHAocmVnZXgsIFwiZ1wiKTtcclxuXHRcdFx0XHRcdG1vZGlmaWVkTGluZSA9IG1vZGlmaWVkTGluZS5yZXBsYWNlKGNvbXBpbGVkUmVnZXgsIChtYXRjaCwgLi4uYXJncykgPT4ge1xyXG5cdFx0XHRcdFx0XHRjb25zdCBncm91cHMgPSBhcmdzLnNsaWNlKDAsIC0yKS5maWx0ZXIoZyA9PiBnICE9PSB1bmRlZmluZWQpO1xyXG5cdFx0XHRcdFx0XHRjb25zdCBjYXB0dXJlZFZhbHVlID0gZ3JvdXBzWzBdO1xyXG5cdFx0XHRcdFx0XHRpZiAoc2V0dGluZ3MuYmxhY2tsaXN0LmluY2x1ZGVzKG1hdGNoKSkge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiBtYXRjaDtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRpZiAoIWNhcHR1cmVkVmFsdWUpIHJldHVybiBtYXRjaDtcclxuXHJcblx0XHRcdFx0XHRcdGlmIChzZXR0aW5ncy5pZ25vcmVMaW5rcyAmJiBjb250YWluc1ZhbGlkTGluayhsaW5lLCBjYXB0dXJlZFZhbHVlKSkge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiBtYXRjaDtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0aWYgKHNldHRpbmdzLmlnbm9yZVVSTHMpIHtcclxuXHRcdFx0XHRcdFx0XHRjb25zdCB1cmxzID0gQXJyYXkuZnJvbShsaW5lLm1hdGNoQWxsKHVybFJlZ2V4KSwgbSA9PiBtWzBdKTtcclxuXHRcdFx0XHRcdFx0XHRsZXQgaWdub3JlQ3VycmVudE1hdGNoID0gZmFsc2U7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGZvciAoY29uc3QgdXJsIG9mIHVybHMpIHtcclxuXHRcdFx0XHRcdFx0XHRcdGlmICghZXhjbHVkZWRFeHRlbnNpb25zLnRlc3QodXJsKSAmJiB1cmwuaW5jbHVkZXMoY2FwdHVyZWRWYWx1ZSkpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWdub3JlQ3VycmVudE1hdGNoID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAoaWdub3JlQ3VycmVudE1hdGNoKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gbWF0Y2g7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRjb25zdCBvZmZzZXQgPSBhcmdzW2FyZ3MubGVuZ3RoIC0gMl07XHJcblx0XHRcdFx0XHRcdGNvbnN0IHByZWNlZGluZ0NoYXIgPSBvZmZzZXQgPiAwID8gbGluZVtvZmZzZXQgLSAxXSA6IG51bGw7XHJcblx0XHRcdFx0XHRcdGNvbnN0IHNwYWNlSWZCYWNrc2xhc2ggPSBwcmVjZWRpbmdDaGFyID09PSAnXFxcXCcgPyAnICcgOiAnJztcclxuXHJcblx0XHRcdFx0XHRcdHJldHVybiBgJHtzcGFjZUlmQmFja3NsYXNofVtbJHttYXRjaH1dXWA7XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHR1cGRhdGVkVGV4dCArPSBtb2RpZmllZExpbmUgKyBcIlxcblwiO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0cmV0dXJuIHVwZGF0ZWRUZXh0LnRyaW0oKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIHByb2Nlc3NNYXJrZG93bkNvbnRlbnQoYWN0aW9uOiBcInJlbW92ZUJyYWNrZXRzXCIgfCBcImFkZEJyYWNrZXRzXCIpIHtcclxuXHRcdGNvbnN0IGFjdGl2ZUxlYWYgPSB0aGlzLmFwcC53b3Jrc3BhY2UuYWN0aXZlTGVhZjtcclxuXHJcblx0XHRpZiAoIWFjdGl2ZUxlYWYpIHtcclxuXHRcdFx0bmV3IE5vdGljZShcIlBsZWFzZSBvcGVuIGEgbWFya2Rvd24gZmlsZSBvciBzZWxlY3QgYSBmb2xkZXJcIik7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCB2aWV3ID0gYWN0aXZlTGVhZi52aWV3O1xyXG5cdFx0aWYgKCF2aWV3KSB7XHJcblx0XHRcdG5ldyBOb3RpY2UoXCJVbmtub3duIGl0ZW0gc2VsZWN0ZWQuIFBsZWFzZSBzZWxlY3QgYSBtYXJrZG93biBmaWxlIG9yIGZvbGRlclwiKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh2aWV3IGluc3RhbmNlb2YgTWFya2Rvd25WaWV3KSB7XHJcblx0XHRcdGNvbnN0IHNlbGVjdGlvbiA9IHZpZXcuZWRpdG9yLmdldFNlbGVjdGlvbigpO1xyXG5cclxuXHRcdFx0aWYgKHNlbGVjdGlvbiAmJiBzZWxlY3Rpb24udHJpbSgpLmxlbmd0aCAhPT0gMCkge1xyXG5cdFx0XHRcdGxldCB1cGRhdGVkU2VsZWN0aW9uO1xyXG5cdFx0XHRcdGlmIChhY3Rpb24gPT09IFwicmVtb3ZlQnJhY2tldHNcIikge1xyXG5cdFx0XHRcdFx0dXBkYXRlZFNlbGVjdGlvbiA9IHRoaXMucmVtb3ZlQnJhY2tldHNJblNlbGVjdGlvbihzZWxlY3Rpb24pO1xyXG5cdFx0XHRcdFx0bmV3IE5vdGljZShcIlJlbW92ZWQgYnJhY2tldHMgZnJvbSBzZWxlY3Rpb24hXCIpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHR1cGRhdGVkU2VsZWN0aW9uID0gdGhpcy51cGRhdGVTZWxlY3Rpb24oc2VsZWN0aW9uLCB0aGlzLnNldHRpbmdzKTtcclxuXHRcdFx0XHRcdG5ldyBOb3RpY2UoXCJBZGRlZCBicmFja2V0cyBpbiBzZWxlY3Rpb24hXCIpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHR2aWV3LmVkaXRvci5yZXBsYWNlU2VsZWN0aW9uKHVwZGF0ZWRTZWxlY3Rpb24pO1xyXG5cdFx0XHRcdG5ldyBOb3RpY2UoYWN0aW9uID09PSBcInJlbW92ZUJyYWNrZXRzXCIgPyBcIlJlbW92ZWQgYnJhY2tldHMgZnJvbSBzZWxlY3Rpb24hXCIgOiBcIlVwZGF0ZWQgY29udGVudCBpbiBzZWxlY3Rpb24hXCIpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGlmIChhY3Rpb24gPT09IFwicmVtb3ZlQnJhY2tldHNcIikge1xyXG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5yZW1vdmVCcmFja2V0c2luRmlsZSgpO1xyXG5cdFx0XHRcdFx0bmV3IE5vdGljZShcIlJlbW92ZWQgYnJhY2tldHMgZnJvbSBlbnRpcmUgZmlsZSFcIik7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMuYWRkQnJhY2tldHNGb3JGaWxlKCk7XHJcblx0XHRcdFx0XHRuZXcgTm90aWNlKFwiQWRkZWQgYnJhY2tldHMgb24gZW50aXJlIGZpbGUhXCIpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0YXN5bmMgcmVtb3ZlQnJhY2tldHMoKSB7XHJcblx0XHRhd2FpdCB0aGlzLnByb2Nlc3NNYXJrZG93bkNvbnRlbnQoXCJyZW1vdmVCcmFja2V0c1wiKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIGFkZEJyYWNrZXRzKCkge1xyXG5cdFx0Y29uc3QgYWN0aXZlTGVhZiA9IHRoaXMuYXBwLndvcmtzcGFjZS5hY3RpdmVMZWFmO1xyXG5cclxuXHRcdGlmICghYWN0aXZlTGVhZiB8fCAhYWN0aXZlTGVhZi52aWV3KSB7XHJcblx0XHRcdG5ldyBOb3RpY2UoXCJQbGVhc2Ugb3BlbiBhIG1hcmtkb3duIGZpbGUgb3Igc2VsZWN0IGEgZm9sZGVyXCIpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGFjdGl2ZUxlYWYudmlldyBpbnN0YW5jZW9mIE1hcmtkb3duVmlldykge1xyXG5cdFx0XHRjb25zdCBlZGl0b3IgPSBhY3RpdmVMZWFmLnZpZXcuZWRpdG9yO1xyXG5cdFx0XHRjb25zdCBzZWxlY3Rpb24gPSBlZGl0b3IuZ2V0U2VsZWN0aW9uKCk7XHJcblxyXG5cdFx0XHRpZiAoc2VsZWN0aW9uICYmIHNlbGVjdGlvbi50cmltKCkubGVuZ3RoICE9PSAwKSB7XHJcblx0XHRcdFx0Y29uc3QgdXBkYXRlZFNlbGVjdGlvbiA9IHRoaXMudXBkYXRlU2VsZWN0aW9uKHNlbGVjdGlvbiwgdGhpcy5zZXR0aW5ncyk7XHJcblx0XHRcdFx0ZWRpdG9yLnJlcGxhY2VTZWxlY3Rpb24odXBkYXRlZFNlbGVjdGlvbik7XHJcblx0XHRcdFx0bmV3IE5vdGljZShcIkFkZGVkIGJyYWNrZXRzIGluIHNlbGVjdGlvbiFcIik7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGNvbnN0IGZpbGVQYXRoID0gYWN0aXZlTGVhZi52aWV3LmZpbGUucGF0aDtcclxuXHRcdFx0XHRhd2FpdCB0aGlzLmFkZEJyYWNrZXRzRm9yRmlsZShmaWxlUGF0aCk7XHJcblx0XHRcdFx0bmV3IE5vdGljZShcIlVwZGF0ZWQgZW50aXJlIGZpbGUhXCIpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGlzU2VsZWN0ZWQoaXRlbSkge1xyXG5cdFx0XHRyZXR1cm4gaXRlbS5zZWxmRWwgJiYgaXRlbS5zZWxmRWwuY2xhc3NMaXN0LmNvbnRhaW5zKFwiaGFzLWZvY3VzXCIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGxldCBzZWxlY3RlZEZpbGVJdGVtID0gbnVsbDtcclxuXHJcblx0XHRmb3IgKGNvbnN0IGtleSBpbiBhY3RpdmVMZWFmLnZpZXcuZmlsZUl0ZW1zKSB7XHJcblx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYWN0aXZlTGVhZi52aWV3LmZpbGVJdGVtcywga2V5KSkge1xyXG5cdFx0XHRcdGNvbnN0IGl0ZW0gPSBhY3RpdmVMZWFmLnZpZXcuZmlsZUl0ZW1zW2tleV07XHJcblx0XHRcdFx0aWYgKGlzU2VsZWN0ZWQoaXRlbSkpIHtcclxuXHRcdFx0XHRcdHNlbGVjdGVkRmlsZUl0ZW0gPSBpdGVtO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCFzZWxlY3RlZEZpbGVJdGVtKSB7XHJcblx0XHRcdG5ldyBOb3RpY2UoXCJObyBtYXJrZG93biBmaWxlIG9yIGZvbGRlciBpcyBjdXJyZW50bHkgc2VsZWN0ZWQuIFBsZWFzZSBzZWxlY3Qgb25lLlwiKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChzZWxlY3RlZEZpbGVJdGVtLmNvbGxhcHNpYmxlKSB7XHJcblx0XHRcdGNvbnN0IGZvbGRlclBhdGggPSBzZWxlY3RlZEZpbGVJdGVtLmZpbGUucGF0aDtcclxuXHRcdFx0YXdhaXQgdGhpcy5hZGRCcmFja2V0c0ZvckZvbGRlcihmb2xkZXJQYXRoKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGNvbnN0IGZpbGVQYXRoID0gc2VsZWN0ZWRGaWxlSXRlbS5maWxlLnBhdGg7XHJcblx0XHRcdGF3YWl0IHRoaXMuYWRkQnJhY2tldHNGb3JGaWxlKGZpbGVQYXRoKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGFzeW5jIGFkZEJyYWNrZXRzRm9yRm9sZGVyKGZvbGRlclBhdGg6IHN0cmluZykge1xyXG5cdFx0Y29uc3QgZmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCkuZmlsdGVyKGZpbGUgPT4gZmlsZS5wYXRoLnN0YXJ0c1dpdGgoZm9sZGVyUGF0aCkpO1xyXG5cdFx0Y29uc3QgdG90YWxGaWxlcyA9IGZpbGVzLmxlbmd0aDtcclxuXHRcdGxldCBwcm9jZXNzZWRGaWxlcyA9IDA7XHJcblxyXG5cdFx0Y29uc3QgcHJvY2Vzc2luZ05vdGljZSA9IG5ldyBOb3RpY2UoYFByb2Nlc3NpbmcgJHt0b3RhbEZpbGVzfSBmaWxlcy4uLmAsIHRvdGFsRmlsZXMgKiAxMDAwKTtcclxuXHJcblx0XHRjb25zdCBtYXhDb25jdXJyZW50VGFza3MgPSAyMDtcclxuXHRcdGNvbnN0IHRhc2tRdWV1ZSA9IFtdO1xyXG5cclxuXHRcdGNvbnN0IHByb2Nlc3NGaWxlID0gYXN5bmMgKGZpbGUpID0+IHtcclxuXHRcdFx0YXdhaXQgdGhpcy5hZGRCcmFja2V0c0ZvckZpbGUoZmlsZS5wYXRoKTtcclxuXHRcdFx0cHJvY2Vzc2VkRmlsZXMrKztcclxuXHRcdFx0cHJvY2Vzc2luZ05vdGljZS5zZXRNZXNzYWdlKGBQcm9jZXNzaW5nIGZpbGUgJHtwcm9jZXNzZWRGaWxlc30gb2YgJHt0b3RhbEZpbGVzfWApO1xyXG5cdFx0XHRpZiAodGFza1F1ZXVlLmxlbmd0aCA+IDApIHtcclxuXHRcdFx0XHRjb25zdCBuZXh0VGFzayA9IHRhc2tRdWV1ZS5zaGlmdCgpO1xyXG5cdFx0XHRcdGF3YWl0IG5leHRUYXNrKCk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0Y29uc3QgZW5xdWV1ZVRhc2sgPSAoZmlsZSkgPT4ge1xyXG5cdFx0XHRpZiAodGFza1F1ZXVlLmxlbmd0aCA8IG1heENvbmN1cnJlbnRUYXNrcykge1xyXG5cdFx0XHRcdHRhc2tRdWV1ZS5wdXNoKCgpID0+IHByb2Nlc3NGaWxlKGZpbGUpKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRwcm9jZXNzRmlsZShmaWxlKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHRmaWxlcy5mb3JFYWNoKGZpbGUgPT4gZW5xdWV1ZVRhc2soZmlsZSkpO1xyXG5cclxuXHRcdHdoaWxlICh0YXNrUXVldWUubGVuZ3RoID4gMCkge1xyXG5cdFx0XHRjb25zdCBuZXh0VGFzayA9IHRhc2tRdWV1ZS5zaGlmdCgpO1xyXG5cdFx0XHRhd2FpdCBuZXh0VGFzaygpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHByb2Nlc3NpbmdOb3RpY2UuaGlkZSgpO1xyXG5cdFx0bmV3IE5vdGljZShgQWxsICR7dG90YWxGaWxlc30gZmlsZXMgaW4gdGhlIGZvbGRlciBwcm9jZXNzZWQuYCk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBhZGRUb0JsYWNrbGlzdCgpIHtcclxuXHRcdGNvbnN0IGFjdGl2ZUxlYWYgPSB0aGlzLmFwcC53b3Jrc3BhY2UuYWN0aXZlTGVhZjtcclxuXHJcblx0XHRpZiAoIWFjdGl2ZUxlYWYgfHwgIWFjdGl2ZUxlYWYudmlldykge1xyXG5cdFx0XHRuZXcgTm90aWNlKFwiUGxlYXNlIG9wZW4gYSBtYXJrZG93biBmaWxlIG9yIHNlbGVjdCBhIGZvbGRlclwiKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChhY3RpdmVMZWFmLnZpZXcgaW5zdGFuY2VvZiBNYXJrZG93blZpZXcpIHtcclxuXHRcdFx0Y29uc3QgZWRpdG9yID0gYWN0aXZlTGVhZi52aWV3LmVkaXRvcjtcclxuXHRcdFx0Y29uc3Qgc2VsZWN0aW9uID0gZWRpdG9yLmdldFNlbGVjdGlvbigpO1xyXG5cclxuXHRcdFx0aWYgKHNlbGVjdGlvbiAmJiBzZWxlY3Rpb24udHJpbSgpLmxlbmd0aCAhPT0gMCkge1xyXG5cdFx0XHRcdGNvbnN0IGxpbmtzID0gc2VsZWN0aW9uLm1hdGNoKC9cXFtcXFsoW15cXF1dKylcXF1cXF0vZyk7XHJcblxyXG5cdFx0XHRcdGlmIChsaW5rcykge1xyXG5cdFx0XHRcdFx0bGlua3MuZm9yRWFjaChsaW5rID0+IHtcclxuXHRcdFx0XHRcdFx0Y29uc3QgdGV4dCA9IGxpbmsucmVwbGFjZSgvXFxbXFxbfFxcXVxcXS9nLCAnJyk7XHJcblx0XHRcdFx0XHRcdGlmICghdGhpcy5zZXR0aW5ncy5ibGFja2xpc3QuaW5jbHVkZXModGV4dCkpIHtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLnNldHRpbmdzLmJsYWNrbGlzdC5wdXNoKHRleHQpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMuc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHRuZXcgTm90aWNlKFwiQWRkZWQgdG8gYmxhY2tsaXN0IVwiKTtcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRuZXcgTm90aWNlKFwiTm8gdmFsaWQgc2VsZWN0aW9uIGZvdW5kLiBQbGVhc2Ugc2VsZWN0IGEgdmFsaWQgbGluay5cIik7XHJcblx0fVxyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBa0Y7QUFrQmxGLElBQUksbUJBQW1CO0FBQUEsRUFDdEIsWUFBWSxDQUFDO0FBQUEsRUFDYixhQUFhO0FBQUEsSUFDWjtBQUFBLE1BQ0MsVUFBVTtBQUFBLE1BQ1YsV0FBVztBQUFBLE1BQ1gsU0FBUztBQUFBLFFBQ1I7QUFBQSxVQUNDLFlBQVk7QUFBQSxVQUNaLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFVBQ0MsWUFBWTtBQUFBLFVBQ1osT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFFBQ1Y7QUFBQSxRQUNBO0FBQUEsVUFDQyxZQUFZO0FBQUEsVUFDWixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUEsUUFDVjtBQUFBLFFBQ0E7QUFBQSxVQUNDLFlBQVk7QUFBQSxVQUNaLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFVBQ0MsWUFBWTtBQUFBLFVBQ1osT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFFBQ1Y7QUFBQSxRQUNBO0FBQUEsVUFDQyxZQUFZO0FBQUEsVUFDWixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUEsUUFDVjtBQUFBLFFBQ0E7QUFBQSxVQUNDLFlBQVk7QUFBQSxVQUNaLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFVBQ0MsWUFBWTtBQUFBLFVBQ1osT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFFBQ1Y7QUFBQSxRQUNBO0FBQUEsVUFDQyxZQUFZO0FBQUEsVUFDWixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUEsUUFDVjtBQUFBLFFBQ0E7QUFBQSxVQUNDLFlBQVk7QUFBQSxVQUNaLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFVBQ0MsWUFBWTtBQUFBLFVBQ1osT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFFBQ1Y7QUFBQSxRQUNBO0FBQUEsVUFDQyxZQUFZO0FBQUEsVUFDWixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUEsUUFDVjtBQUFBLFFBQ0E7QUFBQSxVQUNDLFlBQVk7QUFBQSxVQUNaLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFVBQ0MsWUFBWTtBQUFBLFVBQ1osT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFFBQ1Y7QUFBQSxRQUNBO0FBQUEsVUFDQyxZQUFZO0FBQUEsVUFDWixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUEsUUFDVjtBQUFBLFFBQ0E7QUFBQSxVQUNDLFlBQVk7QUFBQSxVQUNaLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFVBQ0MsWUFBWTtBQUFBLFVBQ1osT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFFBQ1Y7QUFBQSxRQUNBO0FBQUEsVUFDQyxZQUFZO0FBQUEsVUFDWixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUEsUUFDVjtBQUFBLFFBQ0E7QUFBQSxVQUNDLFlBQVk7QUFBQSxVQUNaLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFVBQ0MsWUFBWTtBQUFBLFVBQ1osT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFFBQ1Y7QUFBQSxRQUNBO0FBQUEsVUFDQyxZQUFZO0FBQUEsVUFDWixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUEsUUFDVjtBQUFBLFFBQ0E7QUFBQSxVQUNDLFlBQVk7QUFBQSxVQUNaLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFVBQ0MsWUFBWTtBQUFBLFVBQ1osT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFFBQ1Y7QUFBQSxRQUNBO0FBQUEsVUFDQyxZQUFZO0FBQUEsVUFDWixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUEsUUFDVjtBQUFBLFFBQ0E7QUFBQSxVQUNDLFlBQVk7QUFBQSxVQUNaLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFVBQ0MsWUFBWTtBQUFBLFVBQ1osT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFFBQ1Y7QUFBQSxRQUNBO0FBQUEsVUFDQyxZQUFZO0FBQUEsVUFDWixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUEsUUFDVjtBQUFBLFFBQ0E7QUFBQSxVQUNDLFlBQVk7QUFBQSxVQUNaLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFVBQ0MsWUFBWTtBQUFBLFVBQ1osT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFFBQ1Y7QUFBQSxRQUNBO0FBQUEsVUFDQyxZQUFZO0FBQUEsVUFDWixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUEsUUFDVjtBQUFBLFFBQ0E7QUFBQSxVQUNDLFlBQVk7QUFBQSxVQUNaLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFVBQ0MsWUFBWTtBQUFBLFVBQ1osT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFFBQ1Y7QUFBQSxRQUNBO0FBQUEsVUFDQyxZQUFZO0FBQUEsVUFDWixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUEsUUFDVjtBQUFBLFFBQ0E7QUFBQSxVQUNDLFlBQVk7QUFBQSxVQUNaLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFVBQ0MsWUFBWTtBQUFBLFVBQ1osT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFFBQ1Y7QUFBQSxRQUNBO0FBQUEsVUFDQyxZQUFZO0FBQUEsVUFDWixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUEsUUFDVjtBQUFBLFFBQ0E7QUFBQSxVQUNDLFlBQVk7QUFBQSxVQUNaLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFVBQ0MsWUFBWTtBQUFBLFVBQ1osT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFFBQ1Y7QUFBQSxRQUNBO0FBQUEsVUFDQyxZQUFZO0FBQUEsVUFDWixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUEsUUFDVjtBQUFBLFFBQ0E7QUFBQSxVQUNDLFlBQVk7QUFBQSxVQUNaLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFVBQ0MsWUFBWTtBQUFBLFVBQ1osT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFFBQ1Y7QUFBQSxNQUNEO0FBQUEsSUFDRDtBQUFBLEVBQ0Q7QUFBQSxFQUNBLGFBQWE7QUFBQSxFQUNiLGtCQUFrQjtBQUFBLEVBQ2xCLFlBQVk7QUFBQSxFQUNaLFlBQVk7QUFBQSxFQUNaLFdBQVc7QUFBQSxJQUNWO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElB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

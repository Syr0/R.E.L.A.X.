/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => RelaxPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  regexPairs: [],
  regexGroups: [
    {
      isActive: true,
      groupName: "Default RegEx",
      regexes: [
        {
          "isActive": true,
          "key": "eMail",
          "regex": "([A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,})"
        },
        {
          "isActive": true,
          "key": "Domains",
          "regex": "\\b([a-zA-Z0-9\\-\\.]+\\.(?:com|org|net|mil|edu|COM|ORG|NET|MIL|EDU))"
        },
        {
          "isActive": true,
          "key": "IPv4",
          "regex": "\\b((?:(?:(?!1?2?7\\.0\\.0\\.1)(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)))\\b"
        },
        {
          "isActive": true,
          "key": "GUID",
          "regex": "([A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12})"
        },
        {
          "isActive": true,
          "key": "SHA256",
          "regex": "\\b([a-fA-F0-9]{64})\\b"
        },
        {
          "isActive": true,
          "key": "JARM",
          "regex": "\\b([a-fA-F0-9]{62})\\b"
        },
        {
          "isActive": true,
          "key": "SHA1",
          "regex": "\\b([a-fA-F0-9]{40})\\b"
        },
        {
          "isActive": true,
          "key": "MD5",
          "regex": "\\b([a-fA-F0-9]{32})\\b"
        },
        {
          "isActive": true,
          "key": "Bitcoin",
          "regex": "\\b([13]{1}[a-km-zA-HJ-NP-Z1-9]{26,33}|bc1[a-z0-9]{39,59})\\b"
        },
        {
          "isActive": true,
          "key": "Date",
          "regex": "((?:0[1-9]|[12][0-9]|3[01])[\\\\\\/\\.-](?:0[1-9]|1[012])[\\\\\\/\\.-](?:19|20|)\\d\\d)"
        },
        {
          "isActive": true,
          "key": "Windows Usernames",
          "regex": "\\\\Users\\\\+(?!(?:Public|Administrator)\\\\)([^\\\\]+)\\\\"
        },
        {
          "isActive": true,
          "key": "Markdown \xB4",
          "regex": "(?:[\xB4](((?:(?!<br>|\\r|\\n)[^\xB4 ]){4,30}))[\xB4])"
        },
        {
          "isActive": true,
          "key": "Markdown '",
          "regex": "(?:['](((?:(?!<br>|\\r|\\n)[^' ]){4,30}))['])"
        },
        {
          "isActive": true,
          "key": "CVEs",
          "regex": "(CVE-(1999|2\\d{3})-(?!0{4})(0\\d{2}[0-9]|[1-9]\\d{3,}))"
        },
        {
          "isActive": true,
          "key": "MAC Address",
          "regex": "([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})"
        },
        {
          "isActive": true,
          "key": "Tor Onion Address",
          "regex": "\\b((?:https?:\\/\\/)?(?:www)?(\\S*?\\.onion)\\b)"
        },
        {
          "isActive": true,
          "key": "IPv6 Address",
          "regex": "((?:[0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,7}:|(?:[0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,5}(?::[0-9a-fA-F]{1,4}){1,2}|(?:[0-9a-fA-F]{1,4}:){1,4}(?::[0-9a-fA-F]{1,4}){1,3}|(?:[0-9a-fA-F]{1,4}:){1,3}(?::[0-9a-fA-F]{1,4}){1,4}|(?:[0-9a-fA-F]{1,4}:){1,2}(?::[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:(?:(?::[0-9a-fA-F]{1,4}){1,6})|:(?:(?::[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(?::[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(?:ffff(?::0{1,4}){0,1}:){0,1}(?:(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(?:[0-9a-fA-F]{1,4}:){1,4}:(?:(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9]))"
        },
        {
          "isActive": true,
          "key": "SSDeep",
          "regex": '(\\d+:[a-z+/A-Z0-9]+:[a-z+/A-Z0-9]+,\\"[^\\"]+\\")'
        },
        {
          "isActive": true,
          "key": "VT subitter",
          "regex": "([0-9a-f]{8} - (?:api|web))"
        },
        {
          "isActive": true,
          "key": "MAC Adresses",
          "regex": "((?:[0-9A-Fa-f]{2}[:-]){5}(?:[0-9A-Fa-f]{2}))"
        },
        {
          "isActive": true,
          "key": "Passport",
          "regex": "([A-PR-WY][1-9]\\d\\s?\\d{4}[1-9])"
        },
        {
          "isActive": true,
          "key": "Markdown \u2018",
          "regex": "(?:[\u2018](((?:(?!<br>|\\r|\\n)[^\u2018 ]){4,30}))[\u2018])"
        },
        {
          "isActive": true,
          "key": "Markdown \u2019",
          "regex": "(?:[\u2019](((?:(?!<br>|\\r|\\n)[^\u2019 ]){4,30}))[\u2019])"
        },
        {
          "isActive": true,
          "key": 'Markdown "',
          "regex": '(?:["\u201E\u2033\u201D](((?:(?!<br>|\\r|\\n)[^"\u2033\u201D ]){4,30}))["\u2033\u201D])'
        },
        {
          "isActive": true,
          "key": "Markdown _",
          "regex": "(?:[_](((?:(?!<br>|\\r|\\n)[^_ ]){4,30}))[_])"
        },
        {
          "isActive": true,
          "key": "Markdown \u2018\u2019",
          "regex": "(?:[\u2018](((?:(?!<br>|\\r|\\n)[^\u2019 ]){4,30}))[\u2019])"
        },
        {
          "isActive": true,
          "key": "Signal Frequencies",
          "regex": "(\\b[0-9]{1,4}(?:\\.\\d{1,4})?\\s?(Hz|kHz|MHz|GHz)\\b)"
        },
        {
          "isActive": true,
          "key": "BibTeX Entries",
          "regex": "@(article|book|inbook|conference|inproceedings){([^}]+)}"
        },
        {
          "isActive": true,
          "key": "GPS Coordinates",
          "regex": "\\b[+-]?[0-9]{1,2}\\.[0-9]+,\\s*[+-]?[0-9]{1,3}\\.[0-9]+\\b"
        },
        {
          "isActive": true,
          "key": "ISBN Numbers",
          "regex": "\\bISBN\\s?(?:-?13|-10)?:?\\s?[0-9-]{10,17}\\b"
        },
        {
          "isActive": true,
          "key": "Camera Settings",
          "regex": "\\bISO\\s?[0-9]+|f/[0-9.]+|1/[0-9]+\\s?sec\\b"
        },
        {
          "isActive": true,
          "key": "Historical Dates",
          "regex": "\\b(?:[0-9]{1,4} (AD|BC)|[0-9]{1,4}th century)\\b"
        },
        {
          "isActive": true,
          "key": "Processor Specs",
          "regex": "\\bIntel Core i[3579]-[0-9]{4}[HQGU]K?|AMD Ryzen [3579] [0-9]{4}X?\\b"
        },
        {
          "isActive": false,
          "key": "Base64 Strings",
          "regex": "([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?"
        },
        {
          "isActive": false,
          "key": "Script Language File",
          "regex": "([\\w]+\\.(?:py|js|java|cs|cpp|rb|go|php))[\\b]"
        },
        {
          "isActive": false,
          "key": "Chord Progressions",
          "regex": "\\b((?:C|Dm|Em|F|G|Am|Bdim)(?:\\s->\\s(?:C|Dm|Em|F|G|Am|Bdim))*)\\b"
        },
        {
          "isActive": false,
          "key": "Hex Colors",
          "regex": "#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})"
        },
        {
          "isActive": false,
          "key": "Chemical Elements",
          "regex": "\\b(?:H|He|Li|Be|B|C|N|O|F|Ne|Na|Mg|Al|Si|P|S|Cl|Ar|K|Ca)\\b"
        },
        {
          "isActive": false,
          "key": "Hashtags",
          "regex": "#[A-Za-z0-9_]+"
        },
        {
          "isActive": false,
          "key": "Academic Citations",
          "regex": "\\b\\([A-Za-z]+,\\s[0-9]{4}\\)\\b"
        },
        {
          "isActive": false,
          "key": "Temperature Readings",
          "regex": "\\b-?[0-9]+\\s?(\xB0C|\xB0F|K)\\b"
        }
      ]
    }
  ],
  ignoreLinks: true,
  ignoreCodeBlocks: true,
  defangURLs: true,
  ignoreURLs: false,
  blacklist: []
};
var RelaxSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.isHighlighted = false;
    this.dragElement = null;
    this.currentIndex = null;
    this.newIndex = null;
    this.startY = 0;
    this.startTop = 0;
    this.initialOffsetY = 0;
    this.settingsInitialized = false;
    this.plugin = plugin;
    this.onDragEnd = this.onDragEnd.bind(this);
    this.onDragMove = this.onDragMove.bind(this);
    this.makeDraggable = this.makeDraggable.bind(this);
    this.updateRegexOrderFromDOM = () => {
      const regexGroups = [];
      this.keyValueContainer.querySelectorAll(".regex-group-container").forEach((groupContainer) => {
        const groupNameElement = groupContainer.querySelector(".regex-group-name");
        const activeCheckboxInput = groupContainer.querySelector("input[type='checkbox']");
        const groupName = groupNameElement ? groupNameElement.textContent : "";
        const isActive = activeCheckboxInput ? activeCheckboxInput.checked : false;
        const regexes = Array.from(groupContainer.querySelectorAll(".regex-group-content .flex-row")).map((row) => {
          const keyInput = row.querySelector("input[placeholder='Description-Key']");
          const valueInput = row.querySelector("input[placeholder='Regexp']");
          const regexActiveCheckbox = row.querySelector("input[type='checkbox']");
          return {
            isActive: regexActiveCheckbox ? regexActiveCheckbox.checked : false,
            key: keyInput ? keyInput.value : "",
            regex: valueInput ? valueInput.value : ""
          };
        });
        const isCollapsed = groupContainer.querySelector(".regex-group-content").style.display === "none";
        regexGroups.push({ isActive, groupName, regexes, isCollapsed });
      });
      if (this.plugin && this.plugin.settings) {
        this.plugin.settings.regexGroups = regexGroups;
      } else {
        console.error("Plugin or settings not available");
      }
      const regexPairs = Array.from(this.keyValueContainer.querySelectorAll(".standalone-regex-row")).map((row) => {
        const keyInput = row.querySelector("input[placeholder='Description-Key']");
        const valueInput = row.querySelector("input[placeholder='Regexp']");
        const regexActiveCheckbox = row.querySelector("input[type='checkbox']");
        return {
          isActive: regexActiveCheckbox ? regexActiveCheckbox.checked : false,
          key: keyInput ? keyInput.value : "",
          regex: valueInput ? valueInput.value : ""
        };
      });
      this.plugin.settings.regexPairs = regexPairs;
      this.plugin.saveSettings();
    };
    this.saveChanges = () => {
      this.updateRegexOrderFromDOM();
      this.plugin.saveSettings();
      const closeButton = document.querySelector(".modal-close-button");
      if (closeButton) {
        closeButton.click();
      }
      this.setHighlighted(false);
    };
  }
  makeDraggable(element, dragHandle) {
    if (!dragHandle) {
      console.error("Drag handle not found!", element.innerHTML);
      return;
    }
    dragHandle.addEventListener("mousedown", (e) => {
      e.preventDefault();
      e.stopPropagation();
      this.dragElement = element;
      this.dragElement.classList.add("dragging");
      this.placeholder = document.createElement("div");
      this.placeholder.className = "placeholder";
      this.placeholder.style.position = "relative";
      this.placeholder.style.height = `${element.offsetHeight}px`;
      this.placeholder.style.backgroundColor = "rgba(0, 0, 0, 0.1)";
      element.parentNode.insertBefore(this.placeholder, element);
      this.dragElement.style.visibility = "hidden";
      this.dragElement.style.border = "none";
      const clone = this.dragElement.cloneNode(true);
      clone.style.position = "absolute";
      clone.style.top = "0";
      clone.style.left = "0";
      clone.style.width = "100%";
      clone.style.height = "100%";
      clone.style.visibility = "visible";
      clone.style.pointerEvents = "none";
      clone.style.zIndex = "999";
      this.placeholder.appendChild(clone);
      const frame = document.createElement("div");
      frame.style.position = "absolute";
      frame.style.top = "0";
      frame.style.left = "0";
      frame.style.width = "100%";
      frame.style.height = "100%";
      frame.style.border = "2px dashed var(--interactive-accent)";
      frame.style.boxSizing = "border-box";
      frame.style.zIndex = "1000";
      this.placeholder.appendChild(frame);
      document.addEventListener("mousemove", this.onDragMove);
      document.addEventListener("mouseup", this.onDragEnd);
    });
  }
  findClosestGroupOrStandaloneArea(yPosition) {
    let closest = null;
    let closestDistance = Infinity;
    const allContainers = this.keyValueContainer.querySelectorAll(".regex-group-container, .standalone-regex-row");
    allContainers.forEach((container) => {
      const rect = container.getBoundingClientRect();
      const containerMidpoint = window.scrollY + rect.top + rect.height / 2;
      const distance = Math.abs(yPosition - containerMidpoint);
      if (distance < closestDistance) {
        closest = container;
        closestDistance = distance;
      }
    });
    return closest;
  }
  findSourceGroupIndex(dragElement) {
    const groupContainer = dragElement.closest(".regex-group-container");
    if (!groupContainer)
      return -1;
    const groupName = groupContainer.querySelector(".regex-group-name").textContent.trim();
    return this.plugin.settings.regexGroups.findIndex((group) => group.groupName === groupName);
  }
  adjustPlaceholderPosition(targetGroup) {
    if (!this.dragElement || !this.placeholder)
      return;
    if (targetGroup.classList.contains("regex-group-container") || targetGroup.classList.contains("standalone-regex-row")) {
      const parent = targetGroup.parentNode;
      if (parent && parent === this.placeholder.parentNode) {
        parent.insertBefore(this.placeholder, targetGroup);
      }
    }
  }
  onDragMove(e) {
    if (!this.dragElement)
      return;
    const parent = this.dragElement.parentElement;
    const scrollTop = parent.scrollTop;
    const mouseY = e.clientY + scrollTop;
    let closest = null;
    let closestDistance = Infinity;
    [...parent.children].forEach((child) => {
      if (child !== this.dragElement && child !== this.placeholder) {
        const rect = child.getBoundingClientRect();
        const childMidpoint = rect.top + scrollTop + rect.height / 2;
        const distance = Math.abs(mouseY - childMidpoint);
        if (distance < closestDistance) {
          closest = child;
          closestDistance = distance;
        }
      }
    });
    if (this.placeholder) {
      const clone = this.placeholder.querySelector(".clone-class");
      if (clone) {
        clone.style.transform = `translateY(${e.clientY - this.startY}px)`;
      }
    }
    if (closest) {
      const rect = closest.getBoundingClientRect();
      const childMidpoint = rect.top + scrollTop + rect.height / 2;
      if (mouseY < childMidpoint) {
        parent.insertBefore(this.placeholder, closest);
      } else {
        parent.insertBefore(this.placeholder, closest.nextSibling);
      }
    }
    let targetGroup = this.findClosestGroupOrStandaloneArea(e.clientY);
    if (targetGroup) {
      if (targetGroup.classList.contains("regex-group-container")) {
        if (targetGroup) {
          this.adjustPlaceholderPosition(targetGroup);
        }
      }
    }
  }
  findRegexIndexInGroup(dragElement, sourceGroupIndex) {
    const group = this.plugin.settings.regexGroups[sourceGroupIndex];
    const regexKey = dragElement.querySelector("input[placeholder='Description-Key']").value;
    return group.regexes.findIndex((regex) => regex.key === regexKey);
  }
  onDragEnd() {
    if (!this.dragElement || !this.placeholder)
      return;
    this.placeholder.parentNode.insertBefore(this.dragElement, this.placeholder);
    this.dragElement.style.visibility = "visible";
    this.placeholder.remove();
    this.dragElement.classList.remove("dragging");
    this.dragElement = null;
    this.placeholder = null;
    this.updateRegexOrderFromDOM();
    this.plugin.saveSettings();
  }
  findGroupIndex(groupElement) {
    if (!groupElement)
      return -1;
    const groupName = groupElement.querySelector(".regex-group-name").textContent.trim();
    return this.plugin.settings.regexGroups.findIndex((group) => group.groupName === groupName);
  }
  findRegexPairIndex(draggedElement) {
    const key = draggedElement.querySelector("input[placeholder='Description-Key']").value;
    return this.plugin.settings.regexPairs.findIndex((pair) => pair.key === key);
  }
  setHighlighted(highlight) {
    this.isHighlited = highlight;
    if (this.saveButton) {
      this.saveButton.disabled = !highlight;
      if (highlight) {
        this.saveButton.classList.add("is-highlight");
      } else {
        this.saveButton.classList.remove("is-highlight");
      }
    }
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    this.keyValueContainer = containerEl.createEl("div");
    this.keyValueContainer.classList.add("flex-column");
    this.createSettingsUI(containerEl);
    const validateContent = (content) => {
      const regex = /\[\[(.+?)\]\]/g;
      return !regex.test(content);
    };
    const applyValidationStyle = (textarea) => {
      if (validateContent(textarea.value)) {
        textarea.classList.toggle("valid-content", validateContent(textarea.value));
      } else {
        textarea.classList.toggle("invalid-content", !validateContent(textarea.value));
      }
    };
    document.addEventListener("DOMContentLoaded", (event) => {
      const modalButton = document.querySelector("#openModalButton");
      modalButton.addEventListener("click", function() {
        const modal = document.querySelector(".modal");
        const textarea = modal.querySelector("textarea");
        applyValidationStyle(textarea);
        textarea.addEventListener("input", function() {
          applyValidationStyle(textarea);
        });
      });
      let draggedElement = null;
      let placeholder = null;
      const createPlaceholder = () => {
        const div = document.createElement("div");
        div.style.height = "2px";
        div.style.background = "blue";
        div.style.margin = "5px 0";
        return div;
      };
      document.querySelectorAll(".draggable").forEach((elem) => {
        elem.addEventListener("mousedown", function(e) {
          draggedElement = this;
          placeholder = createPlaceholder();
          draggedElement.parentNode.insertBefore(placeholder, draggedElement.nextSibling);
          draggedElement.style.opacity = "0.5";
          e.preventDefault();
        });
        document.addEventListener("mousemove", (e) => {
          if (!draggedElement)
            return;
          const rect = placeholder.getBoundingClientRect();
          const parent = placeholder.parentNode;
          parent.childNodes.forEach((child) => {
            if (child !== draggedElement && child !== placeholder) {
              const childRect = child.getBoundingClientRect();
              if (e.clientY > childRect.top && e.clientY < childRect.bottom) {
                if (e.clientY < (childRect.top + childRect.bottom) / 2) {
                  parent.insertBefore(placeholder, child);
                } else {
                  parent.insertBefore(placeholder, child.nextSibling);
                }
              }
            }
          });
        });
        document.addEventListener("mouseup", () => {
          if (draggedElement) {
            draggedElement.style.opacity = "1";
            placeholder.parentNode.insertBefore(draggedElement, placeholder);
            placeholder.parentNode.removeChild(placeholder);
            draggedElement = null;
            placeholder = null;
          }
        });
      });
    });
    const validateRegexInput = (input) => {
      let errorMsg = "";
      try {
        const reg = new RegExp(input.value);
        const groupCount = (input.value.match(/\((?!\?)/g) || []).length;
        if (groupCount > 1) {
          input.classList.add("invalid-border");
          errorMsg = "More than one group detected.";
        } else {
          input.classList.remove("invalid-border");
        }
      } catch (e) {
        input.classList.add("invalid-border");
        errorMsg = "Invalid regex.";
      }
      const errorElement = input.nextSibling;
      if (errorElement && errorElement.classList.contains("regex-error")) {
        errorElement.textContent = errorMsg;
      } else {
        const span = document.createElement("span");
        span.className = "regex-error";
        span.textContent = errorMsg;
        input.parentNode.insertBefore(span, input.nextSibling);
      }
    };
    const addRegexToGroup = (groupContent, regex) => {
      const row = groupContent.createEl("div", { cls: "flex-row" });
      row.style.display = "flex";
      row.style.alignItems = "center";
      const dragHandle = row.createEl("span", { className: "drag-handle", text: "\u2630" });
      const activeCheckbox = row.createEl("input", { type: "checkbox", className: "active-checkbox" });
      activeCheckbox.checked = regex.isActive;
      const keyInput = row.createEl("input", {
        type: "text",
        className: "key-input-flex",
        value: regex.key,
        placeholder: "Description-Key"
      });
      const valueInput = row.createEl("input", {
        type: "text",
        className: "value-input-flex",
        value: regex.regex,
        placeholder: "Regexp"
      });
      valueInput.style.flexGrow = "1";
      const deleteButton = row.createEl("button", { text: "Delete", className: "delete-button" });
      deleteButton.addEventListener("click", () => {
        row.remove();
        this.updateRegexOrderFromDOM();
        this.plugin.saveSettings();
      });
      if (dragHandle)
        this.makeDraggable(row, dragHandle);
      keyInput.addEventListener("input", () => {
        this.setHighlighted(true);
      });
      valueInput.addEventListener("input", () => {
        validateRegexInput(valueInput);
        this.setHighlighted(true);
      });
    };
    const addGroupUI = (group, index) => {
      const groupContainer = this.keyValueContainer.createEl("div", { cls: "regex-group-container group-container" });
      groupContainer.style.border = group.isActive ? "1px solid var(--interactive-accent)" : "1px solid #ccc";
      groupContainer.style.padding = "10px";
      groupContainer.style.marginBottom = "10px";
      const groupHeader = groupContainer.createEl("div", { cls: "regex-group-header" });
      const groupNameAndControls = groupHeader.createDiv({ cls: "group-name-and-controls" });
      const dragHandle = groupNameAndControls.createEl("span", { className: "drag-handle", text: "\u2630" });
      const collapseIcon = groupNameAndControls.createEl("span", { cls: "collapse-icon" });
      collapseIcon.textContent = group.isCollapsed ? "\u25BA" : "\u25BC";
      const groupActiveCheckbox = groupNameAndControls.createEl("input", { type: "checkbox" });
      groupActiveCheckbox.checked = group.isActive;
      const groupNameEl = groupNameAndControls.createEl("span", { cls: "regex-group-name", text: group.groupName });
      groupNameEl.setAttribute("contenteditable", "true");
      const controlButtons = groupHeader.createDiv({ cls: "control-buttons" });
      const addRegexButton = controlButtons.createEl("button", { text: "Add Regex", className: "add-regex-button" });
      const deleteGroupButton = controlButtons.createEl("button", { text: "Delete Group", className: "delete-group-button" });
      groupActiveCheckbox.addEventListener("change", () => {
        group.isActive = groupActiveCheckbox.checked;
        groupContainer.style.border = group.isActive ? "1px solid var(--interactive-accent)" : "1px solid #ccc";
        this.setHighlighted(true);
      });
      const groupContent = groupContainer.createEl("div", { cls: "regex-group-content" });
      groupContent.style.display = group.isCollapsed ? "none" : "block";
      addRegexButton.addEventListener("click", () => {
        group.regexes = Array.from(groupContainer.querySelectorAll(".regex-group-content .flex-row")).map((row) => {
          const keyInput = row.querySelector("input[placeholder='Description-Key']");
          const valueInput = row.querySelector("input[placeholder='Regexp']");
          const regexActiveCheckbox = row.querySelector("input[type='checkbox']");
          return {
            isActive: regexActiveCheckbox ? regexActiveCheckbox.checked : false,
            key: keyInput ? keyInput.value : "",
            regex: valueInput ? valueInput.value : ""
          };
        });
        group.regexes.unshift({ isActive: true, key: "New Key", regex: "New Regex" });
        this.plugin.settings.regexGroups[index] = group;
        this.plugin.saveSettings();
        this.display();
      });
      deleteGroupButton.addEventListener("click", () => {
        this.plugin.settings.regexGroups.splice(index, 1);
        this.plugin.saveSettings();
        this.display();
      });
      collapseIcon.addEventListener("click", () => {
        group.isCollapsed = !group.isCollapsed;
        groupContent.style.display = group.isCollapsed ? "none" : "block";
        collapseIcon.textContent = group.isCollapsed ? "\u25BA" : "\u25BC";
        this.setHighlighted(true);
      });
      groupNameEl.addEventListener("blur", (event) => {
        const newName = groupNameEl.textContent.trim();
        if (newName.length > 0 && newName !== group.groupName) {
          group.groupName = newName;
          this.updateRegexOrderFromDOM();
          this.plugin.saveSettings();
          new import_obsidian.Notice("Group name updated.");
        } else {
          groupNameEl.textContent = group.groupName;
        }
      });
      if (dragHandle)
        this.makeDraggable(groupContainer, dragHandle);
      group.regexes.forEach((regex) => addRegexToGroup(groupContent, regex));
    };
    const buttonsContainer = containerEl.createDiv();
    buttonsContainer.style.display = "flex";
    buttonsContainer.style.justifyContent = "space-between";
    buttonsContainer.style.marginBottom = "10px";
    const addGroupButton = buttonsContainer.createEl("button", { text: "Add Group" });
    addGroupButton.addEventListener("click", () => {
      const newGroup = {
        isActive: true,
        groupName: "New Group",
        regexes: []
      };
      this.plugin.settings.regexGroups.push(newGroup);
      this.display();
      this.plugin.saveSettings();
    });
    const addRegexPairButton = buttonsContainer.createEl("button", { text: "Add Regexp" });
    addRegexPairButton.addEventListener("click", () => {
      const newPair = { isActive: false, key: "", regex: "" };
      this.addStandaloneRegexUI(newPair);
      this.plugin.settings.regexPairs.push(newPair);
      this.plugin.saveSettings();
    });
    this.plugin.settings.regexGroups.forEach((group, index) => addGroupUI(group, index));
    if (this.plugin.settings.regexPairs && Array.isArray(this.plugin.settings.regexPairs)) {
      this.plugin.settings.regexPairs.forEach((pair) => this.addStandaloneRegexUI(pair));
    }
    this.renderBlacklistUI(containerEl);
  }
  renderBlacklistUI(containerEl) {
    containerEl.createEl("h3", { text: "Blacklist Management" });
    containerEl.createEl("p", { text: "Enter items to blacklist. These items will not be processed." });
    const blacklistContainer = containerEl.createDiv();
    this.plugin.settings.blacklist.forEach((item, index) => {
      const itemDiv = blacklistContainer.createDiv();
      itemDiv.textContent = item;
      const removeButton = itemDiv.createEl("button", { text: "Remove" });
      removeButton.onclick = () => {
        this.plugin.settings.blacklist.splice(index, 1);
        this.plugin.saveSettings().then(() => this.display());
      };
    });
    const addItemInput = containerEl.createEl("input", { type: "text" });
    const addItemButton = containerEl.createEl("button", { text: "Add to Blacklist" });
    addItemButton.onclick = () => {
      if (addItemInput.value && !this.plugin.settings.blacklist.includes(addItemInput.value)) {
        this.plugin.settings.blacklist.push(addItemInput.value);
        addItemInput.value = "";
        this.plugin.saveSettings().then(() => this.display());
      }
    };
  }
  createSettingsUI(containerEl) {
    new import_obsidian.Setting(containerEl).setName("Ignore links").addToggle((toggle) => {
      var _a;
      toggle.setValue((_a = this.plugin.settings.ignoreLinks) != null ? _a : true).onChange(async (value) => {
        this.plugin.settings.ignoreLinks = value;
        await this.plugin.saveSettings();
      }).setTooltip("Do not modify Links, preventing to handle the same data over and over again.");
    });
    new import_obsidian.Setting(containerEl).setName("Ignore URLs").addToggle((toggle) => {
      var _a;
      toggle.setValue((_a = this.plugin.settings.ignoreURLs) != null ? _a : true).onChange(async (value) => {
        this.plugin.settings.ignoreURLs = value;
        await this.plugin.saveSettings();
      }).setTooltip("Do not modify URLs, so they do keep working.");
    });
    new import_obsidian.Setting(containerEl).setName("Defang URLs").addToggle((toggle) => {
      var _a;
      toggle.setValue((_a = this.plugin.settings.defangURLs) != null ? _a : true).onChange(async (value) => {
        this.plugin.settings.defangURLs = value;
        await this.plugin.saveSettings();
      }).setTooltip("Convert https[:]// -> https://");
    });
    new import_obsidian.Setting(containerEl).setName("Ignore code blocks").addToggle((toggle) => {
      var _a;
      toggle.setValue((_a = this.plugin.settings.ignoreCodeBlocks) != null ? _a : false).onChange(async (value) => {
        this.plugin.settings.ignoreCodeBlocks = value;
        await this.plugin.saveSettings();
      }).setTooltip("Ignore content within code blocks when linking regexes.");
    });
    new import_obsidian.Setting(containerEl).setName("Save").addButton((button) => {
      button.setButtonText("Save").onClick(() => {
        this.saveChanges();
      });
      this.saveButton = button.buttonEl;
    });
    new import_obsidian.Setting(containerEl).setName("Reset defaults").addButton((button) => {
      button.setButtonText("Reset").onClick(() => {
        const resetConfirm = confirm("Are you sure you want to reset to default settings?");
        if (resetConfirm) {
          this.resetToDefaults();
          if (this.plugin._settingTabReference) {
            this.plugin._settingTabReference.display();
          }
        }
      });
    });
  }
  resetToDefaults() {
    this.plugin.settings = JSON.parse(JSON.stringify(DEFAULT_SETTINGS));
    this.plugin.saveSettings().then(() => {
      new import_obsidian.Notice("Settings have been reset to defaults.");
      this.display();
    });
  }
  addStandaloneRegexUI(pair) {
    const row = this.keyValueContainer.createEl("div", { cls: "flex-row standalone-regex-row" });
    row.style.display = "flex";
    row.style.alignItems = "center";
    const dragHandle = row.createEl("span", { className: "drag-handle", text: "\u2630" });
    const activeCheckbox = row.createEl("input", { type: "checkbox", className: "active-checkbox" });
    activeCheckbox.checked = pair.isActive;
    const keyInput = row.createEl("input", {
      type: "text",
      className: "key-input-flex",
      value: pair.key,
      placeholder: "Description-Key"
    });
    const valueInput = row.createEl("input", {
      type: "text",
      className: "value-input-flex",
      value: pair.regex,
      placeholder: "Regexp"
    });
    valueInput.style.flexGrow = "1";
    const deleteButton = row.createEl("button", { text: "Delete", className: "delete-button" });
    deleteButton.addEventListener("click", () => {
      row.remove();
      this.updateRegexOrderFromDOM();
      this.plugin.saveSettings();
    });
    const inputsContainer = row.createDiv({ cls: "inputs-container" });
    inputsContainer.append(keyInput, valueInput, deleteButton);
    inputsContainer.style.flexGrow = "1";
    inputsContainer.style.display = "flex";
    inputsContainer.style.justifyContent = "space-between";
    inputsContainer.style.alignItems = "center";
    if (dragHandle)
      this.makeDraggable(row, dragHandle);
  }
};
var RelaxPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this._settingTabReference = new RelaxSettingTab(this.app, this);
    this.addSettingTab(this._settingTabReference);
    this.addCommand({ id: "relax", name: "R.E.L.A.X.", callback: () => this.addBrackets() });
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        menu.addItem((item) => {
          item.setTitle("R.E.L.A.X.").setIcon("curly-braces").onClick(async () => {
            this.addBrackets();
          });
        });
      })
    );
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor, view) => {
        menu.addItem((item) => {
          item.setTitle("R.E.L.A.X.").setIcon("curly-braces").onClick(async () => {
            this.addBrackets();
          });
        });
      })
    );
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor, view) => {
        menu.addItem((item) => {
          item.setTitle("Remove all brackets").setIcon("curly-braces").onClick(async () => {
            this.removeBrackets();
          });
        });
      })
    );
    this.registerEvent(this.app.workspace.on("settings:opened", () => {
      if (this._settingTabReference) {
        this._settingTabReference.setHighlighted(false);
      }
    }));
  }
  async resetToDefaults() {
    this.settings = JSON.parse(JSON.stringify(DEFAULT_SETTINGS));
    await this.saveSettings();
    new import_obsidian.Notice("Settings have been reset to defaults.");
  }
  async loadSettings() {
    try {
      const loadedSettings = await this.loadData();
      if (loadedSettings) {
        this.settings = Object.assign({}, DEFAULT_SETTINGS, loadedSettings);
      } else {
        throw new Error("No settings loaded");
      }
    } catch (e) {
      console.error("Error loading settings:", e);
      await this.resetToDefaults();
    }
  }
  onunload() {
  }
  async saveSettings() {
    await this.saveData(this.settings);
    new import_obsidian.Notice("Config saved!");
  }
  removeBracketsInSelection(content) {
    return content.replace(/([^!])\[\[([^\]]+)\]\]/g, "$1$2");
  }
  async addBracketsForFile(noteFilePath = "") {
    await this.processFileContent(noteFilePath, (content) => this.updateSelection(content, this.settings));
  }
  async removeBracketsinFile(noteFilePath = "") {
    await this.processFileContent(noteFilePath, this.removeBracketsInSelection);
  }
  async processFileContent(noteFilePath, contentProcessor, noteFile) {
    if (!noteFile && noteFilePath !== "") {
      noteFile = this.app.vault.getAbstractFileByPath(noteFilePath);
      if (!noteFile) {
        new import_obsidian.Notice(`No file found at the given path: ${noteFilePath}`);
        return;
      }
    } else if (!noteFile) {
      const leaf = this.app.workspace.activeLeaf || this.app.workspace.getLeaf();
      noteFile = leaf.view instanceof import_obsidian.MarkdownView ? leaf.view.file : null;
      if (!noteFile) {
        new import_obsidian.Notice("No file selected. Please select a markdown file from the editor or navigation bar.");
        return;
      }
    }
    if (!(noteFile instanceof import_obsidian.TFile)) {
      new import_obsidian.Notice("Selected item is not a valid text file.");
      return;
    }
    let fileContent = await this.app.vault.read(noteFile);
    const updatedContent = contentProcessor(fileContent);
    await this.app.vault.modify(noteFile, updatedContent);
  }
  renderBlacklistUI(containerEl) {
    const blacklistSection = containerEl.createEl("div");
    blacklistSection.createEl("h3", { text: "Blacklist" });
    const listContainer = blacklistSection.createEl("div");
    this.plugin.settings.blacklist.forEach((item, index) => {
      const itemEl = listContainer.createEl("div");
      itemEl.createEl("span", { text: item });
      const removeButton = itemEl.createEl("button", { text: "Remove" });
      removeButton.onclick = () => {
        this.plugin.settings.blacklist.splice(index, 1);
        this.plugin.saveSettings().then(() => this.display());
      };
    });
    const addItemInput = blacklistSection.createEl("input", { type: "text" });
    const addItemButton = blacklistSection.createEl("button", { text: "Add" });
    addItemButton.onclick = () => {
      if (addItemInput.value) {
        this.plugin.settings.blacklist.push(addItemInput.value);
        this.plugin.saveSettings().then(() => this.display());
      }
    };
  }
  updateSelection(content, settings) {
    const urlRegex = /(https?:\/\/[^\s]+)/g;
    const excludedExtensions = /\.(exe|lnk|xls|md|sh|elf|bin|tmp|doc|odt|docx|pdf|yara|dll|txt)$/;
    const fangMap = {
      "[.]": ".",
      "[:]": ":"
    };
    if (settings.defangURLs) {
      content = content.replace(/\[\.\]|\[\:\]/g, (char) => fangMap[char]);
    }
    let updatedText = "";
    const lines = content.split("\n");
    let inCodeBlock = false;
    function containsValidLink(line, match) {
      const linkRegex = /\[\[.*?\]\]/g;
      let result;
      while ((result = linkRegex.exec(line)) !== null) {
        if (result.index <= line.indexOf(match) && linkRegex.lastIndex >= line.indexOf(match) + match.length) {
          return true;
        }
      }
      return false;
    }
    lines.forEach((line, index) => {
      if (settings.ignoreCodeBlocks && line.trim().startsWith("```")) {
        inCodeBlock = !inCodeBlock;
        updatedText += line + "\n";
        return;
      }
      if (inCodeBlock) {
        updatedText += line + "\n";
        return;
      }
      let modifiedLine = line;
      settings.regexGroups.forEach((group) => {
        if (!group.isActive)
          return;
        group.regexes.forEach(({ isActive, regex }) => {
          if (!isActive)
            return;
          const compiledRegex = new RegExp(regex, "g");
          modifiedLine = modifiedLine.replace(compiledRegex, (match, ...args) => {
            const groups = args.slice(0, -2).filter((g) => g !== void 0);
            const capturedValue = groups[0];
            if (settings.blacklist.includes(match)) {
              return match;
            }
            if (!capturedValue)
              return match;
            if (settings.ignoreLinks && containsValidLink(line, capturedValue)) {
              return match;
            }
            if (settings.ignoreURLs) {
              const urls = Array.from(line.matchAll(urlRegex), (m) => m[0]);
              let ignoreCurrentMatch = false;
              for (const url of urls) {
                if (!excludedExtensions.test(url) && url.includes(capturedValue)) {
                  ignoreCurrentMatch = true;
                  break;
                }
              }
              if (ignoreCurrentMatch) {
                return match;
              }
            }
            const offset = args[args.length - 2];
            const precedingChar = offset > 0 ? line[offset - 1] : null;
            const spaceIfBackslash = precedingChar === "\\" ? " " : "";
            return `${spaceIfBackslash}[[${match}]]`;
          });
        });
      });
      updatedText += modifiedLine + "\n";
    });
    return updatedText.trim();
  }
  async processMarkdownContent(action) {
    const activeLeaf = this.app.workspace.activeLeaf;
    if (!activeLeaf) {
      new import_obsidian.Notice("Please open a markdown file or select a folder");
      return;
    }
    const view = activeLeaf.view;
    if (!view) {
      new import_obsidian.Notice("Unknown item selected. Please select a markdown file or folder");
      return;
    }
    if (view instanceof import_obsidian.MarkdownView) {
      const selection = view.editor.getSelection();
      if (selection && selection.trim().length !== 0) {
        let updatedSelection;
        if (action === "removeBrackets") {
          updatedSelection = this.removeBracketsInSelection(selection);
          new import_obsidian.Notice("Removed brackets from selection!");
        } else {
          updatedSelection = this.updateSelection(selection, this.settings);
          new import_obsidian.Notice("Added brackets in selection!");
        }
        view.editor.replaceSelection(updatedSelection);
        new import_obsidian.Notice(action === "removeBrackets" ? "Removed brackets from selection!" : "Updated content in selection!");
      } else {
        if (action === "removeBrackets") {
          await this.removeBracketsinFile();
          new import_obsidian.Notice("Removed brackets from entire file!");
        } else {
          await this.addBracketsForFile();
          new import_obsidian.Notice("Added brackets on entire file!");
        }
      }
    }
  }
  async removeBrackets() {
    await this.processMarkdownContent("removeBrackets");
  }
  async addBrackets() {
    const activeLeaf = this.app.workspace.activeLeaf;
    if (!activeLeaf || !activeLeaf.view) {
      new import_obsidian.Notice("Please open a markdown file or select a folder");
      return;
    }
    if (activeLeaf.view instanceof import_obsidian.MarkdownView) {
      const editor = activeLeaf.view.editor;
      const selection = editor.getSelection();
      if (selection && selection.trim().length !== 0) {
        const updatedSelection = this.updateSelection(selection, this.settings);
        editor.replaceSelection(updatedSelection);
        new import_obsidian.Notice("Added brackets in selection!");
        return;
      } else {
        const filePath = activeLeaf.view.file.path;
        await this.addBracketsForFile(filePath);
        new import_obsidian.Notice("Updated entire file!");
        return;
      }
    }
    function isSelected(item) {
      return item.selfEl && item.selfEl.classList.contains("has-focus");
    }
    let selectedFileItem = null;
    for (const key in activeLeaf.view.fileItems) {
      if (Object.prototype.hasOwnProperty.call(activeLeaf.view.fileItems, key)) {
        const item = activeLeaf.view.fileItems[key];
        if (isSelected(item)) {
          selectedFileItem = item;
          break;
        }
      }
    }
    if (!selectedFileItem) {
      new import_obsidian.Notice("No markdown file or folder is currently selected. Please select one.");
      return;
    }
    if (selectedFileItem.collapsible) {
      const folderPath = selectedFileItem.file.path;
      await this.addBracketsForFolder(folderPath);
    } else {
      const filePath = selectedFileItem.file.path;
      await this.addBracketsForFile(filePath);
    }
  }
  async addBracketsForFolder(folderPath) {
    const files = this.app.vault.getMarkdownFiles().filter((file) => file.path.startsWith(folderPath));
    const totalFiles = files.length;
    let processedFiles = 0;
    const processingNotice = new import_obsidian.Notice(`Processing ${totalFiles} files...`, totalFiles * 1e3);
    const maxConcurrentTasks = 20;
    const taskQueue = [];
    const processFile = async (file) => {
      await this.addBracketsForFile(file.path);
      processedFiles++;
      processingNotice.setMessage(`Processing file ${processedFiles} of ${totalFiles}`);
      if (taskQueue.length > 0) {
        const nextTask = taskQueue.shift();
        await nextTask();
      }
    };
    const enqueueTask = (file) => {
      if (taskQueue.length < maxConcurrentTasks) {
        taskQueue.push(() => processFile(file));
      } else {
        processFile(file);
      }
    };
    files.forEach((file) => enqueueTask(file));
    while (taskQueue.length > 0) {
      const nextTask = taskQueue.shift();
      await nextTask();
    }
    processingNotice.hide();
    new import_obsidian.Notice(`All ${totalFiles} files in the folder processed.`);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHtBcHAsIE1hcmtkb3duVmlldywgTm90aWNlLCBQbHVnaW4sIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcsIFRGaWxlfSBmcm9tICdvYnNpZGlhbic7XHJcblxyXG5pbnRlcmZhY2UgUmVnZXhHcm91cCB7XHJcblx0aXNBY3RpdmU6IGJvb2xlYW47XHJcblx0Z3JvdXBOYW1lOiBzdHJpbmc7XHJcblx0cmVnZXhlczogQXJyYXk8eyBpc0FjdGl2ZTogYm9vbGVhbiwga2V5OiBzdHJpbmcsIHJlZ2V4OiBzdHJpbmcgfT47XHJcblx0aXNDb2xsYXBzZWQ/OiBib29sZWFuO1xyXG59XHJcbmludGVyZmFjZSBSZWxheFBsdWdpblNldHRpbmdzIHtcclxuXHRyZWdleEdyb3VwczogQXJyYXk8UmVnZXhHcm91cD47XHJcblx0cmVnZXhQYWlyczogQXJyYXk8eyBpc0FjdGl2ZTogYm9vbGVhbiwga2V5OiBzdHJpbmcsIHJlZ2V4OiBzdHJpbmcgfT47XHJcblx0aWdub3JlTGlua3M/OiBib29sZWFuO1xyXG5cdGlnbm9yZVVSTHM/OiBib29sZWFuO1xyXG5cdGRlZmFuZ1VSTHM/OiBib29sZWFuO1xyXG5cdGlnbm9yZUNvZGVCbG9ja3M/OiBib29sZWFuO1xyXG5cdGJsYWNrbGlzdDogc3RyaW5nW107XHJcbn1cclxuXHJcbnZhciBERUZBVUxUX1NFVFRJTkdTID0ge1xyXG5cdHJlZ2V4UGFpcnM6IFtdLFxyXG5cdHJlZ2V4R3JvdXBzOiBbXHJcblx0XHR7XHJcblx0XHRcdGlzQWN0aXZlOiB0cnVlLFxyXG5cdFx0XHRncm91cE5hbWU6IFwiRGVmYXVsdCBSZWdFeFwiLFxyXG5cdFx0XHRyZWdleGVzOiBbXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJlTWFpbFwiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIihbQS1aYS16MC05Ll8lKy1dK0BbQS1aYS16MC05Li1dK1xcXFwuW0EtWnxhLXpdezIsfSlcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJEb21haW5zXCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiXFxcXGIoW2EtekEtWjAtOVxcXFwtXFxcXC5dK1xcXFwuKD86Y29tfG9yZ3xuZXR8bWlsfGVkdXxDT018T1JHfE5FVHxNSUx8RURVKSlcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJJUHY0XCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiXFxcXGIoKD86KD86KD8hMT8yPzdcXFxcLjBcXFxcLjBcXFxcLjEpKD86MjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KVxcXFwuKXszfSg/OjI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPykpKVxcXFxiXCJcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFwiaXNBY3RpdmVcIjogdHJ1ZSxcclxuXHRcdFx0XHRcdFwia2V5XCI6IFwiR1VJRFwiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIihbQS1GYS1mMC05XXs4fS1bQS1GYS1mMC05XXs0fS1bQS1GYS1mMC05XXs0fS1bQS1GYS1mMC05XXs0fS1bQS1GYS1mMC05XXsxMn0pXCJcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFwiaXNBY3RpdmVcIjogdHJ1ZSxcclxuXHRcdFx0XHRcdFwia2V5XCI6IFwiU0hBMjU2XCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiXFxcXGIoW2EtZkEtRjAtOV17NjR9KVxcXFxiXCJcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFwiaXNBY3RpdmVcIjogdHJ1ZSxcclxuXHRcdFx0XHRcdFwia2V5XCI6IFwiSkFSTVwiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIlxcXFxiKFthLWZBLUYwLTldezYyfSlcXFxcYlwiXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcImlzQWN0aXZlXCI6IHRydWUsXHJcblx0XHRcdFx0XHRcImtleVwiOiBcIlNIQTFcIixcclxuXHRcdFx0XHRcdFwicmVnZXhcIjogXCJcXFxcYihbYS1mQS1GMC05XXs0MH0pXFxcXGJcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJNRDVcIixcclxuXHRcdFx0XHRcdFwicmVnZXhcIjogXCJcXFxcYihbYS1mQS1GMC05XXszMn0pXFxcXGJcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJCaXRjb2luXCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiXFxcXGIoWzEzXXsxfVthLWttLXpBLUhKLU5QLVoxLTldezI2LDMzfXxiYzFbYS16MC05XXszOSw1OX0pXFxcXGJcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJEYXRlXCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiKCg/OjBbMS05XXxbMTJdWzAtOV18M1swMV0pW1xcXFxcXFxcXFxcXC9cXFxcLi1dKD86MFsxLTldfDFbMDEyXSlbXFxcXFxcXFxcXFxcL1xcXFwuLV0oPzoxOXwyMHwpXFxcXGRcXFxcZClcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJXaW5kb3dzIFVzZXJuYW1lc1wiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIlxcXFxcXFxcVXNlcnNcXFxcXFxcXCsoPyEoPzpQdWJsaWN8QWRtaW5pc3RyYXRvcilcXFxcXFxcXCkoW15cXFxcXFxcXF0rKVxcXFxcXFxcXCJcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFwiaXNBY3RpdmVcIjogdHJ1ZSxcclxuXHRcdFx0XHRcdFwia2V5XCI6IFwiTWFya2Rvd24gXFx4QjRcIixcclxuXHRcdFx0XHRcdFwicmVnZXhcIjogXCIoPzpbXFx4QjRdKCgoPzooPyE8YnI+fFxcXFxyfFxcXFxuKVteXFx4QjQgXSl7NCwzMH0pKVtcXHhCNF0pXCJcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFwiaXNBY3RpdmVcIjogdHJ1ZSxcclxuXHRcdFx0XHRcdFwia2V5XCI6IFwiTWFya2Rvd24gJ1wiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIig/OlsnXSgoKD86KD8hPGJyPnxcXFxccnxcXFxcbilbXicgXSl7NCwzMH0pKVsnXSlcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJDVkVzXCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiKENWRS0oMTk5OXwyXFxcXGR7M30pLSg/ITB7NH0pKDBcXFxcZHsyfVswLTldfFsxLTldXFxcXGR7Myx9KSlcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJNQUMgQWRkcmVzc1wiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIihbMC05QS1GYS1mXXsyfVs6LV0pezV9KFswLTlBLUZhLWZdezJ9KVwiXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcImlzQWN0aXZlXCI6IHRydWUsXHJcblx0XHRcdFx0XHRcImtleVwiOiBcIlRvciBPbmlvbiBBZGRyZXNzXCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiXFxcXGIoKD86aHR0cHM/OlxcXFwvXFxcXC8pPyg/Ond3dyk/KFxcXFxTKj9cXFxcLm9uaW9uKVxcXFxiKVwiXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcImlzQWN0aXZlXCI6IHRydWUsXHJcblx0XHRcdFx0XHRcImtleVwiOiBcIklQdjYgQWRkcmVzc1wiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIigoPzpbMC05YS1mQS1GXXsxLDR9Oil7Nyw3fVswLTlhLWZBLUZdezEsNH18KD86WzAtOWEtZkEtRl17MSw0fTopezEsN306fCg/OlswLTlhLWZBLUZdezEsNH06KXsxLDZ9OlswLTlhLWZBLUZdezEsNH18KD86WzAtOWEtZkEtRl17MSw0fTopezEsNX0oPzo6WzAtOWEtZkEtRl17MSw0fSl7MSwyfXwoPzpbMC05YS1mQS1GXXsxLDR9Oil7MSw0fSg/OjpbMC05YS1mQS1GXXsxLDR9KXsxLDN9fCg/OlswLTlhLWZBLUZdezEsNH06KXsxLDN9KD86OlswLTlhLWZBLUZdezEsNH0pezEsNH18KD86WzAtOWEtZkEtRl17MSw0fTopezEsMn0oPzo6WzAtOWEtZkEtRl17MSw0fSl7MSw1fXxbMC05YS1mQS1GXXsxLDR9Oig/Oig/OjpbMC05YS1mQS1GXXsxLDR9KXsxLDZ9KXw6KD86KD86OlswLTlhLWZBLUZdezEsNH0pezEsN318Oil8ZmU4MDooPzo6WzAtOWEtZkEtRl17MCw0fSl7MCw0fSVbMC05YS16QS1aXXsxLH18OjooPzpmZmZmKD86OjB7MSw0fSl7MCwxfTopezAsMX0oPzooPzoyNVswLTVdfCg/OjJbMC00XXwxezAsMX1bMC05XSl7MCwxfVswLTldKVxcXFwuKXszLDN9KD86MjVbMC01XXwoPzoyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSl8KD86WzAtOWEtZkEtRl17MSw0fTopezEsNH06KD86KD86MjVbMC01XXwoPzoyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSlcXFxcLil7MywzfSg/OjI1WzAtNV18KD86MlswLTRdfDF7MCwxfVswLTldKXswLDF9WzAtOV0pKVwiXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcImlzQWN0aXZlXCI6IHRydWUsXHJcblx0XHRcdFx0XHRcImtleVwiOiBcIlNTRGVlcFwiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIihcXFxcZCs6W2EteisvQS1aMC05XSs6W2EteisvQS1aMC05XSssXFxcXFxcXCJbXlxcXFxcXFwiXStcXFxcXFxcIilcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJWVCBzdWJpdHRlclwiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIihbMC05YS1mXXs4fSAtICg/OmFwaXx3ZWIpKVwiXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcImlzQWN0aXZlXCI6IHRydWUsXHJcblx0XHRcdFx0XHRcImtleVwiOiBcIk1BQyBBZHJlc3Nlc1wiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIigoPzpbMC05QS1GYS1mXXsyfVs6LV0pezV9KD86WzAtOUEtRmEtZl17Mn0pKVwiXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcImlzQWN0aXZlXCI6IHRydWUsXHJcblx0XHRcdFx0XHRcImtleVwiOiBcIlBhc3Nwb3J0XCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiKFtBLVBSLVdZXVsxLTldXFxcXGRcXFxccz9cXFxcZHs0fVsxLTldKVwiXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcImlzQWN0aXZlXCI6IHRydWUsXHJcblx0XHRcdFx0XHRcImtleVwiOiBcIk1hcmtkb3duIFxcdTIwMThcIixcclxuXHRcdFx0XHRcdFwicmVnZXhcIjogXCIoPzpbXFx1MjAxOF0oKCg/Oig/ITxicj58XFxcXHJ8XFxcXG4pW15cXHUyMDE4IF0pezQsMzB9KSlbXFx1MjAxOF0pXCJcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFwiaXNBY3RpdmVcIjogdHJ1ZSxcclxuXHRcdFx0XHRcdFwia2V5XCI6IFwiTWFya2Rvd24gXFx1MjAxOVwiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIig/OltcXHUyMDE5XSgoKD86KD8hPGJyPnxcXFxccnxcXFxcbilbXlxcdTIwMTkgXSl7NCwzMH0pKVtcXHUyMDE5XSlcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogJ01hcmtkb3duIFwiJyxcclxuXHRcdFx0XHRcdFwicmVnZXhcIjogJyg/OltcIlxcdTIwMUVcXHUyMDMzXFx1MjAxRF0oKCg/Oig/ITxicj58XFxcXHJ8XFxcXG4pW15cIlxcdTIwMzNcXHUyMDFEIF0pezQsMzB9KSlbXCJcXHUyMDMzXFx1MjAxRF0pJ1xyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJNYXJrZG93biBfXCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiKD86W19dKCgoPzooPyE8YnI+fFxcXFxyfFxcXFxuKVteXyBdKXs0LDMwfSkpW19dKVwiXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcImlzQWN0aXZlXCI6IHRydWUsXHJcblx0XHRcdFx0XHRcImtleVwiOiBcIk1hcmtkb3duIFxcdTIwMThcXHUyMDE5XCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiKD86W1xcdTIwMThdKCgoPzooPyE8YnI+fFxcXFxyfFxcXFxuKVteXFx1MjAxOSBdKXs0LDMwfSkpW1xcdTIwMTldKVwiXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcImlzQWN0aXZlXCI6IHRydWUsXHJcblx0XHRcdFx0XHRcImtleVwiOiBcIlNpZ25hbCBGcmVxdWVuY2llc1wiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIihcXFxcYlswLTldezEsNH0oPzpcXFxcLlxcXFxkezEsNH0pP1xcXFxzPyhIenxrSHp8TUh6fEdIeilcXFxcYilcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJCaWJUZVggRW50cmllc1wiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIkAoYXJ0aWNsZXxib29rfGluYm9va3xjb25mZXJlbmNlfGlucHJvY2VlZGluZ3MpeyhbXn1dKyl9XCJcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFwiaXNBY3RpdmVcIjogdHJ1ZSxcclxuXHRcdFx0XHRcdFwia2V5XCI6IFwiR1BTIENvb3JkaW5hdGVzXCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiXFxcXGJbKy1dP1swLTldezEsMn1cXFxcLlswLTldKyxcXFxccypbKy1dP1swLTldezEsM31cXFxcLlswLTldK1xcXFxiXCJcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFwiaXNBY3RpdmVcIjogdHJ1ZSxcclxuXHRcdFx0XHRcdFwia2V5XCI6IFwiSVNCTiBOdW1iZXJzXCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiXFxcXGJJU0JOXFxcXHM/KD86LT8xM3wtMTApPzo/XFxcXHM/WzAtOS1dezEwLDE3fVxcXFxiXCJcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFwiaXNBY3RpdmVcIjogdHJ1ZSxcclxuXHRcdFx0XHRcdFwia2V5XCI6IFwiQ2FtZXJhIFNldHRpbmdzXCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiXFxcXGJJU09cXFxccz9bMC05XSt8Zi9bMC05Ll0rfDEvWzAtOV0rXFxcXHM/c2VjXFxcXGJcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJIaXN0b3JpY2FsIERhdGVzXCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiXFxcXGIoPzpbMC05XXsxLDR9IChBRHxCQyl8WzAtOV17MSw0fXRoIGNlbnR1cnkpXFxcXGJcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiB0cnVlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJQcm9jZXNzb3IgU3BlY3NcIixcclxuXHRcdFx0XHRcdFwicmVnZXhcIjogXCJcXFxcYkludGVsIENvcmUgaVszNTc5XS1bMC05XXs0fVtIUUdVXUs/fEFNRCBSeXplbiBbMzU3OV0gWzAtOV17NH1YP1xcXFxiXCJcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFwiaXNBY3RpdmVcIjogZmFsc2UsXHJcblx0XHRcdFx0XHRcImtleVwiOiBcIkJhc2U2NCBTdHJpbmdzXCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiKFtBLVphLXowLTkrL117NH0pKihbQS1aYS16MC05Ky9dezJ9PT18W0EtWmEtejAtOSsvXXszfT0pP1wiXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcImlzQWN0aXZlXCI6IGZhbHNlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJTY3JpcHQgTGFuZ3VhZ2UgRmlsZVwiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIihbXFxcXHddK1xcXFwuKD86cHl8anN8amF2YXxjc3xjcHB8cmJ8Z298cGhwKSlbXFxcXGJdXCJcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFwiaXNBY3RpdmVcIjogZmFsc2UsXHJcblx0XHRcdFx0XHRcImtleVwiOiBcIkNob3JkIFByb2dyZXNzaW9uc1wiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIlxcXFxiKCg/OkN8RG18RW18RnxHfEFtfEJkaW0pKD86XFxcXHMtPlxcXFxzKD86Q3xEbXxFbXxGfEd8QW18QmRpbSkpKilcXFxcYlwiXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcImlzQWN0aXZlXCI6IGZhbHNlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJIZXggQ29sb3JzXCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiIyhbYS1mQS1GMC05XXs2fXxbYS1mQS1GMC05XXszfSlcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiBmYWxzZSxcclxuXHRcdFx0XHRcdFwia2V5XCI6IFwiQ2hlbWljYWwgRWxlbWVudHNcIixcclxuXHRcdFx0XHRcdFwicmVnZXhcIjogXCJcXFxcYig/Okh8SGV8TGl8QmV8QnxDfE58T3xGfE5lfE5hfE1nfEFsfFNpfFB8U3xDbHxBcnxLfENhKVxcXFxiXCJcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFwiaXNBY3RpdmVcIjogZmFsc2UsXHJcblx0XHRcdFx0XHRcImtleVwiOiBcIkhhc2h0YWdzXCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiI1tBLVphLXowLTlfXStcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJpc0FjdGl2ZVwiOiBmYWxzZSxcclxuXHRcdFx0XHRcdFwia2V5XCI6IFwiQWNhZGVtaWMgQ2l0YXRpb25zXCIsXHJcblx0XHRcdFx0XHRcInJlZ2V4XCI6IFwiXFxcXGJcXFxcKFtBLVphLXpdKyxcXFxcc1swLTldezR9XFxcXClcXFxcYlwiXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcImlzQWN0aXZlXCI6IGZhbHNlLFxyXG5cdFx0XHRcdFx0XCJrZXlcIjogXCJUZW1wZXJhdHVyZSBSZWFkaW5nc1wiLFxyXG5cdFx0XHRcdFx0XCJyZWdleFwiOiBcIlxcXFxiLT9bMC05XStcXFxccz8oXFx4QjBDfFxceEIwRnxLKVxcXFxiXCJcclxuXHRcdFx0XHR9XHJcblx0XHRcdF1cclxuXHRcdH1cclxuXHRdLFxyXG5cdGlnbm9yZUxpbmtzOiB0cnVlLFxyXG5cdGlnbm9yZUNvZGVCbG9ja3M6IHRydWUsXHJcblx0ZGVmYW5nVVJMczogdHJ1ZSxcclxuXHRpZ25vcmVVUkxzOiBmYWxzZSxcclxuXHRibGFja2xpc3Q6IFtdXHJcbn07XHJcblxyXG5jbGFzcyBSZWxheFNldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcclxuXHRwbHVnaW46IFJlbGF4UGx1Z2luO1xyXG5cdGtleVZhbHVlQ29udGFpbmVyOiBIVE1MRGl2RWxlbWVudDtcclxuXHRzYXZlQnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudDtcclxuXHRpc0hpZ2hsaWdodGVkID0gZmFsc2U7XHJcblx0ZHJhZ0VsZW1lbnQgPSBudWxsO1xyXG5cdGN1cnJlbnRJbmRleCA9IG51bGw7XHJcblx0bmV3SW5kZXggPSBudWxsO1xyXG5cdHN0YXJ0WSA9IDA7XHJcblx0c3RhcnRUb3AgPSAwO1xyXG5cdGluaXRpYWxPZmZzZXRZID0gMDtcclxuXHRwcml2YXRlIHNldHRpbmdzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcclxuXHJcblxyXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IFJlbGF4UGx1Z2luKSB7XHJcblx0XHRzdXBlcihhcHAsIHBsdWdpbik7XHJcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuXHRcdHRoaXMub25EcmFnRW5kID0gdGhpcy5vbkRyYWdFbmQuYmluZCh0aGlzKTtcclxuXHRcdHRoaXMub25EcmFnTW92ZSA9IHRoaXMub25EcmFnTW92ZS5iaW5kKHRoaXMpO1xyXG5cdFx0dGhpcy5tYWtlRHJhZ2dhYmxlID0gdGhpcy5tYWtlRHJhZ2dhYmxlLmJpbmQodGhpcyk7XHJcblxyXG5cdFx0dGhpcy51cGRhdGVSZWdleE9yZGVyRnJvbURPTSA9ICgpID0+IHtcclxuXHRcdFx0Y29uc3QgcmVnZXhHcm91cHMgPSBbXTtcclxuXHRcdFx0dGhpcy5rZXlWYWx1ZUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKFwiLnJlZ2V4LWdyb3VwLWNvbnRhaW5lclwiKS5mb3JFYWNoKGdyb3VwQ29udGFpbmVyID0+IHtcclxuXHRcdFx0XHRjb25zdCBncm91cE5hbWVFbGVtZW50ID0gZ3JvdXBDb250YWluZXIucXVlcnlTZWxlY3RvcihcIi5yZWdleC1ncm91cC1uYW1lXCIpO1xyXG5cdFx0XHRcdGNvbnN0IGFjdGl2ZUNoZWNrYm94SW5wdXQgPSBncm91cENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiaW5wdXRbdHlwZT0nY2hlY2tib3gnXVwiKTtcclxuXHRcdFx0XHRjb25zdCBncm91cE5hbWUgPSBncm91cE5hbWVFbGVtZW50ID8gZ3JvdXBOYW1lRWxlbWVudC50ZXh0Q29udGVudCA6IFwiXCI7XHJcblx0XHRcdFx0Y29uc3QgaXNBY3RpdmUgPSBhY3RpdmVDaGVja2JveElucHV0ID8gYWN0aXZlQ2hlY2tib3hJbnB1dC5jaGVja2VkIDogZmFsc2U7XHJcblxyXG5cdFx0XHRcdGNvbnN0IHJlZ2V4ZXMgPSBBcnJheS5mcm9tKGdyb3VwQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoXCIucmVnZXgtZ3JvdXAtY29udGVudCAuZmxleC1yb3dcIikpLm1hcChyb3cgPT4ge1xyXG5cdFx0XHRcdFx0Y29uc3Qga2V5SW5wdXQgPSByb3cucXVlcnlTZWxlY3RvcihcImlucHV0W3BsYWNlaG9sZGVyPSdEZXNjcmlwdGlvbi1LZXknXVwiKTtcclxuXHRcdFx0XHRcdGNvbnN0IHZhbHVlSW5wdXQgPSByb3cucXVlcnlTZWxlY3RvcihcImlucHV0W3BsYWNlaG9sZGVyPSdSZWdleHAnXVwiKTtcclxuXHRcdFx0XHRcdGNvbnN0IHJlZ2V4QWN0aXZlQ2hlY2tib3ggPSByb3cucXVlcnlTZWxlY3RvcihcImlucHV0W3R5cGU9J2NoZWNrYm94J11cIik7XHJcblx0XHRcdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdFx0XHRpc0FjdGl2ZTogcmVnZXhBY3RpdmVDaGVja2JveCA/IHJlZ2V4QWN0aXZlQ2hlY2tib3guY2hlY2tlZCA6IGZhbHNlLFxyXG5cdFx0XHRcdFx0XHRrZXk6IGtleUlucHV0ID8ga2V5SW5wdXQudmFsdWUgOiBcIlwiLFxyXG5cdFx0XHRcdFx0XHRyZWdleDogdmFsdWVJbnB1dCA/IHZhbHVlSW5wdXQudmFsdWUgOiBcIlwiXHJcblx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRjb25zdCBpc0NvbGxhcHNlZCA9IGdyb3VwQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5yZWdleC1ncm91cC1jb250ZW50Jykuc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCI7XHJcblx0XHRcdFx0cmVnZXhHcm91cHMucHVzaCh7aXNBY3RpdmUsIGdyb3VwTmFtZSwgcmVnZXhlcywgaXNDb2xsYXBzZWR9KTtcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHRpZiAodGhpcy5wbHVnaW4gJiYgdGhpcy5wbHVnaW4uc2V0dGluZ3MpIHtcclxuXHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5yZWdleEdyb3VwcyA9IHJlZ2V4R3JvdXBzO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJQbHVnaW4gb3Igc2V0dGluZ3Mgbm90IGF2YWlsYWJsZVwiKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRjb25zdCByZWdleFBhaXJzID0gQXJyYXkuZnJvbSh0aGlzLmtleVZhbHVlQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc3RhbmRhbG9uZS1yZWdleC1yb3dcIikpLm1hcChyb3cgPT4ge1xyXG5cdFx0XHRcdGNvbnN0IGtleUlucHV0ID0gcm93LnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFtwbGFjZWhvbGRlcj0nRGVzY3JpcHRpb24tS2V5J11cIik7XHJcblx0XHRcdFx0Y29uc3QgdmFsdWVJbnB1dCA9IHJvdy5xdWVyeVNlbGVjdG9yKFwiaW5wdXRbcGxhY2Vob2xkZXI9J1JlZ2V4cCddXCIpO1xyXG5cdFx0XHRcdGNvbnN0IHJlZ2V4QWN0aXZlQ2hlY2tib3ggPSByb3cucXVlcnlTZWxlY3RvcihcImlucHV0W3R5cGU9J2NoZWNrYm94J11cIik7XHJcblx0XHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRcdGlzQWN0aXZlOiByZWdleEFjdGl2ZUNoZWNrYm94ID8gcmVnZXhBY3RpdmVDaGVja2JveC5jaGVja2VkIDogZmFsc2UsXHJcblx0XHRcdFx0XHRrZXk6IGtleUlucHV0ID8ga2V5SW5wdXQudmFsdWUgOiBcIlwiLFxyXG5cdFx0XHRcdFx0cmVnZXg6IHZhbHVlSW5wdXQgPyB2YWx1ZUlucHV0LnZhbHVlIDogXCJcIlxyXG5cdFx0XHRcdH07XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MucmVnZXhQYWlycyA9IHJlZ2V4UGFpcnM7XHJcblx0XHRcdHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0fTtcclxuXHJcblxyXG5cdFx0dGhpcy5zYXZlQ2hhbmdlcyA9ICgpID0+IHtcclxuXHRcdFx0dGhpcy51cGRhdGVSZWdleE9yZGVyRnJvbURPTSgpO1xyXG5cdFx0XHR0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0Y29uc3QgY2xvc2VCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsLWNsb3NlLWJ1dHRvblwiKTtcclxuXHRcdFx0aWYgKGNsb3NlQnV0dG9uKSB7XHJcblx0XHRcdFx0Y2xvc2VCdXR0b24uY2xpY2soKTtcclxuXHRcdFx0fVxyXG5cdFx0XHR0aGlzLnNldEhpZ2hsaWdodGVkKGZhbHNlKTtcclxuXHRcdH07XHJcblx0fVxyXG5cclxuXHRtYWtlRHJhZ2dhYmxlKGVsZW1lbnQsIGRyYWdIYW5kbGUpIHtcclxuXHRcdGlmICghZHJhZ0hhbmRsZSkge1xyXG5cdFx0XHRjb25zb2xlLmVycm9yKFwiRHJhZyBoYW5kbGUgbm90IGZvdW5kIVwiLCBlbGVtZW50LmlubmVySFRNTCk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRkcmFnSGFuZGxlLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgKGUpID0+IHtcclxuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuXHRcdFx0dGhpcy5kcmFnRWxlbWVudCA9IGVsZW1lbnQ7XHJcblx0XHRcdHRoaXMuZHJhZ0VsZW1lbnQuY2xhc3NMaXN0LmFkZChcImRyYWdnaW5nXCIpO1xyXG5cclxuXHRcdFx0dGhpcy5wbGFjZWhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cdFx0XHR0aGlzLnBsYWNlaG9sZGVyLmNsYXNzTmFtZSA9ICdwbGFjZWhvbGRlcic7XHJcblx0XHRcdHRoaXMucGxhY2Vob2xkZXIuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xyXG5cdFx0XHR0aGlzLnBsYWNlaG9sZGVyLnN0eWxlLmhlaWdodCA9IGAke2VsZW1lbnQub2Zmc2V0SGVpZ2h0fXB4YDtcclxuXHRcdFx0dGhpcy5wbGFjZWhvbGRlci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAncmdiYSgwLCAwLCAwLCAwLjEpJztcclxuXHRcdFx0ZWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLnBsYWNlaG9sZGVyLCBlbGVtZW50KTtcclxuXHJcblx0XHRcdHRoaXMuZHJhZ0VsZW1lbnQuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG5cdFx0XHR0aGlzLmRyYWdFbGVtZW50LnN0eWxlLmJvcmRlciA9ICdub25lJztcclxuXHJcblx0XHRcdGNvbnN0IGNsb25lID0gdGhpcy5kcmFnRWxlbWVudC5jbG9uZU5vZGUodHJ1ZSk7XHJcblx0XHRcdGNsb25lLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuXHRcdFx0Y2xvbmUuc3R5bGUudG9wID0gJzAnO1xyXG5cdFx0XHRjbG9uZS5zdHlsZS5sZWZ0ID0gJzAnO1xyXG5cdFx0XHRjbG9uZS5zdHlsZS53aWR0aCA9ICcxMDAlJztcclxuXHRcdFx0Y2xvbmUuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xyXG5cdFx0XHRjbG9uZS5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xyXG5cdFx0XHRjbG9uZS5zdHlsZS5wb2ludGVyRXZlbnRzID0gJ25vbmUnO1xyXG5cdFx0XHRjbG9uZS5zdHlsZS56SW5kZXggPSAnOTk5JztcclxuXHRcdFx0dGhpcy5wbGFjZWhvbGRlci5hcHBlbmRDaGlsZChjbG9uZSk7XHJcblxyXG5cdFx0XHRjb25zdCBmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cdFx0XHRmcmFtZS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcblx0XHRcdGZyYW1lLnN0eWxlLnRvcCA9ICcwJztcclxuXHRcdFx0ZnJhbWUuc3R5bGUubGVmdCA9ICcwJztcclxuXHRcdFx0ZnJhbWUuc3R5bGUud2lkdGggPSAnMTAwJSc7XHJcblx0XHRcdGZyYW1lLnN0eWxlLmhlaWdodCA9ICcxMDAlJztcclxuXHRcdFx0ZnJhbWUuc3R5bGUuYm9yZGVyID0gJzJweCBkYXNoZWQgdmFyKC0taW50ZXJhY3RpdmUtYWNjZW50KSc7XHJcblx0XHRcdGZyYW1lLnN0eWxlLmJveFNpemluZyA9ICdib3JkZXItYm94JztcclxuXHRcdFx0ZnJhbWUuc3R5bGUuekluZGV4ID0gJzEwMDAnO1xyXG5cdFx0XHR0aGlzLnBsYWNlaG9sZGVyLmFwcGVuZENoaWxkKGZyYW1lKTtcclxuXHJcblx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5vbkRyYWdNb3ZlKTtcclxuXHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy5vbkRyYWdFbmQpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cdGZpbmRDbG9zZXN0R3JvdXBPclN0YW5kYWxvbmVBcmVhKHlQb3NpdGlvbikge1xyXG5cdFx0bGV0IGNsb3Nlc3QgPSBudWxsO1xyXG5cdFx0bGV0IGNsb3Nlc3REaXN0YW5jZSA9IEluZmluaXR5O1xyXG5cclxuXHRcdGNvbnN0IGFsbENvbnRhaW5lcnMgPSB0aGlzLmtleVZhbHVlQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5yZWdleC1ncm91cC1jb250YWluZXIsIC5zdGFuZGFsb25lLXJlZ2V4LXJvdycpO1xyXG5cclxuXHRcdGFsbENvbnRhaW5lcnMuZm9yRWFjaChjb250YWluZXIgPT4ge1xyXG5cdFx0XHRjb25zdCByZWN0ID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cdFx0XHRjb25zdCBjb250YWluZXJNaWRwb2ludCA9IHdpbmRvdy5zY3JvbGxZICsgcmVjdC50b3AgKyByZWN0LmhlaWdodCAvIDI7XHJcblx0XHRcdGNvbnN0IGRpc3RhbmNlID0gTWF0aC5hYnMoeVBvc2l0aW9uIC0gY29udGFpbmVyTWlkcG9pbnQpO1xyXG5cclxuXHRcdFx0aWYgKGRpc3RhbmNlIDwgY2xvc2VzdERpc3RhbmNlKSB7XHJcblx0XHRcdFx0Y2xvc2VzdCA9IGNvbnRhaW5lcjtcclxuXHRcdFx0XHRjbG9zZXN0RGlzdGFuY2UgPSBkaXN0YW5jZTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0cmV0dXJuIGNsb3Nlc3Q7XHJcblx0fVxyXG5cclxuXHRmaW5kU291cmNlR3JvdXBJbmRleChkcmFnRWxlbWVudCkge1xyXG5cdFx0Y29uc3QgZ3JvdXBDb250YWluZXIgPSBkcmFnRWxlbWVudC5jbG9zZXN0KCcucmVnZXgtZ3JvdXAtY29udGFpbmVyJyk7XHJcblx0XHRpZiAoIWdyb3VwQ29udGFpbmVyKSByZXR1cm4gLTE7XHJcblxyXG5cdFx0Y29uc3QgZ3JvdXBOYW1lID0gZ3JvdXBDb250YWluZXIucXVlcnlTZWxlY3RvcihcIi5yZWdleC1ncm91cC1uYW1lXCIpLnRleHRDb250ZW50LnRyaW0oKTtcclxuXHRcdHJldHVybiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5yZWdleEdyb3Vwcy5maW5kSW5kZXgoZ3JvdXAgPT4gZ3JvdXAuZ3JvdXBOYW1lID09PSBncm91cE5hbWUpO1xyXG5cdH1cclxuXHJcblx0YWRqdXN0UGxhY2Vob2xkZXJQb3NpdGlvbih0YXJnZXRHcm91cCkge1xyXG5cdFx0aWYgKCF0aGlzLmRyYWdFbGVtZW50IHx8ICF0aGlzLnBsYWNlaG9sZGVyKSByZXR1cm47XHJcblx0XHRpZiAodGFyZ2V0R3JvdXAuY2xhc3NMaXN0LmNvbnRhaW5zKCdyZWdleC1ncm91cC1jb250YWluZXInKSB8fCB0YXJnZXRHcm91cC5jbGFzc0xpc3QuY29udGFpbnMoJ3N0YW5kYWxvbmUtcmVnZXgtcm93JykpIHtcclxuXHRcdFx0Y29uc3QgcGFyZW50ID0gdGFyZ2V0R3JvdXAucGFyZW50Tm9kZTtcclxuXHJcblx0XHRcdGlmIChwYXJlbnQgJiYgKHBhcmVudCA9PT0gdGhpcy5wbGFjZWhvbGRlci5wYXJlbnROb2RlKSkge1xyXG5cdFx0XHRcdHBhcmVudC5pbnNlcnRCZWZvcmUodGhpcy5wbGFjZWhvbGRlciwgdGFyZ2V0R3JvdXApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRvbkRyYWdNb3ZlKGUpIHtcclxuXHRcdGlmICghdGhpcy5kcmFnRWxlbWVudCkgcmV0dXJuO1xyXG5cclxuXHRcdGNvbnN0IHBhcmVudCA9IHRoaXMuZHJhZ0VsZW1lbnQucGFyZW50RWxlbWVudDtcclxuXHRcdGNvbnN0IHNjcm9sbFRvcCA9IHBhcmVudC5zY3JvbGxUb3A7XHJcblx0XHRjb25zdCBtb3VzZVkgPSBlLmNsaWVudFkgKyBzY3JvbGxUb3A7XHJcblxyXG5cdFx0bGV0IGNsb3Nlc3QgPSBudWxsO1xyXG5cdFx0bGV0IGNsb3Nlc3REaXN0YW5jZSA9IEluZmluaXR5O1xyXG5cclxuXHRcdFsuLi5wYXJlbnQuY2hpbGRyZW5dLmZvckVhY2goKGNoaWxkKSA9PiB7XHJcblx0XHRcdGlmIChjaGlsZCAhPT0gdGhpcy5kcmFnRWxlbWVudCAmJiBjaGlsZCAhPT0gdGhpcy5wbGFjZWhvbGRlcikge1xyXG5cdFx0XHRcdGNvbnN0IHJlY3QgPSBjaGlsZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHRcdFx0XHRjb25zdCBjaGlsZE1pZHBvaW50ID0gcmVjdC50b3AgKyBzY3JvbGxUb3AgKyByZWN0LmhlaWdodCAvIDI7XHJcblx0XHRcdFx0Y29uc3QgZGlzdGFuY2UgPSBNYXRoLmFicyhtb3VzZVkgLSBjaGlsZE1pZHBvaW50KTtcclxuXHJcblx0XHRcdFx0aWYgKGRpc3RhbmNlIDwgY2xvc2VzdERpc3RhbmNlKSB7XHJcblx0XHRcdFx0XHRjbG9zZXN0ID0gY2hpbGQ7XHJcblx0XHRcdFx0XHRjbG9zZXN0RGlzdGFuY2UgPSBkaXN0YW5jZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdGlmICh0aGlzLnBsYWNlaG9sZGVyKSB7XHJcblx0XHRcdGNvbnN0IGNsb25lID0gdGhpcy5wbGFjZWhvbGRlci5xdWVyeVNlbGVjdG9yKCcuY2xvbmUtY2xhc3MnKTtcclxuXHRcdFx0aWYgKGNsb25lKSB7XHJcblx0XHRcdFx0Y2xvbmUuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVkoJHtlLmNsaWVudFkgLSB0aGlzLnN0YXJ0WX1weClgO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGNsb3Nlc3QpIHtcclxuXHRcdFx0Y29uc3QgcmVjdCA9IGNsb3Nlc3QuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblx0XHRcdGNvbnN0IGNoaWxkTWlkcG9pbnQgPSByZWN0LnRvcCArIHNjcm9sbFRvcCArIHJlY3QuaGVpZ2h0IC8gMjtcclxuXHRcdFx0aWYgKG1vdXNlWSA8IGNoaWxkTWlkcG9pbnQpIHtcclxuXHRcdFx0XHRwYXJlbnQuaW5zZXJ0QmVmb3JlKHRoaXMucGxhY2Vob2xkZXIsIGNsb3Nlc3QpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHBhcmVudC5pbnNlcnRCZWZvcmUodGhpcy5wbGFjZWhvbGRlciwgY2xvc2VzdC5uZXh0U2libGluZyk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRsZXQgdGFyZ2V0R3JvdXAgPSB0aGlzLmZpbmRDbG9zZXN0R3JvdXBPclN0YW5kYWxvbmVBcmVhKGUuY2xpZW50WSk7XHJcblx0XHRpZiAodGFyZ2V0R3JvdXApIHtcclxuXHRcdFx0aWYgKHRhcmdldEdyb3VwLmNsYXNzTGlzdC5jb250YWlucygncmVnZXgtZ3JvdXAtY29udGFpbmVyJykpIHtcclxuXHRcdFx0XHRpZiAodGFyZ2V0R3JvdXApIHtcclxuXHRcdFx0XHRcdHRoaXMuYWRqdXN0UGxhY2Vob2xkZXJQb3NpdGlvbih0YXJnZXRHcm91cCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdGZpbmRSZWdleEluZGV4SW5Hcm91cChkcmFnRWxlbWVudCwgc291cmNlR3JvdXBJbmRleClcclxuXHR7XHJcblx0XHRjb25zdCBncm91cCA9IHRoaXMucGx1Z2luLnNldHRpbmdzLnJlZ2V4R3JvdXBzW3NvdXJjZUdyb3VwSW5kZXhdO1xyXG5cdFx0Y29uc3QgcmVnZXhLZXkgPSBkcmFnRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiaW5wdXRbcGxhY2Vob2xkZXI9J0Rlc2NyaXB0aW9uLUtleSddXCIpLnZhbHVlO1xyXG5cdFx0cmV0dXJuIGdyb3VwLnJlZ2V4ZXMuZmluZEluZGV4KHJlZ2V4ID0+IHJlZ2V4LmtleSA9PT0gcmVnZXhLZXkpO1xyXG5cdH1cclxuXHJcblx0b25EcmFnRW5kKCkge1xyXG5cdFx0aWYgKCF0aGlzLmRyYWdFbGVtZW50IHx8ICF0aGlzLnBsYWNlaG9sZGVyKVxyXG5cdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0dGhpcy5wbGFjZWhvbGRlci5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLmRyYWdFbGVtZW50LCB0aGlzLnBsYWNlaG9sZGVyKTtcclxuXHRcdHRoaXMuZHJhZ0VsZW1lbnQuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xyXG5cdFx0dGhpcy5wbGFjZWhvbGRlci5yZW1vdmUoKTtcclxuXHRcdHRoaXMuZHJhZ0VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImRyYWdnaW5nXCIpO1xyXG5cdFx0dGhpcy5kcmFnRWxlbWVudCA9IG51bGw7XHJcblx0XHR0aGlzLnBsYWNlaG9sZGVyID0gbnVsbDtcclxuXHJcblx0XHR0aGlzLnVwZGF0ZVJlZ2V4T3JkZXJGcm9tRE9NKCk7XHJcblx0XHR0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHR9XHJcblxyXG5cclxuXHRmaW5kR3JvdXBJbmRleChncm91cEVsZW1lbnQpIHtcclxuXHRcdGlmICghZ3JvdXBFbGVtZW50KSByZXR1cm4gLTE7XHJcblx0XHRjb25zdCBncm91cE5hbWUgPSBncm91cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5yZWdleC1ncm91cC1uYW1lXCIpLnRleHRDb250ZW50LnRyaW0oKTtcclxuXHRcdHJldHVybiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5yZWdleEdyb3Vwcy5maW5kSW5kZXgoZ3JvdXAgPT4gZ3JvdXAuZ3JvdXBOYW1lID09PSBncm91cE5hbWUpO1xyXG5cdH1cclxuXHJcblx0ZmluZFJlZ2V4UGFpckluZGV4KGRyYWdnZWRFbGVtZW50KSB7XHJcblx0XHRjb25zdCBrZXkgPSBkcmFnZ2VkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiaW5wdXRbcGxhY2Vob2xkZXI9J0Rlc2NyaXB0aW9uLUtleSddXCIpLnZhbHVlO1xyXG5cdFx0cmV0dXJuIHRoaXMucGx1Z2luLnNldHRpbmdzLnJlZ2V4UGFpcnMuZmluZEluZGV4KHBhaXIgPT4gcGFpci5rZXkgPT09IGtleSk7XHJcblx0fVxyXG5cclxuXHJcblx0c2V0SGlnaGxpZ2h0ZWQoaGlnaGxpZ2h0OiBib29sZWFuKSB7XHJcblx0XHR0aGlzLmlzSGlnaGxpdGVkID0gaGlnaGxpZ2h0O1xyXG5cdFx0aWYgKHRoaXMuc2F2ZUJ1dHRvbikge1xyXG5cdFx0XHR0aGlzLnNhdmVCdXR0b24uZGlzYWJsZWQgPSAhaGlnaGxpZ2h0O1xyXG5cdFx0XHRpZiAoaGlnaGxpZ2h0KSB7XHJcblx0XHRcdFx0dGhpcy5zYXZlQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJpcy1oaWdobGlnaHRcIik7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dGhpcy5zYXZlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoXCJpcy1oaWdobGlnaHRcIik7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGRpc3BsYXkoKSB7XHJcblx0XHRjb25zdCB7IGNvbnRhaW5lckVsIH0gPSB0aGlzO1xyXG5cdFx0Y29udGFpbmVyRWwuZW1wdHkoKTtcclxuXHRcdHRoaXMua2V5VmFsdWVDb250YWluZXIgPSBjb250YWluZXJFbC5jcmVhdGVFbChcImRpdlwiKTtcclxuXHRcdHRoaXMua2V5VmFsdWVDb250YWluZXIuY2xhc3NMaXN0LmFkZChcImZsZXgtY29sdW1uXCIpO1xyXG5cclxuXHRcdHRoaXMuY3JlYXRlU2V0dGluZ3NVSShjb250YWluZXJFbCk7XHJcblxyXG5cdFx0Y29uc3QgdmFsaWRhdGVDb250ZW50ID0gKGNvbnRlbnQpID0+IHtcclxuXHRcdFx0Y29uc3QgcmVnZXggPSAvXFxbXFxbKC4rPylcXF1cXF0vZztcclxuXHRcdFx0cmV0dXJuICFyZWdleC50ZXN0KGNvbnRlbnQpO1xyXG5cdFx0fTtcclxuXHJcblx0XHRjb25zdCBhcHBseVZhbGlkYXRpb25TdHlsZSA9ICh0ZXh0YXJlYSkgPT4ge1xyXG5cdFx0XHRpZiAodmFsaWRhdGVDb250ZW50KHRleHRhcmVhLnZhbHVlKSkge1xyXG5cdFx0XHRcdHRleHRhcmVhLmNsYXNzTGlzdC50b2dnbGUoXCJ2YWxpZC1jb250ZW50XCIsIHZhbGlkYXRlQ29udGVudCh0ZXh0YXJlYS52YWx1ZSkpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHRleHRhcmVhLmNsYXNzTGlzdC50b2dnbGUoXCJpbnZhbGlkLWNvbnRlbnRcIiwgIXZhbGlkYXRlQ29udGVudCh0ZXh0YXJlYS52YWx1ZSkpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIChldmVudCkgPT4ge1xyXG5cdFx0XHRjb25zdCBtb2RhbEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjb3Blbk1vZGFsQnV0dG9uXCIpO1xyXG5cclxuXHRcdFx0bW9kYWxCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRjb25zdCBtb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxcIik7XHJcblx0XHRcdFx0Y29uc3QgdGV4dGFyZWEgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKFwidGV4dGFyZWFcIik7XHJcblxyXG5cdFx0XHRcdGFwcGx5VmFsaWRhdGlvblN0eWxlKHRleHRhcmVhKTtcclxuXHJcblx0XHRcdFx0dGV4dGFyZWEuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdGFwcGx5VmFsaWRhdGlvblN0eWxlKHRleHRhcmVhKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHRsZXQgZHJhZ2dlZEVsZW1lbnQgPSBudWxsO1xyXG5cdFx0XHRsZXQgcGxhY2Vob2xkZXIgPSBudWxsO1xyXG5cclxuXHRcdFx0Y29uc3QgY3JlYXRlUGxhY2Vob2xkZXIgPSAoKSA9PiB7XHJcblx0XHRcdFx0Y29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblx0XHRcdFx0ZGl2LnN0eWxlLmhlaWdodCA9ICcycHgnO1xyXG5cdFx0XHRcdGRpdi5zdHlsZS5iYWNrZ3JvdW5kID0gJ2JsdWUnO1xyXG5cdFx0XHRcdGRpdi5zdHlsZS5tYXJnaW4gPSAnNXB4IDAnO1xyXG5cdFx0XHRcdHJldHVybiBkaXY7XHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZHJhZ2dhYmxlJykuZm9yRWFjaChlbGVtID0+IHtcclxuXHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRcdGRyYWdnZWRFbGVtZW50ID0gdGhpcztcclxuXHRcdFx0XHRcdHBsYWNlaG9sZGVyID0gY3JlYXRlUGxhY2Vob2xkZXIoKTtcclxuXHRcdFx0XHRcdGRyYWdnZWRFbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHBsYWNlaG9sZGVyLCBkcmFnZ2VkRWxlbWVudC5uZXh0U2libGluZyk7XHJcblx0XHRcdFx0XHRkcmFnZ2VkRWxlbWVudC5zdHlsZS5vcGFjaXR5ID0gJzAuNSc7XHJcblx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIChlKSA9PiB7XHJcblx0XHRcdFx0XHRpZiAoIWRyYWdnZWRFbGVtZW50KSByZXR1cm47XHJcblxyXG5cdFx0XHRcdFx0Y29uc3QgcmVjdCA9IHBsYWNlaG9sZGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cdFx0XHRcdFx0Y29uc3QgcGFyZW50ID0gcGxhY2Vob2xkZXIucGFyZW50Tm9kZTtcclxuXHRcdFx0XHRcdHBhcmVudC5jaGlsZE5vZGVzLmZvckVhY2goKGNoaWxkKSA9PiB7XHJcblx0XHRcdFx0XHRcdGlmIChjaGlsZCAhPT0gZHJhZ2dlZEVsZW1lbnQgJiYgY2hpbGQgIT09IHBsYWNlaG9sZGVyKSB7XHJcblx0XHRcdFx0XHRcdFx0Y29uc3QgY2hpbGRSZWN0ID0gY2hpbGQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblx0XHRcdFx0XHRcdFx0aWYgKGUuY2xpZW50WSA+IGNoaWxkUmVjdC50b3AgJiYgZS5jbGllbnRZIDwgY2hpbGRSZWN0LmJvdHRvbSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKGUuY2xpZW50WSA8IChjaGlsZFJlY3QudG9wICsgY2hpbGRSZWN0LmJvdHRvbSkgLyAyKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHBhcmVudC5pbnNlcnRCZWZvcmUocGxhY2Vob2xkZXIsIGNoaWxkKTtcclxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHBhcmVudC5pbnNlcnRCZWZvcmUocGxhY2Vob2xkZXIsIGNoaWxkLm5leHRTaWJsaW5nKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgKCkgPT4ge1xyXG5cdFx0XHRcdFx0aWYgKGRyYWdnZWRFbGVtZW50KSB7XHJcblx0XHRcdFx0XHRcdGRyYWdnZWRFbGVtZW50LnN0eWxlLm9wYWNpdHkgPSAnMSc7XHJcblx0XHRcdFx0XHRcdHBsYWNlaG9sZGVyLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGRyYWdnZWRFbGVtZW50LCBwbGFjZWhvbGRlcik7XHJcblx0XHRcdFx0XHRcdHBsYWNlaG9sZGVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocGxhY2Vob2xkZXIpO1xyXG5cdFx0XHRcdFx0XHRkcmFnZ2VkRWxlbWVudCA9IG51bGw7XHJcblx0XHRcdFx0XHRcdHBsYWNlaG9sZGVyID0gbnVsbDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHJcblx0XHRjb25zdCB2YWxpZGF0ZVJlZ2V4SW5wdXQgPSAoaW5wdXQpID0+IHtcclxuXHRcdFx0bGV0IGVycm9yTXNnID0gXCJcIjtcclxuXHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRjb25zdCByZWcgPSBuZXcgUmVnRXhwKGlucHV0LnZhbHVlKTtcclxuXHRcdFx0XHRjb25zdCBncm91cENvdW50ID0gKGlucHV0LnZhbHVlLm1hdGNoKC9cXCgoPyFcXD8pL2cpIHx8IFtdKS5sZW5ndGg7XHJcblx0XHRcdFx0aWYgKGdyb3VwQ291bnQgPiAxKSB7XHJcblx0XHRcdFx0XHRpbnB1dC5jbGFzc0xpc3QuYWRkKFwiaW52YWxpZC1ib3JkZXJcIik7XHJcblx0XHRcdFx0XHRlcnJvck1zZyA9IFwiTW9yZSB0aGFuIG9uZSBncm91cCBkZXRlY3RlZC5cIjtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0aW5wdXQuY2xhc3NMaXN0LnJlbW92ZShcImludmFsaWQtYm9yZGVyXCIpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBjYXRjaCAoZSkge1xyXG5cdFx0XHRcdGlucHV0LmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLWJvcmRlclwiKTtcclxuXHRcdFx0XHRlcnJvck1zZyA9IFwiSW52YWxpZCByZWdleC5cIjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y29uc3QgZXJyb3JFbGVtZW50ID0gaW5wdXQubmV4dFNpYmxpbmc7XHJcblx0XHRcdGlmIChlcnJvckVsZW1lbnQgJiYgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcInJlZ2V4LWVycm9yXCIpKSB7XHJcblx0XHRcdFx0ZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gZXJyb3JNc2c7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Y29uc3Qgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xyXG5cdFx0XHRcdHNwYW4uY2xhc3NOYW1lID0gXCJyZWdleC1lcnJvclwiO1xyXG5cdFx0XHRcdHNwYW4udGV4dENvbnRlbnQgPSBlcnJvck1zZztcclxuXHRcdFx0XHRpbnB1dC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzcGFuLCBpbnB1dC5uZXh0U2libGluZyk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0Y29uc3QgYWRkUmVnZXhUb0dyb3VwID0gKGdyb3VwQ29udGVudCwgcmVnZXgpID0+IHtcclxuXHRcdFx0Y29uc3Qgcm93ID0gZ3JvdXBDb250ZW50LmNyZWF0ZUVsKFwiZGl2XCIsIHtjbHM6ICdmbGV4LXJvdyd9KTtcclxuXHRcdFx0cm93LnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XHJcblx0XHRcdHJvdy5zdHlsZS5hbGlnbkl0ZW1zID0gJ2NlbnRlcic7XHJcblxyXG5cdFx0XHRjb25zdCBkcmFnSGFuZGxlID0gcm93LmNyZWF0ZUVsKFwic3BhblwiLCB7Y2xhc3NOYW1lOiBcImRyYWctaGFuZGxlXCIsIHRleHQ6IFwiXHUyNjMwXCJ9KTtcclxuXHRcdFx0Y29uc3QgYWN0aXZlQ2hlY2tib3ggPSByb3cuY3JlYXRlRWwoXCJpbnB1dFwiLCB7dHlwZTogXCJjaGVja2JveFwiLCBjbGFzc05hbWU6IFwiYWN0aXZlLWNoZWNrYm94XCJ9KTtcclxuXHRcdFx0YWN0aXZlQ2hlY2tib3guY2hlY2tlZCA9IHJlZ2V4LmlzQWN0aXZlO1xyXG5cclxuXHRcdFx0Y29uc3Qga2V5SW5wdXQgPSByb3cuY3JlYXRlRWwoXCJpbnB1dFwiLCB7XHJcblx0XHRcdFx0dHlwZTogXCJ0ZXh0XCIsXHJcblx0XHRcdFx0Y2xhc3NOYW1lOiBcImtleS1pbnB1dC1mbGV4XCIsXHJcblx0XHRcdFx0dmFsdWU6IHJlZ2V4LmtleSxcclxuXHRcdFx0XHRwbGFjZWhvbGRlcjogXCJEZXNjcmlwdGlvbi1LZXlcIlxyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdGNvbnN0IHZhbHVlSW5wdXQgPSByb3cuY3JlYXRlRWwoXCJpbnB1dFwiLCB7XHJcblx0XHRcdFx0dHlwZTogXCJ0ZXh0XCIsXHJcblx0XHRcdFx0Y2xhc3NOYW1lOiBcInZhbHVlLWlucHV0LWZsZXhcIixcclxuXHRcdFx0XHR2YWx1ZTogcmVnZXgucmVnZXgsXHJcblx0XHRcdFx0cGxhY2Vob2xkZXI6IFwiUmVnZXhwXCJcclxuXHRcdFx0fSk7XHJcblx0XHRcdHZhbHVlSW5wdXQuc3R5bGUuZmxleEdyb3cgPSAnMSc7XHJcblxyXG5cdFx0XHRjb25zdCBkZWxldGVCdXR0b24gPSByb3cuY3JlYXRlRWwoXCJidXR0b25cIiwge3RleHQ6IFwiRGVsZXRlXCIsIGNsYXNzTmFtZTogXCJkZWxldGUtYnV0dG9uXCJ9KTtcclxuXHJcblx0XHRcdGRlbGV0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG5cdFx0XHRcdHJvdy5yZW1vdmUoKTtcclxuXHRcdFx0XHR0aGlzLnVwZGF0ZVJlZ2V4T3JkZXJGcm9tRE9NKCk7XHJcblx0XHRcdFx0dGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0aWYgKGRyYWdIYW5kbGUpIHRoaXMubWFrZURyYWdnYWJsZShyb3csIGRyYWdIYW5kbGUpO1xyXG5cdFx0XHRrZXlJbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG5cdFx0XHRcdHRoaXMuc2V0SGlnaGxpZ2h0ZWQodHJ1ZSk7XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0dmFsdWVJbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG5cdFx0XHRcdHZhbGlkYXRlUmVnZXhJbnB1dCh2YWx1ZUlucHV0KTtcclxuXHRcdFx0XHR0aGlzLnNldEhpZ2hsaWdodGVkKHRydWUpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBhZGRHcm91cFVJID0gKGdyb3VwLCBpbmRleCkgPT4ge1xyXG5cclxuXHRcdFx0Y29uc3QgZ3JvdXBDb250YWluZXIgPSB0aGlzLmtleVZhbHVlQ29udGFpbmVyLmNyZWF0ZUVsKFwiZGl2XCIsIHsgY2xzOiAncmVnZXgtZ3JvdXAtY29udGFpbmVyIGdyb3VwLWNvbnRhaW5lcicgfSk7XHJcblx0XHRcdGdyb3VwQ29udGFpbmVyLnN0eWxlLmJvcmRlciA9IGdyb3VwLmlzQWN0aXZlID8gXCIxcHggc29saWQgdmFyKC0taW50ZXJhY3RpdmUtYWNjZW50KVwiIDogXCIxcHggc29saWQgI2NjY1wiO1xyXG5cdFx0XHRncm91cENvbnRhaW5lci5zdHlsZS5wYWRkaW5nID0gXCIxMHB4XCI7XHJcblx0XHRcdGdyb3VwQ29udGFpbmVyLnN0eWxlLm1hcmdpbkJvdHRvbSA9IFwiMTBweFwiO1xyXG5cclxuXHRcdFx0Y29uc3QgZ3JvdXBIZWFkZXIgPSBncm91cENvbnRhaW5lci5jcmVhdGVFbChcImRpdlwiLCB7IGNsczogXCJyZWdleC1ncm91cC1oZWFkZXJcIiB9KTtcclxuXHJcblx0XHRcdGNvbnN0IGdyb3VwTmFtZUFuZENvbnRyb2xzID0gZ3JvdXBIZWFkZXIuY3JlYXRlRGl2KHsgY2xzOiBcImdyb3VwLW5hbWUtYW5kLWNvbnRyb2xzXCIgfSk7XHJcblxyXG5cdFx0XHRjb25zdCBkcmFnSGFuZGxlID0gZ3JvdXBOYW1lQW5kQ29udHJvbHMuY3JlYXRlRWwoXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBcImRyYWctaGFuZGxlXCIsIHRleHQ6IFwiXFx1MjYzMFwiIH0pO1xyXG5cdFx0XHRjb25zdCBjb2xsYXBzZUljb24gPSBncm91cE5hbWVBbmRDb250cm9scy5jcmVhdGVFbChcInNwYW5cIiwgeyBjbHM6ICdjb2xsYXBzZS1pY29uJyB9KTtcclxuXHRcdFx0Y29sbGFwc2VJY29uLnRleHRDb250ZW50ID0gZ3JvdXAuaXNDb2xsYXBzZWQgPyAnXHUyNUJBJyA6ICdcdTI1QkMnO1xyXG5cclxuXHRcdFx0Y29uc3QgZ3JvdXBBY3RpdmVDaGVja2JveCA9IGdyb3VwTmFtZUFuZENvbnRyb2xzLmNyZWF0ZUVsKFwiaW5wdXRcIiwgeyB0eXBlOiAnY2hlY2tib3gnIH0pO1xyXG5cdFx0XHRncm91cEFjdGl2ZUNoZWNrYm94LmNoZWNrZWQgPSBncm91cC5pc0FjdGl2ZTtcclxuXHJcblx0XHRcdGNvbnN0IGdyb3VwTmFtZUVsID0gZ3JvdXBOYW1lQW5kQ29udHJvbHMuY3JlYXRlRWwoXCJzcGFuXCIsIHsgY2xzOiBcInJlZ2V4LWdyb3VwLW5hbWVcIiwgdGV4dDogZ3JvdXAuZ3JvdXBOYW1lIH0pO1xyXG5cdFx0XHRncm91cE5hbWVFbC5zZXRBdHRyaWJ1dGUoXCJjb250ZW50ZWRpdGFibGVcIiwgXCJ0cnVlXCIpO1xyXG5cclxuXHRcdFx0Y29uc3QgY29udHJvbEJ1dHRvbnMgPSBncm91cEhlYWRlci5jcmVhdGVEaXYoeyBjbHM6IFwiY29udHJvbC1idXR0b25zXCIgfSk7XHJcblxyXG5cdFx0XHRjb25zdCBhZGRSZWdleEJ1dHRvbiA9IGNvbnRyb2xCdXR0b25zLmNyZWF0ZUVsKFwiYnV0dG9uXCIsIHsgdGV4dDogXCJBZGQgUmVnZXhcIiwgY2xhc3NOYW1lOiBcImFkZC1yZWdleC1idXR0b25cIiB9KTtcclxuXHJcblx0XHRcdGNvbnN0IGRlbGV0ZUdyb3VwQnV0dG9uID0gY29udHJvbEJ1dHRvbnMuY3JlYXRlRWwoXCJidXR0b25cIiwgeyB0ZXh0OiBcIkRlbGV0ZSBHcm91cFwiLCBjbGFzc05hbWU6IFwiZGVsZXRlLWdyb3VwLWJ1dHRvblwiIH0pO1xyXG5cclxuXHRcdFx0Z3JvdXBBY3RpdmVDaGVja2JveC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsICgpID0+IHtcclxuXHRcdFx0XHRncm91cC5pc0FjdGl2ZSA9IGdyb3VwQWN0aXZlQ2hlY2tib3guY2hlY2tlZDtcclxuXHRcdFx0XHRncm91cENvbnRhaW5lci5zdHlsZS5ib3JkZXIgPSBncm91cC5pc0FjdGl2ZSA/IFwiMXB4IHNvbGlkIHZhcigtLWludGVyYWN0aXZlLWFjY2VudClcIiA6IFwiMXB4IHNvbGlkICNjY2NcIjtcclxuXHRcdFx0XHR0aGlzLnNldEhpZ2hsaWdodGVkKHRydWUpO1xyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdGNvbnN0IGdyb3VwQ29udGVudCA9IGdyb3VwQ29udGFpbmVyLmNyZWF0ZUVsKFwiZGl2XCIsIHsgY2xzOiAncmVnZXgtZ3JvdXAtY29udGVudCcgfSk7XHJcblx0XHRcdGdyb3VwQ29udGVudC5zdHlsZS5kaXNwbGF5ID0gZ3JvdXAuaXNDb2xsYXBzZWQgPyBcIm5vbmVcIiA6IFwiYmxvY2tcIjtcclxuXHJcblxyXG5cdFx0XHRhZGRSZWdleEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG5cdFx0XHRcdGdyb3VwLnJlZ2V4ZXMgPSBBcnJheS5mcm9tKGdyb3VwQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoXCIucmVnZXgtZ3JvdXAtY29udGVudCAuZmxleC1yb3dcIikpLm1hcChyb3cgPT4ge1xyXG5cdFx0XHRcdFx0Y29uc3Qga2V5SW5wdXQgPSByb3cucXVlcnlTZWxlY3RvcihcImlucHV0W3BsYWNlaG9sZGVyPSdEZXNjcmlwdGlvbi1LZXknXVwiKTtcclxuXHRcdFx0XHRcdGNvbnN0IHZhbHVlSW5wdXQgPSByb3cucXVlcnlTZWxlY3RvcihcImlucHV0W3BsYWNlaG9sZGVyPSdSZWdleHAnXVwiKTtcclxuXHRcdFx0XHRcdGNvbnN0IHJlZ2V4QWN0aXZlQ2hlY2tib3ggPSByb3cucXVlcnlTZWxlY3RvcihcImlucHV0W3R5cGU9J2NoZWNrYm94J11cIik7XHJcblx0XHRcdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdFx0XHRpc0FjdGl2ZTogcmVnZXhBY3RpdmVDaGVja2JveCA/IHJlZ2V4QWN0aXZlQ2hlY2tib3guY2hlY2tlZCA6IGZhbHNlLFxyXG5cdFx0XHRcdFx0XHRrZXk6IGtleUlucHV0ID8ga2V5SW5wdXQudmFsdWUgOiBcIlwiLFxyXG5cdFx0XHRcdFx0XHRyZWdleDogdmFsdWVJbnB1dCA/IHZhbHVlSW5wdXQudmFsdWUgOiBcIlwiXHJcblx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdGdyb3VwLnJlZ2V4ZXMudW5zaGlmdCh7IGlzQWN0aXZlOiB0cnVlLCBrZXk6IFwiTmV3IEtleVwiLCByZWdleDogXCJOZXcgUmVnZXhcIiB9KTtcclxuXHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5yZWdleEdyb3Vwc1tpbmRleF0gPSBncm91cDtcclxuXHRcdFx0XHR0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHR0aGlzLmRpc3BsYXkoKTtcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHRkZWxldGVHcm91cEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG5cdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnJlZ2V4R3JvdXBzLnNwbGljZShpbmRleCwgMSk7XHJcblx0XHRcdFx0dGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0dGhpcy5kaXNwbGF5KCk7XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0Y29sbGFwc2VJY29uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcblx0XHRcdFx0Z3JvdXAuaXNDb2xsYXBzZWQgPSAhZ3JvdXAuaXNDb2xsYXBzZWQ7XHJcblx0XHRcdFx0Z3JvdXBDb250ZW50LnN0eWxlLmRpc3BsYXkgPSBncm91cC5pc0NvbGxhcHNlZCA/IFwibm9uZVwiIDogXCJibG9ja1wiO1xyXG5cdFx0XHRcdGNvbGxhcHNlSWNvbi50ZXh0Q29udGVudCA9IGdyb3VwLmlzQ29sbGFwc2VkID8gJ1x1MjVCQScgOiAnXHUyNUJDJztcclxuXHRcdFx0XHR0aGlzLnNldEhpZ2hsaWdodGVkKHRydWUpO1xyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdGdyb3VwTmFtZUVsLmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIChldmVudCkgPT4ge1xyXG5cdFx0XHRcdGNvbnN0IG5ld05hbWUgPSBncm91cE5hbWVFbC50ZXh0Q29udGVudC50cmltKCk7XHJcblx0XHRcdFx0aWYgKG5ld05hbWUubGVuZ3RoID4gMCAmJiBuZXdOYW1lICE9PSBncm91cC5ncm91cE5hbWUpIHtcclxuXHRcdFx0XHRcdGdyb3VwLmdyb3VwTmFtZSA9IG5ld05hbWU7XHJcblx0XHRcdFx0XHR0aGlzLnVwZGF0ZVJlZ2V4T3JkZXJGcm9tRE9NKCk7XHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdG5ldyBOb3RpY2UoXCJHcm91cCBuYW1lIHVwZGF0ZWQuXCIpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRncm91cE5hbWVFbC50ZXh0Q29udGVudCA9IGdyb3VwLmdyb3VwTmFtZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0aWYgKGRyYWdIYW5kbGUpIHRoaXMubWFrZURyYWdnYWJsZShncm91cENvbnRhaW5lciwgZHJhZ0hhbmRsZSk7XHJcblxyXG5cdFx0XHRncm91cC5yZWdleGVzLmZvckVhY2gocmVnZXggPT4gYWRkUmVnZXhUb0dyb3VwKGdyb3VwQ29udGVudCwgcmVnZXgpKTtcclxuXHRcdH07XHJcblxyXG5cclxuXHRcdGNvbnN0IGJ1dHRvbnNDb250YWluZXIgPSBjb250YWluZXJFbC5jcmVhdGVEaXYoKTtcclxuXHRcdGJ1dHRvbnNDb250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xyXG5cdFx0YnV0dG9uc0NvbnRhaW5lci5zdHlsZS5qdXN0aWZ5Q29udGVudCA9IFwic3BhY2UtYmV0d2VlblwiO1xyXG5cdFx0YnV0dG9uc0NvbnRhaW5lci5zdHlsZS5tYXJnaW5Cb3R0b20gPSBcIjEwcHhcIjtcclxuXHJcblx0XHRjb25zdCBhZGRHcm91cEJ1dHRvbiA9IGJ1dHRvbnNDb250YWluZXIuY3JlYXRlRWwoXCJidXR0b25cIiwgeyB0ZXh0OiBcIkFkZCBHcm91cFwiIH0pO1xyXG5cdFx0YWRkR3JvdXBCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuXHRcdFx0Y29uc3QgbmV3R3JvdXAgPSB7XHJcblx0XHRcdFx0aXNBY3RpdmU6IHRydWUsXHJcblx0XHRcdFx0Z3JvdXBOYW1lOiBcIk5ldyBHcm91cFwiLFxyXG5cdFx0XHRcdHJlZ2V4ZXM6IFtdXHJcblx0XHRcdH07XHJcblx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnJlZ2V4R3JvdXBzLnB1c2gobmV3R3JvdXApO1xyXG5cdFx0XHR0aGlzLmRpc3BsYXkoKTtcclxuXHRcdFx0dGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHR9KTtcclxuXHJcblx0XHRjb25zdCBhZGRSZWdleFBhaXJCdXR0b24gPSBidXR0b25zQ29udGFpbmVyLmNyZWF0ZUVsKFwiYnV0dG9uXCIsIHsgdGV4dDogXCJBZGQgUmVnZXhwXCIgfSk7XHJcblx0XHRhZGRSZWdleFBhaXJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuXHRcdFx0Y29uc3QgbmV3UGFpciA9IHsgaXNBY3RpdmU6IGZhbHNlLCBrZXk6ICcnLCByZWdleDogJycgfTtcclxuXHRcdFx0dGhpcy5hZGRTdGFuZGFsb25lUmVnZXhVSShuZXdQYWlyKTtcclxuXHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MucmVnZXhQYWlycy5wdXNoKG5ld1BhaXIpO1xyXG5cdFx0XHR0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnJlZ2V4R3JvdXBzLmZvckVhY2goKGdyb3VwLCBpbmRleCkgPT4gYWRkR3JvdXBVSShncm91cCwgaW5kZXgpKTtcclxuXHJcblx0XHRpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MucmVnZXhQYWlycyAmJiBBcnJheS5pc0FycmF5KHRoaXMucGx1Z2luLnNldHRpbmdzLnJlZ2V4UGFpcnMpKSB7XHJcblx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnJlZ2V4UGFpcnMuZm9yRWFjaChwYWlyID0+IHRoaXMuYWRkU3RhbmRhbG9uZVJlZ2V4VUkocGFpcikpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMucmVuZGVyQmxhY2tsaXN0VUkoY29udGFpbmVyRWwpXHJcblxyXG5cdH1cclxuXHRwcml2YXRlIHJlbmRlckJsYWNrbGlzdFVJKGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudCkge1xyXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoJ2gzJywge3RleHQ6ICdCbGFja2xpc3QgTWFuYWdlbWVudCd9KTtcclxuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdwJywge3RleHQ6ICdFbnRlciBpdGVtcyB0byBibGFja2xpc3QuIFRoZXNlIGl0ZW1zIHdpbGwgbm90IGJlIHByb2Nlc3NlZC4nfSk7XHJcblxyXG5cdFx0Y29uc3QgYmxhY2tsaXN0Q29udGFpbmVyID0gY29udGFpbmVyRWwuY3JlYXRlRGl2KCk7XHJcblx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5ibGFja2xpc3QuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcclxuXHRcdFx0Y29uc3QgaXRlbURpdiA9IGJsYWNrbGlzdENvbnRhaW5lci5jcmVhdGVEaXYoKTtcclxuXHRcdFx0aXRlbURpdi50ZXh0Q29udGVudCA9IGl0ZW07XHJcblxyXG5cdFx0XHRjb25zdCByZW1vdmVCdXR0b24gPSBpdGVtRGl2LmNyZWF0ZUVsKCdidXR0b24nLCB7dGV4dDogJ1JlbW92ZSd9KTtcclxuXHRcdFx0cmVtb3ZlQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XHJcblx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuYmxhY2tsaXN0LnNwbGljZShpbmRleCwgMSk7XHJcblx0XHRcdFx0dGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCkudGhlbigoKSA9PiB0aGlzLmRpc3BsYXkoKSk7XHJcblx0XHRcdH07XHJcblx0XHR9KTtcclxuXHJcblx0XHRjb25zdCBhZGRJdGVtSW5wdXQgPSBjb250YWluZXJFbC5jcmVhdGVFbCgnaW5wdXQnLCB7dHlwZTogJ3RleHQnfSk7XHJcblx0XHRjb25zdCBhZGRJdGVtQnV0dG9uID0gY29udGFpbmVyRWwuY3JlYXRlRWwoJ2J1dHRvbicsIHt0ZXh0OiAnQWRkIHRvIEJsYWNrbGlzdCd9KTtcclxuXHRcdGFkZEl0ZW1CdXR0b24ub25jbGljayA9ICgpID0+IHtcclxuXHRcdFx0aWYgKGFkZEl0ZW1JbnB1dC52YWx1ZSAmJiAhdGhpcy5wbHVnaW4uc2V0dGluZ3MuYmxhY2tsaXN0LmluY2x1ZGVzKGFkZEl0ZW1JbnB1dC52YWx1ZSkpIHtcclxuXHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5ibGFja2xpc3QucHVzaChhZGRJdGVtSW5wdXQudmFsdWUpO1xyXG5cdFx0XHRcdGFkZEl0ZW1JbnB1dC52YWx1ZSA9ICcnO1xyXG5cdFx0XHRcdHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpLnRoZW4oKCkgPT4gdGhpcy5kaXNwbGF5KCkpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxuXHJcblx0Y3JlYXRlU2V0dGluZ3NVSShjb250YWluZXJFbCkge1xyXG5cdFx0Ly8gSWdub3JlIExpbmtzIFRvZ2dsZVxyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdC5zZXROYW1lKFwiSWdub3JlIGxpbmtzXCIpXHJcblx0XHRcdC5hZGRUb2dnbGUodG9nZ2xlID0+IHtcclxuXHRcdFx0XHR0b2dnbGVcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pZ25vcmVMaW5rcyA/PyB0cnVlKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jIHZhbHVlID0+IHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuaWdub3JlTGlua3MgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdFx0LnNldFRvb2x0aXAoXCJEbyBub3QgbW9kaWZ5IExpbmtzLCBwcmV2ZW50aW5nIHRvIGhhbmRsZSB0aGUgc2FtZSBkYXRhIG92ZXIgYW5kIG92ZXIgYWdhaW4uXCIpO1xyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoXCJJZ25vcmUgVVJMc1wiKVxyXG5cdFx0XHQuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB7XHJcblx0XHRcdFx0dG9nZ2xlXHJcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaWdub3JlVVJMcyA/PyB0cnVlKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jIHZhbHVlID0+IHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuaWdub3JlVVJMcyA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHQuc2V0VG9vbHRpcChcIkRvIG5vdCBtb2RpZnkgVVJMcywgc28gdGhleSBkbyBrZWVwIHdvcmtpbmcuXCIpO1xyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoXCJEZWZhbmcgVVJMc1wiKVxyXG5cdFx0XHQuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB7XHJcblx0XHRcdFx0dG9nZ2xlXHJcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVmYW5nVVJMcyA/PyB0cnVlKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jIHZhbHVlID0+IHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVmYW5nVVJMcyA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHQuc2V0VG9vbHRpcChcIkNvbnZlcnQgaHR0cHNbOl0vLyAtPiBodHRwczovL1wiKTtcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdC5zZXROYW1lKFwiSWdub3JlIGNvZGUgYmxvY2tzXCIpXHJcblx0XHRcdC5hZGRUb2dnbGUodG9nZ2xlID0+IHtcclxuXHRcdFx0XHR0b2dnbGVcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pZ25vcmVDb2RlQmxvY2tzID8/IGZhbHNlKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jIHZhbHVlID0+IHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuaWdub3JlQ29kZUJsb2NrcyA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHQuc2V0VG9vbHRpcChcIklnbm9yZSBjb250ZW50IHdpdGhpbiBjb2RlIGJsb2NrcyB3aGVuIGxpbmtpbmcgcmVnZXhlcy5cIik7XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZShcIlNhdmVcIilcclxuXHRcdFx0LmFkZEJ1dHRvbihidXR0b24gPT4ge1xyXG5cdFx0XHRcdGJ1dHRvbi5zZXRCdXR0b25UZXh0KFwiU2F2ZVwiKVxyXG5cdFx0XHRcdFx0Lm9uQ2xpY2soKCkgPT4ge1xyXG5cdFx0XHRcdFx0XHR0aGlzLnNhdmVDaGFuZ2VzKCk7XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR0aGlzLnNhdmVCdXR0b24gPSBidXR0b24uYnV0dG9uRWw7XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZShcIlJlc2V0IGRlZmF1bHRzXCIpXHJcblx0XHRcdC5hZGRCdXR0b24oYnV0dG9uID0+IHtcclxuXHRcdFx0XHRidXR0b24uc2V0QnV0dG9uVGV4dChcIlJlc2V0XCIpXHJcblx0XHRcdFx0XHQub25DbGljaygoKSA9PiB7XHJcblx0XHRcdFx0XHRcdGNvbnN0IHJlc2V0Q29uZmlybSA9IGNvbmZpcm0oXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcmVzZXQgdG8gZGVmYXVsdCBzZXR0aW5ncz9cIik7XHJcblx0XHRcdFx0XHRcdGlmIChyZXNldENvbmZpcm0pIHtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLnJlc2V0VG9EZWZhdWx0cygpO1xyXG5cdFx0XHRcdFx0XHRcdGlmICh0aGlzLnBsdWdpbi5fc2V0dGluZ1RhYlJlZmVyZW5jZSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uX3NldHRpbmdUYWJSZWZlcmVuY2UuZGlzcGxheSgpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdH0pO1xyXG5cdH1cclxuXHJcblxyXG5cdHJlc2V0VG9EZWZhdWx0cygpIHtcclxuXHRcdHRoaXMucGx1Z2luLnNldHRpbmdzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShERUZBVUxUX1NFVFRJTkdTKSk7XHJcblxyXG5cdFx0dGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCkudGhlbigoKSA9PiB7XHJcblx0XHRcdG5ldyBOb3RpY2UoXCJTZXR0aW5ncyBoYXZlIGJlZW4gcmVzZXQgdG8gZGVmYXVsdHMuXCIpO1xyXG5cdFx0XHR0aGlzLmRpc3BsYXkoKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBhZGRTdGFuZGFsb25lUmVnZXhVSShwYWlyKSB7XHJcblx0XHRjb25zdCByb3cgPSB0aGlzLmtleVZhbHVlQ29udGFpbmVyLmNyZWF0ZUVsKFwiZGl2XCIsIHsgY2xzOiAnZmxleC1yb3cgc3RhbmRhbG9uZS1yZWdleC1yb3cnIH0pO1xyXG5cdFx0cm93LnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XHJcblx0XHRyb3cuc3R5bGUuYWxpZ25JdGVtcyA9ICdjZW50ZXInO1xyXG5cclxuXHRcdGNvbnN0IGRyYWdIYW5kbGUgPSByb3cuY3JlYXRlRWwoXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBcImRyYWctaGFuZGxlXCIsIHRleHQ6IFwiXHUyNjMwXCIgfSk7XHJcblxyXG5cdFx0Y29uc3QgYWN0aXZlQ2hlY2tib3ggPSByb3cuY3JlYXRlRWwoXCJpbnB1dFwiLCB7IHR5cGU6IFwiY2hlY2tib3hcIiwgY2xhc3NOYW1lOiBcImFjdGl2ZS1jaGVja2JveFwiIH0pO1xyXG5cdFx0YWN0aXZlQ2hlY2tib3guY2hlY2tlZCA9IHBhaXIuaXNBY3RpdmU7XHJcblxyXG5cdFx0Y29uc3Qga2V5SW5wdXQgPSByb3cuY3JlYXRlRWwoXCJpbnB1dFwiLCB7XHJcblx0XHRcdHR5cGU6IFwidGV4dFwiLFxyXG5cdFx0XHRjbGFzc05hbWU6IFwia2V5LWlucHV0LWZsZXhcIixcclxuXHRcdFx0dmFsdWU6IHBhaXIua2V5LFxyXG5cdFx0XHRwbGFjZWhvbGRlcjogXCJEZXNjcmlwdGlvbi1LZXlcIlxyXG5cdFx0fSk7XHJcblxyXG5cdFx0Y29uc3QgdmFsdWVJbnB1dCA9IHJvdy5jcmVhdGVFbChcImlucHV0XCIsIHtcclxuXHRcdFx0dHlwZTogXCJ0ZXh0XCIsXHJcblx0XHRcdGNsYXNzTmFtZTogXCJ2YWx1ZS1pbnB1dC1mbGV4XCIsXHJcblx0XHRcdHZhbHVlOiBwYWlyLnJlZ2V4LFxyXG5cdFx0XHRwbGFjZWhvbGRlcjogXCJSZWdleHBcIlxyXG5cdFx0fSk7XHJcblx0XHR2YWx1ZUlucHV0LnN0eWxlLmZsZXhHcm93ID0gJzEnO1xyXG5cclxuXHRcdGNvbnN0IGRlbGV0ZUJ1dHRvbiA9IHJvdy5jcmVhdGVFbChcImJ1dHRvblwiLCB7IHRleHQ6IFwiRGVsZXRlXCIsIGNsYXNzTmFtZTogXCJkZWxldGUtYnV0dG9uXCIgfSk7XHJcblx0XHRkZWxldGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuXHRcdFx0cm93LnJlbW92ZSgpO1xyXG5cdFx0XHR0aGlzLnVwZGF0ZVJlZ2V4T3JkZXJGcm9tRE9NKCk7XHJcblx0XHRcdHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0Y29uc3QgaW5wdXRzQ29udGFpbmVyID0gcm93LmNyZWF0ZURpdih7IGNsczogJ2lucHV0cy1jb250YWluZXInIH0pO1xyXG5cdFx0aW5wdXRzQ29udGFpbmVyLmFwcGVuZChrZXlJbnB1dCwgdmFsdWVJbnB1dCwgZGVsZXRlQnV0dG9uKTtcclxuXHRcdGlucHV0c0NvbnRhaW5lci5zdHlsZS5mbGV4R3JvdyA9IFwiMVwiO1xyXG5cdFx0aW5wdXRzQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcclxuXHRcdGlucHV0c0NvbnRhaW5lci5zdHlsZS5qdXN0aWZ5Q29udGVudCA9IFwic3BhY2UtYmV0d2VlblwiO1xyXG5cdFx0aW5wdXRzQ29udGFpbmVyLnN0eWxlLmFsaWduSXRlbXMgPSBcImNlbnRlclwiO1xyXG5cclxuXHRcdGlmIChkcmFnSGFuZGxlKSB0aGlzLm1ha2VEcmFnZ2FibGUocm93LCBkcmFnSGFuZGxlKTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbGF4UGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcclxuXHRzZXR0aW5nczogUmVsYXhQbHVnaW5TZXR0aW5ncztcclxuXHRfc2V0dGluZ1RhYlJlZmVyZW5jZTogUmVsYXhTZXR0aW5nVGFiO1xyXG5cclxuXHRhc3luYyBvbmxvYWQoKSB7XHJcblx0XHRhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xyXG5cclxuXHRcdHRoaXMuX3NldHRpbmdUYWJSZWZlcmVuY2UgPSBuZXcgUmVsYXhTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKTtcclxuXHJcblx0XHR0aGlzLmFkZFNldHRpbmdUYWIodGhpcy5fc2V0dGluZ1RhYlJlZmVyZW5jZSk7XHJcblx0XHR0aGlzLmFkZENvbW1hbmQoe2lkOiBcInJlbGF4XCIsIG5hbWU6IFwiUi5FLkwuQS5YLlwiLCBjYWxsYmFjazogKCkgPT4gdGhpcy5hZGRCcmFja2V0cygpfSk7XHJcblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQoXHJcblx0XHRcdHRoaXMuYXBwLndvcmtzcGFjZS5vbihcImZpbGUtbWVudVwiLCAobWVudSwgZmlsZSkgPT4ge1xyXG5cdFx0XHRcdG1lbnUuYWRkSXRlbSgoaXRlbSkgPT4ge1xyXG5cdFx0XHRcdFx0aXRlbVxyXG5cdFx0XHRcdFx0XHQuc2V0VGl0bGUoXCJSLkUuTC5BLlguXCIpXHJcblx0XHRcdFx0XHRcdC5zZXRJY29uKFwiY3VybHktYnJhY2VzXCIpXHJcblx0XHRcdFx0XHRcdC5vbkNsaWNrKGFzeW5jICgpID0+IHtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLmFkZEJyYWNrZXRzKCk7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9KVxyXG5cdFx0KTtcclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudChcclxuXHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLm9uKFwiZWRpdG9yLW1lbnVcIiwgKG1lbnUsIGVkaXRvciwgdmlldykgPT4ge1xyXG5cdFx0XHRcdG1lbnUuYWRkSXRlbSgoaXRlbSkgPT4ge1xyXG5cdFx0XHRcdFx0aXRlbVxyXG5cdFx0XHRcdFx0XHQuc2V0VGl0bGUoXCJSLkUuTC5BLlguXCIpXHJcblx0XHRcdFx0XHRcdC5zZXRJY29uKFwiY3VybHktYnJhY2VzXCIpXHJcblx0XHRcdFx0XHRcdC5vbkNsaWNrKGFzeW5jICgpID0+IHtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLmFkZEJyYWNrZXRzKCk7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9KVxyXG5cdFx0KTtcclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudChcclxuXHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLm9uKFwiZWRpdG9yLW1lbnVcIiwgKG1lbnUsIGVkaXRvciwgdmlldykgPT4ge1xyXG5cdFx0XHRcdG1lbnUuYWRkSXRlbSgoaXRlbSkgPT4ge1xyXG5cdFx0XHRcdFx0aXRlbVxyXG5cdFx0XHRcdFx0XHQuc2V0VGl0bGUoXCJSZW1vdmUgYWxsIGJyYWNrZXRzXCIpXHJcblx0XHRcdFx0XHRcdC5zZXRJY29uKFwiY3VybHktYnJhY2VzXCIpXHJcblx0XHRcdFx0XHRcdC5vbkNsaWNrKGFzeW5jICgpID0+IHtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLnJlbW92ZUJyYWNrZXRzKCk7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9KVxyXG5cdFx0KTtcclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLmFwcC53b3Jrc3BhY2Uub24oXCJzZXR0aW5nczpvcGVuZWRcIiwgKCkgPT4ge1xyXG5cdFx0XHRpZiAodGhpcy5fc2V0dGluZ1RhYlJlZmVyZW5jZSkge1xyXG5cdFx0XHRcdHRoaXMuX3NldHRpbmdUYWJSZWZlcmVuY2Uuc2V0SGlnaGxpZ2h0ZWQoZmFsc2UpO1xyXG5cdFx0XHR9XHJcblx0XHR9KSk7XHJcblx0fVxyXG5cclxuXHRhc3luYyByZXNldFRvRGVmYXVsdHMoKSB7XHJcblx0XHR0aGlzLnNldHRpbmdzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShERUZBVUxUX1NFVFRJTkdTKSk7XHJcblx0XHRhd2FpdCB0aGlzLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0bmV3IE5vdGljZShcIlNldHRpbmdzIGhhdmUgYmVlbiByZXNldCB0byBkZWZhdWx0cy5cIik7XHJcblx0fVxyXG5cclxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XHJcblx0XHR0cnkge1xyXG5cdFx0XHRjb25zdCBsb2FkZWRTZXR0aW5ncyA9IGF3YWl0IHRoaXMubG9hZERhdGEoKTtcclxuXHRcdFx0aWYgKGxvYWRlZFNldHRpbmdzKSB7XHJcblx0XHRcdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGxvYWRlZFNldHRpbmdzKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJObyBzZXR0aW5ncyBsb2FkZWRcIik7XHJcblx0XHRcdH1cclxuXHRcdH0gY2F0Y2ggKGUpIHtcclxuXHRcdFx0Y29uc29sZS5lcnJvcihcIkVycm9yIGxvYWRpbmcgc2V0dGluZ3M6XCIsIGUpO1xyXG5cdFx0XHRhd2FpdCB0aGlzLnJlc2V0VG9EZWZhdWx0cygpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblxyXG5cdG9udW5sb2FkKCkge1xyXG5cdH1cclxuXHJcblx0YXN5bmMgc2F2ZVNldHRpbmdzKCkge1xyXG5cdFx0YXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcclxuXHRcdG5ldyBOb3RpY2UoXCJDb25maWcgc2F2ZWQhXCIpO1xyXG5cdH1cclxuXHJcblx0cmVtb3ZlQnJhY2tldHNJblNlbGVjdGlvbihjb250ZW50OiBzdHJpbmcpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuIGNvbnRlbnQucmVwbGFjZSgvKFteIV0pXFxbXFxbKFteXFxdXSspXFxdXFxdL2csIFwiJDEkMlwiKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIGFkZEJyYWNrZXRzRm9yRmlsZShub3RlRmlsZVBhdGggPSBcIlwiKSB7XHJcblx0XHRhd2FpdCB0aGlzLnByb2Nlc3NGaWxlQ29udGVudChub3RlRmlsZVBhdGgsIChjb250ZW50KSA9PiB0aGlzLnVwZGF0ZVNlbGVjdGlvbihjb250ZW50LCB0aGlzLnNldHRpbmdzKSk7XHJcblx0fVxyXG5cclxuXHRhc3luYyByZW1vdmVCcmFja2V0c2luRmlsZShub3RlRmlsZVBhdGggPSBcIlwiKSB7XHJcblx0XHRhd2FpdCB0aGlzLnByb2Nlc3NGaWxlQ29udGVudChub3RlRmlsZVBhdGgsIHRoaXMucmVtb3ZlQnJhY2tldHNJblNlbGVjdGlvbik7XHJcblx0fVxyXG5cclxuXHRhc3luYyBwcm9jZXNzRmlsZUNvbnRlbnQobm90ZUZpbGVQYXRoOiBzdHJpbmcsIGNvbnRlbnRQcm9jZXNzb3I6IChjb250ZW50OiBzdHJpbmcpID0+IHN0cmluZywgbm90ZUZpbGU/OiBURmlsZSk6IFByb21pc2U8dm9pZD4ge1xyXG5cdFx0aWYgKCFub3RlRmlsZSAmJiBub3RlRmlsZVBhdGggIT09IFwiXCIpIHtcclxuXHRcdFx0bm90ZUZpbGUgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgobm90ZUZpbGVQYXRoKSBhcyBURmlsZTtcclxuXHRcdFx0aWYgKCFub3RlRmlsZSkge1xyXG5cdFx0XHRcdG5ldyBOb3RpY2UoYE5vIGZpbGUgZm91bmQgYXQgdGhlIGdpdmVuIHBhdGg6ICR7bm90ZUZpbGVQYXRofWApO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIGlmICghbm90ZUZpbGUpIHtcclxuXHRcdFx0Y29uc3QgbGVhZiA9IHRoaXMuYXBwLndvcmtzcGFjZS5hY3RpdmVMZWFmIHx8IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWFmKCk7XHJcblx0XHRcdG5vdGVGaWxlID0gbGVhZi52aWV3IGluc3RhbmNlb2YgTWFya2Rvd25WaWV3ID8gbGVhZi52aWV3LmZpbGUgOiBudWxsO1xyXG5cclxuXHRcdFx0aWYgKCFub3RlRmlsZSkge1xyXG5cdFx0XHRcdG5ldyBOb3RpY2UoJ05vIGZpbGUgc2VsZWN0ZWQuIFBsZWFzZSBzZWxlY3QgYSBtYXJrZG93biBmaWxlIGZyb20gdGhlIGVkaXRvciBvciBuYXZpZ2F0aW9uIGJhci4nKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIShub3RlRmlsZSBpbnN0YW5jZW9mIFRGaWxlKSkge1xyXG5cdFx0XHRuZXcgTm90aWNlKCdTZWxlY3RlZCBpdGVtIGlzIG5vdCBhIHZhbGlkIHRleHQgZmlsZS4nKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGxldCBmaWxlQ29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQobm90ZUZpbGUpO1xyXG5cdFx0Y29uc3QgdXBkYXRlZENvbnRlbnQgPSBjb250ZW50UHJvY2Vzc29yKGZpbGVDb250ZW50KTtcclxuXHRcdGF3YWl0IHRoaXMuYXBwLnZhdWx0Lm1vZGlmeShub3RlRmlsZSwgdXBkYXRlZENvbnRlbnQpO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSByZW5kZXJCbGFja2xpc3RVSShjb250YWluZXJFbDogSFRNTEVsZW1lbnQpIHtcclxuXHRcdGNvbnN0IGJsYWNrbGlzdFNlY3Rpb24gPSBjb250YWluZXJFbC5jcmVhdGVFbCgnZGl2Jyk7XHJcblx0XHRibGFja2xpc3RTZWN0aW9uLmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogJ0JsYWNrbGlzdCcgfSk7XHJcblx0XHRjb25zdCBsaXN0Q29udGFpbmVyID0gYmxhY2tsaXN0U2VjdGlvbi5jcmVhdGVFbCgnZGl2Jyk7XHJcblxyXG5cdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuYmxhY2tsaXN0LmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XHJcblx0XHRcdGNvbnN0IGl0ZW1FbCA9IGxpc3RDb250YWluZXIuY3JlYXRlRWwoJ2RpdicpO1xyXG5cdFx0XHRpdGVtRWwuY3JlYXRlRWwoJ3NwYW4nLCB7IHRleHQ6IGl0ZW0gfSk7XHJcblx0XHRcdGNvbnN0IHJlbW92ZUJ1dHRvbiA9IGl0ZW1FbC5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnUmVtb3ZlJyB9KTtcclxuXHRcdFx0cmVtb3ZlQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XHJcblx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuYmxhY2tsaXN0LnNwbGljZShpbmRleCwgMSk7XHJcblx0XHRcdFx0dGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCkudGhlbigoKSA9PiB0aGlzLmRpc3BsYXkoKSk7XHJcblx0XHRcdH07XHJcblx0XHR9KTtcclxuXHJcblx0XHRjb25zdCBhZGRJdGVtSW5wdXQgPSBibGFja2xpc3RTZWN0aW9uLmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ3RleHQnIH0pO1xyXG5cdFx0Y29uc3QgYWRkSXRlbUJ1dHRvbiA9IGJsYWNrbGlzdFNlY3Rpb24uY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ0FkZCcgfSk7XHJcblx0XHRhZGRJdGVtQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XHJcblx0XHRcdGlmIChhZGRJdGVtSW5wdXQudmFsdWUpIHtcclxuXHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5ibGFja2xpc3QucHVzaChhZGRJdGVtSW5wdXQudmFsdWUpO1xyXG5cdFx0XHRcdHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpLnRoZW4oKCkgPT4gdGhpcy5kaXNwbGF5KCkpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxuXHR1cGRhdGVTZWxlY3Rpb24oY29udGVudDogc3RyaW5nLCBzZXR0aW5nczogUmVsYXhQbHVnaW5TZXR0aW5ncyk6IHN0cmluZyB7XHJcblx0XHRjb25zdCB1cmxSZWdleCA9IC8oaHR0cHM/OlxcL1xcL1teXFxzXSspL2c7XHJcblx0XHRjb25zdCBleGNsdWRlZEV4dGVuc2lvbnMgPSAvXFwuKGV4ZXxsbmt8eGxzfG1kfHNofGVsZnxiaW58dG1wfGRvY3xvZHR8ZG9jeHxwZGZ8eWFyYXxkbGx8dHh0KSQvO1xyXG5cdFx0Y29uc3QgZmFuZ01hcCA9IHtcclxuXHRcdFx0XCJbLl1cIjogXCIuXCIsXHJcblx0XHRcdFwiWzpdXCI6IFwiOlwiXHJcblx0XHR9O1xyXG5cdFx0aWYgKHNldHRpbmdzLmRlZmFuZ1VSTHMpIHtcclxuXHRcdFx0Y29udGVudCA9IGNvbnRlbnQucmVwbGFjZSgvXFxbXFwuXFxdfFxcW1xcOlxcXS9nLCBjaGFyID0+IGZhbmdNYXBbY2hhcl0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdGxldCB1cGRhdGVkVGV4dCA9IFwiXCI7XHJcblx0XHRjb25zdCBsaW5lcyA9IGNvbnRlbnQuc3BsaXQoXCJcXG5cIik7XHJcblx0XHRsZXQgaW5Db2RlQmxvY2sgPSBmYWxzZTtcclxuXHJcblx0XHRmdW5jdGlvbiBjb250YWluc1ZhbGlkTGluayhsaW5lOiBzdHJpbmcsIG1hdGNoOiBzdHJpbmcpOiBib29sZWFuIHtcclxuXHRcdFx0Y29uc3QgbGlua1JlZ2V4ID0gL1xcW1xcWy4qP1xcXVxcXS9nO1xyXG5cdFx0XHRsZXQgcmVzdWx0O1xyXG5cdFx0XHR3aGlsZSAoKHJlc3VsdCA9IGxpbmtSZWdleC5leGVjKGxpbmUpKSAhPT0gbnVsbCkge1xyXG5cdFx0XHRcdGlmIChyZXN1bHQuaW5kZXggPD0gbGluZS5pbmRleE9mKG1hdGNoKSAmJiBsaW5rUmVnZXgubGFzdEluZGV4ID49IGxpbmUuaW5kZXhPZihtYXRjaCkgKyBtYXRjaC5sZW5ndGgpIHtcclxuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0bGluZXMuZm9yRWFjaCgobGluZSwgaW5kZXgpID0+IHtcclxuXHRcdFx0aWYgKHNldHRpbmdzLmlnbm9yZUNvZGVCbG9ja3MgJiYgbGluZS50cmltKCkuc3RhcnRzV2l0aChcImBgYFwiKSkge1xyXG5cdFx0XHRcdGluQ29kZUJsb2NrID0gIWluQ29kZUJsb2NrO1xyXG5cdFx0XHRcdHVwZGF0ZWRUZXh0ICs9IGxpbmUgKyBcIlxcblwiO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKGluQ29kZUJsb2NrKSB7XHJcblx0XHRcdFx0dXBkYXRlZFRleHQgKz0gbGluZSArIFwiXFxuXCI7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRsZXQgbW9kaWZpZWRMaW5lID0gbGluZTtcclxuXHJcblx0XHRcdHNldHRpbmdzLnJlZ2V4R3JvdXBzLmZvckVhY2goZ3JvdXAgPT4ge1xyXG5cdFx0XHRcdGlmICghZ3JvdXAuaXNBY3RpdmUpIHJldHVybjtcclxuXHJcblx0XHRcdFx0Z3JvdXAucmVnZXhlcy5mb3JFYWNoKCh7aXNBY3RpdmUsIHJlZ2V4fSkgPT4ge1xyXG5cdFx0XHRcdFx0aWYgKCFpc0FjdGl2ZSkgcmV0dXJuO1xyXG5cclxuXHRcdFx0XHRcdGNvbnN0IGNvbXBpbGVkUmVnZXggPSBuZXcgUmVnRXhwKHJlZ2V4LCBcImdcIik7XHJcblx0XHRcdFx0XHRtb2RpZmllZExpbmUgPSBtb2RpZmllZExpbmUucmVwbGFjZShjb21waWxlZFJlZ2V4LCAobWF0Y2gsIC4uLmFyZ3MpID0+IHtcclxuXHRcdFx0XHRcdFx0Y29uc3QgZ3JvdXBzID0gYXJncy5zbGljZSgwLCAtMikuZmlsdGVyKGcgPT4gZyAhPT0gdW5kZWZpbmVkKTtcclxuXHRcdFx0XHRcdFx0Y29uc3QgY2FwdHVyZWRWYWx1ZSA9IGdyb3Vwc1swXTtcclxuXHRcdFx0XHRcdFx0aWYgKHNldHRpbmdzLmJsYWNrbGlzdC5pbmNsdWRlcyhtYXRjaCkpIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gbWF0Y2g7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0aWYgKCFjYXB0dXJlZFZhbHVlKSByZXR1cm4gbWF0Y2g7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoc2V0dGluZ3MuaWdub3JlTGlua3MgJiYgY29udGFpbnNWYWxpZExpbmsobGluZSwgY2FwdHVyZWRWYWx1ZSkpIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gbWF0Y2g7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdGlmIChzZXR0aW5ncy5pZ25vcmVVUkxzKSB7XHJcblx0XHRcdFx0XHRcdFx0Y29uc3QgdXJscyA9IEFycmF5LmZyb20obGluZS5tYXRjaEFsbCh1cmxSZWdleCksIG0gPT4gbVswXSk7XHJcblx0XHRcdFx0XHRcdFx0bGV0IGlnbm9yZUN1cnJlbnRNYXRjaCA9IGZhbHNlO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRmb3IgKGNvbnN0IHVybCBvZiB1cmxzKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIWV4Y2x1ZGVkRXh0ZW5zaW9ucy50ZXN0KHVybCkgJiYgdXJsLmluY2x1ZGVzKGNhcHR1cmVkVmFsdWUpKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGlnbm9yZUN1cnJlbnRNYXRjaCA9IHRydWU7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0aWYgKGlnbm9yZUN1cnJlbnRNYXRjaCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIG1hdGNoO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Y29uc3Qgb2Zmc2V0ID0gYXJnc1thcmdzLmxlbmd0aCAtIDJdO1xyXG5cdFx0XHRcdFx0XHRjb25zdCBwcmVjZWRpbmdDaGFyID0gb2Zmc2V0ID4gMCA/IGxpbmVbb2Zmc2V0IC0gMV0gOiBudWxsO1xyXG5cdFx0XHRcdFx0XHRjb25zdCBzcGFjZUlmQmFja3NsYXNoID0gcHJlY2VkaW5nQ2hhciA9PT0gJ1xcXFwnID8gJyAnIDogJyc7XHJcblxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gYCR7c3BhY2VJZkJhY2tzbGFzaH1bWyR7bWF0Y2h9XV1gO1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0dXBkYXRlZFRleHQgKz0gbW9kaWZpZWRMaW5lICsgXCJcXG5cIjtcclxuXHRcdH0pO1xyXG5cclxuXHRcdHJldHVybiB1cGRhdGVkVGV4dC50cmltKCk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBwcm9jZXNzTWFya2Rvd25Db250ZW50KGFjdGlvbjogXCJyZW1vdmVCcmFja2V0c1wiIHwgXCJhZGRCcmFja2V0c1wiKSB7XHJcblx0XHRjb25zdCBhY3RpdmVMZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUxlYWY7XHJcblxyXG5cdFx0aWYgKCFhY3RpdmVMZWFmKSB7XHJcblx0XHRcdG5ldyBOb3RpY2UoXCJQbGVhc2Ugb3BlbiBhIG1hcmtkb3duIGZpbGUgb3Igc2VsZWN0IGEgZm9sZGVyXCIpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgdmlldyA9IGFjdGl2ZUxlYWYudmlldztcclxuXHRcdGlmICghdmlldykge1xyXG5cdFx0XHRuZXcgTm90aWNlKFwiVW5rbm93biBpdGVtIHNlbGVjdGVkLiBQbGVhc2Ugc2VsZWN0IGEgbWFya2Rvd24gZmlsZSBvciBmb2xkZXJcIik7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodmlldyBpbnN0YW5jZW9mIE1hcmtkb3duVmlldykge1xyXG5cdFx0XHRjb25zdCBzZWxlY3Rpb24gPSB2aWV3LmVkaXRvci5nZXRTZWxlY3Rpb24oKTtcclxuXHJcblx0XHRcdGlmIChzZWxlY3Rpb24gJiYgc2VsZWN0aW9uLnRyaW0oKS5sZW5ndGggIT09IDApIHtcclxuXHRcdFx0XHRsZXQgdXBkYXRlZFNlbGVjdGlvbjtcclxuXHRcdFx0XHRpZiAoYWN0aW9uID09PSBcInJlbW92ZUJyYWNrZXRzXCIpIHtcclxuXHRcdFx0XHRcdHVwZGF0ZWRTZWxlY3Rpb24gPSB0aGlzLnJlbW92ZUJyYWNrZXRzSW5TZWxlY3Rpb24oc2VsZWN0aW9uKTtcclxuXHRcdFx0XHRcdG5ldyBOb3RpY2UoXCJSZW1vdmVkIGJyYWNrZXRzIGZyb20gc2VsZWN0aW9uIVwiKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0dXBkYXRlZFNlbGVjdGlvbiA9IHRoaXMudXBkYXRlU2VsZWN0aW9uKHNlbGVjdGlvbiwgdGhpcy5zZXR0aW5ncyk7XHJcblx0XHRcdFx0XHRuZXcgTm90aWNlKFwiQWRkZWQgYnJhY2tldHMgaW4gc2VsZWN0aW9uIVwiKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0dmlldy5lZGl0b3IucmVwbGFjZVNlbGVjdGlvbih1cGRhdGVkU2VsZWN0aW9uKTtcclxuXHRcdFx0XHRuZXcgTm90aWNlKGFjdGlvbiA9PT0gXCJyZW1vdmVCcmFja2V0c1wiID8gXCJSZW1vdmVkIGJyYWNrZXRzIGZyb20gc2VsZWN0aW9uIVwiIDogXCJVcGRhdGVkIGNvbnRlbnQgaW4gc2VsZWN0aW9uIVwiKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRpZiAoYWN0aW9uID09PSBcInJlbW92ZUJyYWNrZXRzXCIpIHtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMucmVtb3ZlQnJhY2tldHNpbkZpbGUoKTtcclxuXHRcdFx0XHRcdG5ldyBOb3RpY2UoXCJSZW1vdmVkIGJyYWNrZXRzIGZyb20gZW50aXJlIGZpbGUhXCIpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRhd2FpdCB0aGlzLmFkZEJyYWNrZXRzRm9yRmlsZSgpO1xyXG5cdFx0XHRcdFx0bmV3IE5vdGljZShcIkFkZGVkIGJyYWNrZXRzIG9uIGVudGlyZSBmaWxlIVwiKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGFzeW5jIHJlbW92ZUJyYWNrZXRzKCkge1xyXG5cdFx0YXdhaXQgdGhpcy5wcm9jZXNzTWFya2Rvd25Db250ZW50KFwicmVtb3ZlQnJhY2tldHNcIik7XHJcblx0fVxyXG5cclxuXHRhc3luYyBhZGRCcmFja2V0cygpIHtcclxuXHRcdGNvbnN0IGFjdGl2ZUxlYWYgPSB0aGlzLmFwcC53b3Jrc3BhY2UuYWN0aXZlTGVhZjtcclxuXHJcblx0XHRpZiAoIWFjdGl2ZUxlYWYgfHwgIWFjdGl2ZUxlYWYudmlldykge1xyXG5cdFx0XHRuZXcgTm90aWNlKFwiUGxlYXNlIG9wZW4gYSBtYXJrZG93biBmaWxlIG9yIHNlbGVjdCBhIGZvbGRlclwiKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChhY3RpdmVMZWFmLnZpZXcgaW5zdGFuY2VvZiBNYXJrZG93blZpZXcpIHtcclxuXHRcdFx0Y29uc3QgZWRpdG9yID0gYWN0aXZlTGVhZi52aWV3LmVkaXRvcjtcclxuXHRcdFx0Y29uc3Qgc2VsZWN0aW9uID0gZWRpdG9yLmdldFNlbGVjdGlvbigpO1xyXG5cclxuXHRcdFx0aWYgKHNlbGVjdGlvbiAmJiBzZWxlY3Rpb24udHJpbSgpLmxlbmd0aCAhPT0gMCkge1xyXG5cdFx0XHRcdGNvbnN0IHVwZGF0ZWRTZWxlY3Rpb24gPSB0aGlzLnVwZGF0ZVNlbGVjdGlvbihzZWxlY3Rpb24sIHRoaXMuc2V0dGluZ3MpO1xyXG5cdFx0XHRcdGVkaXRvci5yZXBsYWNlU2VsZWN0aW9uKHVwZGF0ZWRTZWxlY3Rpb24pO1xyXG5cdFx0XHRcdG5ldyBOb3RpY2UoXCJBZGRlZCBicmFja2V0cyBpbiBzZWxlY3Rpb24hXCIpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRjb25zdCBmaWxlUGF0aCA9IGFjdGl2ZUxlYWYudmlldy5maWxlLnBhdGg7XHJcblx0XHRcdFx0YXdhaXQgdGhpcy5hZGRCcmFja2V0c0ZvckZpbGUoZmlsZVBhdGgpO1xyXG5cdFx0XHRcdG5ldyBOb3RpY2UoXCJVcGRhdGVkIGVudGlyZSBmaWxlIVwiKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBpc1NlbGVjdGVkKGl0ZW0pIHtcclxuXHRcdFx0cmV0dXJuIGl0ZW0uc2VsZkVsICYmIGl0ZW0uc2VsZkVsLmNsYXNzTGlzdC5jb250YWlucyhcImhhcy1mb2N1c1wiKTtcclxuXHRcdH1cclxuXHJcblx0XHRsZXQgc2VsZWN0ZWRGaWxlSXRlbSA9IG51bGw7XHJcblxyXG5cdFx0Zm9yIChjb25zdCBrZXkgaW4gYWN0aXZlTGVhZi52aWV3LmZpbGVJdGVtcykge1xyXG5cdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFjdGl2ZUxlYWYudmlldy5maWxlSXRlbXMsIGtleSkpIHtcclxuXHRcdFx0XHRjb25zdCBpdGVtID0gYWN0aXZlTGVhZi52aWV3LmZpbGVJdGVtc1trZXldO1xyXG5cdFx0XHRcdGlmIChpc1NlbGVjdGVkKGl0ZW0pKSB7XHJcblx0XHRcdFx0XHRzZWxlY3RlZEZpbGVJdGVtID0gaXRlbTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICghc2VsZWN0ZWRGaWxlSXRlbSkge1xyXG5cdFx0XHRuZXcgTm90aWNlKFwiTm8gbWFya2Rvd24gZmlsZSBvciBmb2xkZXIgaXMgY3VycmVudGx5IHNlbGVjdGVkLiBQbGVhc2Ugc2VsZWN0IG9uZS5cIik7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoc2VsZWN0ZWRGaWxlSXRlbS5jb2xsYXBzaWJsZSkge1xyXG5cdFx0XHRjb25zdCBmb2xkZXJQYXRoID0gc2VsZWN0ZWRGaWxlSXRlbS5maWxlLnBhdGg7XHJcblx0XHRcdGF3YWl0IHRoaXMuYWRkQnJhY2tldHNGb3JGb2xkZXIoZm9sZGVyUGF0aCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRjb25zdCBmaWxlUGF0aCA9IHNlbGVjdGVkRmlsZUl0ZW0uZmlsZS5wYXRoO1xyXG5cdFx0XHRhd2FpdCB0aGlzLmFkZEJyYWNrZXRzRm9yRmlsZShmaWxlUGF0aCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRhc3luYyBhZGRCcmFja2V0c0ZvckZvbGRlcihmb2xkZXJQYXRoOiBzdHJpbmcpIHtcclxuXHRcdGNvbnN0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpLmZpbHRlcihmaWxlID0+IGZpbGUucGF0aC5zdGFydHNXaXRoKGZvbGRlclBhdGgpKTtcclxuXHRcdGNvbnN0IHRvdGFsRmlsZXMgPSBmaWxlcy5sZW5ndGg7XHJcblx0XHRsZXQgcHJvY2Vzc2VkRmlsZXMgPSAwO1xyXG5cclxuXHRcdGNvbnN0IHByb2Nlc3NpbmdOb3RpY2UgPSBuZXcgTm90aWNlKGBQcm9jZXNzaW5nICR7dG90YWxGaWxlc30gZmlsZXMuLi5gLCB0b3RhbEZpbGVzICogMTAwMCk7XHJcblxyXG5cdFx0Y29uc3QgbWF4Q29uY3VycmVudFRhc2tzID0gMjA7XHJcblx0XHRjb25zdCB0YXNrUXVldWUgPSBbXTtcclxuXHJcblx0XHRjb25zdCBwcm9jZXNzRmlsZSA9IGFzeW5jIChmaWxlKSA9PiB7XHJcblx0XHRcdGF3YWl0IHRoaXMuYWRkQnJhY2tldHNGb3JGaWxlKGZpbGUucGF0aCk7XHJcblx0XHRcdHByb2Nlc3NlZEZpbGVzKys7XHJcblx0XHRcdHByb2Nlc3NpbmdOb3RpY2Uuc2V0TWVzc2FnZShgUHJvY2Vzc2luZyBmaWxlICR7cHJvY2Vzc2VkRmlsZXN9IG9mICR7dG90YWxGaWxlc31gKTtcclxuXHRcdFx0aWYgKHRhc2tRdWV1ZS5sZW5ndGggPiAwKSB7XHJcblx0XHRcdFx0Y29uc3QgbmV4dFRhc2sgPSB0YXNrUXVldWUuc2hpZnQoKTtcclxuXHRcdFx0XHRhd2FpdCBuZXh0VGFzaygpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdGNvbnN0IGVucXVldWVUYXNrID0gKGZpbGUpID0+IHtcclxuXHRcdFx0aWYgKHRhc2tRdWV1ZS5sZW5ndGggPCBtYXhDb25jdXJyZW50VGFza3MpIHtcclxuXHRcdFx0XHR0YXNrUXVldWUucHVzaCgoKSA9PiBwcm9jZXNzRmlsZShmaWxlKSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cHJvY2Vzc0ZpbGUoZmlsZSk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0ZmlsZXMuZm9yRWFjaChmaWxlID0+IGVucXVldWVUYXNrKGZpbGUpKTtcclxuXHJcblx0XHR3aGlsZSAodGFza1F1ZXVlLmxlbmd0aCA+IDApIHtcclxuXHRcdFx0Y29uc3QgbmV4dFRhc2sgPSB0YXNrUXVldWUuc2hpZnQoKTtcclxuXHRcdFx0YXdhaXQgbmV4dFRhc2soKTtcclxuXHRcdH1cclxuXHJcblx0XHRwcm9jZXNzaW5nTm90aWNlLmhpZGUoKTtcclxuXHRcdG5ldyBOb3RpY2UoYEFsbCAke3RvdGFsRmlsZXN9IGZpbGVzIGluIHRoZSBmb2xkZXIgcHJvY2Vzc2VkLmApO1xyXG5cdH1cclxuXHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUFrRjtBQWtCbEYsSUFBSSxtQkFBbUI7QUFBQSxFQUN0QixZQUFZLENBQUM7QUFBQSxFQUNiLGFBQWE7QUFBQSxJQUNaO0FBQUEsTUFDQyxVQUFVO0FBQUEsTUFDVixXQUFXO0FBQUEsTUFDWCxTQUFTO0FBQUEsUUFDUjtBQUFBLFVBQ0MsWUFBWTtBQUFBLFVBQ1osT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFFBQ1Y7QUFBQSxRQUNBO0FBQUEsVUFDQyxZQUFZO0FBQUEsVUFDWixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUEsUUFDVjtBQUFBLFFBQ0E7QUFBQSxVQUNDLFlBQVk7QUFBQSxVQUNaLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFVBQ0MsWUFBWTtBQUFBLFVBQ1osT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFFBQ1Y7QUFBQSxRQUNBO0FBQUEsVUFDQyxZQUFZO0FBQUEsVUFDWixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUEsUUFDVjtBQUFBLFFBQ0E7QUFBQSxVQUNDLFlBQVk7QUFBQSxVQUNaLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFVBQ0MsWUFBWTtBQUFBLFVBQ1osT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFFBQ1Y7QUFBQSxRQUNBO0FBQUEsVUFDQyxZQUFZO0FBQUEsVUFDWixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUEsUUFDVjtBQUFBLFFBQ0E7QUFBQSxVQUNDLFlBQVk7QUFBQSxVQUNaLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFVBQ0MsWUFBWTtBQUFBLFVBQ1osT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFFBQ1Y7QUFBQSxRQUNBO0FBQUEsVUFDQyxZQUFZO0FBQUEsVUFDWixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUEsUUFDVjtBQUFBLFFBQ0E7QUFBQSxVQUNDLFlBQVk7QUFBQSxVQUNaLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFVBQ0MsWUFBWTtBQUFBLFVBQ1osT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFFBQ1Y7QUFBQSxRQUNBO0FBQUEsVUFDQyxZQUFZO0FBQUEsVUFDWixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUEsUUFDVjtBQUFBLFFBQ0E7QUFBQSxVQUNDLFlBQVk7QUFBQSxVQUNaLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFVBQ0MsWUFBWTtBQUFBLFVBQ1osT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFFBQ1Y7QUFBQSxRQUNBO0FBQUEsVUFDQyxZQUFZO0FBQUEsVUFDWixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUEsUUFDVjtBQUFBLFFBQ0E7QUFBQSxVQUNDLFlBQVk7QUFBQSxVQUNaLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFVBQ0MsWUFBWTtBQUFBLFVBQ1osT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFFBQ1Y7QUFBQSxRQUNBO0FBQUEsVUFDQyxZQUFZO0FBQUEsVUFDWixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUEsUUFDVjtBQUFBLFFBQ0E7QUFBQSxVQUNDLFlBQVk7QUFBQSxVQUNaLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFVBQ0MsWUFBWTtBQUFBLFVBQ1osT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFFBQ1Y7QUFBQSxRQUNBO0FBQUEsVUFDQyxZQUFZO0FBQUEsVUFDWixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUEsUUFDVjtBQUFBLFFBQ0E7QUFBQSxVQUNDLFlBQVk7QUFBQSxVQUNaLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFVBQ0MsWUFBWTtBQUFBLFVBQ1osT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFFBQ1Y7QUFBQSxRQUNBO0FBQUEsVUFDQyxZQUFZO0FBQUEsVUFDWixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUEsUUFDVjtBQUFBLFFBQ0E7QUFBQSxVQUNDLFlBQVk7QUFBQSxVQUNaLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFVBQ0MsWUFBWTtBQUFBLFVBQ1osT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFFBQ1Y7QUFBQSxRQUNBO0FBQUEsVUFDQyxZQUFZO0FBQUEsVUFDWixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUEsUUFDVjtBQUFBLFFBQ0E7QUFBQSxVQUNDLFlBQVk7QUFBQSxVQUNaLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFVBQ0MsWUFBWTtBQUFBLFVBQ1osT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFFBQ1Y7QUFBQSxRQUNBO0FBQUEsVUFDQyxZQUFZO0FBQUEsVUFDWixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUEsUUFDVjtBQUFBLFFBQ0E7QUFBQSxVQUNDLFlBQVk7QUFBQSxVQUNaLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFVBQ0MsWUFBWTtBQUFBLFVBQ1osT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFFBQ1Y7QUFBQSxRQUNBO0FBQUEsVUFDQyxZQUFZO0FBQUEsVUFDWixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUEsUUFDVjtBQUFBLFFBQ0E7QUFBQSxVQUNDLFlBQVk7QUFBQSxVQUNaLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFVBQ0MsWUFBWTtBQUFBLFVBQ1osT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFFBQ1Y7QUFBQSxRQUNBO0FBQUEsVUFDQyxZQUFZO0FBQUEsVUFDWixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUEsUUFDVjtBQUFBLFFBQ0E7QUFBQSxVQUNDLFlBQVk7QUFBQSxVQUNaLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFVBQ0MsWUFBWTtBQUFBLFVBQ1osT0FBTztBQUFB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
